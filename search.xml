<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>md格式优化</title>
      <link href="/posts/2eb3.html"/>
      <url>/posts/2eb3.html</url>
      
        <content type="html"><![CDATA[<h1 id="md样式修改"><a href="#md样式修改" class="headerlink" title="md样式修改"></a>md样式修改</h1><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 设置整体页面样式 */</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #eaeaea<span class="token punctuation">;</span> <span class="token comment">/* 背景颜色 */</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token comment">/* 边距 */</span>    <span class="token property">color</span><span class="token punctuation">:</span> #34495e<span class="token punctuation">;</span> <span class="token comment">/* 文字颜色 */</span>    <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>123deg<span class="token punctuation">,</span> #eec7ee 0%<span class="token punctuation">,</span> #90e2ea 50%<span class="token punctuation">,</span> #c1f7b3 100%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 渐变背景色 */</span>    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 标题1样式 */</span><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 48px 0 22px -5px<span class="token punctuation">;</span> <span class="token comment">/* 上、下、左边距 */</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 2.0rem<span class="token punctuation">;</span> <span class="token comment">/* 字体大小 */</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span> <span class="token comment">/* 字体粗细 */</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 2.0rem<span class="token punctuation">;</span> <span class="token comment">/* 行高 */</span>    <span class="token property">color</span><span class="token punctuation">:</span> #42b983 <span class="token important">!important</span><span class="token punctuation">;</span> <span class="token comment">/* 字体颜色 */</span><span class="token punctuation">&#125;</span><span class="token comment">/* 标题2样式 */</span><span class="token selector">h2</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 42px 0 18px -5px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.8rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.8rem<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #42b983 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 标题3样式 */</span><span class="token selector">h3</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 38px 0 15px -4px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.6rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.7rem<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #42b983 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 标题4样式 */</span><span class="token selector">h4</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 32px 0 12px -4px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.45rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.45rem<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #42b983 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 标题5样式 */</span><span class="token selector">h5</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 28px 0 8px -4px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #42b983 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 标题6样式 */</span><span class="token selector">h6</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 22px 0 4px -4px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.1rem<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.1rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> 500<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #42b983 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 段落样式 */</span><span class="token selector">p</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.5rem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 分割线样式 */</span><span class="token selector">hr</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 20px 0<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 引用块样式 */</span><span class="token selector">blockquote</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> 5px solid #42b983<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 1rem 0.8rem 0.2rem 0.8rem<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #666<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>66<span class="token punctuation">,</span> 185<span class="token punctuation">,</span> 131<span class="token punctuation">,</span> .1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 代码块样式 */</span><span class="token selector">pre</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 2rem 1rem 1rem 1rem <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 0.35rem<span class="token punctuation">;</span>    <span class="token property">tab-size</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 代码块的伪类样式 */</span><span class="token selector">.code-area::after</span> <span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #ff5f56<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>    <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> 20px 0 #ffbd2e<span class="token punctuation">,</span> 40px 0 #27c93f<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 20px 0 #ffbd2e<span class="token punctuation">,</span> 40px 0 #27c93f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 行内代码样式 */</span><span class="token selector">code</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 1px 5px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 13px <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Inconsolata<span class="token punctuation">,</span> Monaco<span class="token punctuation">,</span> Consolas<span class="token punctuation">,</span> <span class="token string">'Courier New'</span><span class="token punctuation">,</span> Courier<span class="token punctuation">,</span> monospace<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 0.91rem<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #e96900<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #f8f8f8<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 代码复制按钮样式 */</span><span class="token selector">.code_copy</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0.7rem<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>50%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 代码复制提示样式 */</span><span class="token selector">.codecopy_notice</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0.7rem<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>50%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 代码语言提示样式 */</span><span class="token selector">.code_lang</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 46px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Consolas<span class="token punctuation">,</span> Monaco<span class="token punctuation">,</span> <span class="token string">'Andale Mono'</span><span class="token punctuation">,</span> <span class="token string">'Ubuntu Mono'</span><span class="token punctuation">,</span> monospace<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>50%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 代码展开/折叠按钮样式 */</span><span class="token selector">.code-expand</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>50%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 7px<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 999 <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all .3s<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 代码折叠状态下的展开按钮样式 */</span><span class="token selector">.code-closed .code-expand</span> <span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-180deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all .3s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 代码折叠状态下的样式 */</span><span class="token selector">.code-closed pre::before</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 代码块内部代码样式 */</span><span class="token selector">pre code</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #e8eaf6<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #272822<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="背景修改"><a href="#背景修改" class="headerlink" title="背景修改"></a>背景修改</h2><p>原代码</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #eaeaea<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #34495e<span class="token punctuation">;</span>    <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #eaeaea<span class="token punctuation">;</span><span class="token comment">/* 背景颜色 */</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>   <span class="token comment">/* 边距 */</span>    <span class="token property">color</span><span class="token punctuation">:</span> #34495e<span class="token punctuation">;</span>      <span class="token comment">/* 文字颜色 */</span>    <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token comment">/* background: linear-gradient(60deg, #3ab5b0 0%, #3d99be 31%, #56317a 100%); */</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>123deg<span class="token punctuation">,</span> #eec7ee 0%<span class="token punctuation">,</span> #90e2ea 50%<span class="token punctuation">,</span> #c1f7b3 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 渐变背景色 */</span>    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化后的代码主要在以下几个方面进行了改进：</p><ol><li><p>添加了注释，使代码更具可读性。</p></li><li><p><strong>渐变背景：</strong></p><ul><li>引入了渐变背景，通过<code>linear-gradient</code>属性创建一个颜色渐变效果，使页面背景更具视觉吸引力。</li><li>使用了更生动和搭配的颜色，增强了页面的整体美感。</li></ul></li><li><p><strong>背景附着和尺寸：</strong></p><ul><li>添加了<code>background-attachment: fixed;</code>属性，使背景固定在视口中，而不随页面滚动而滚动。</li><li>设置了<code>background-size: cover;</code>，确保背景图片始终覆盖整个视口，不会出现不完整或拉伸的情况。</li></ul></li></ol><h2 id="标题优化"><a href="#标题优化" class="headerlink" title="标题优化"></a>标题优化</h2><p>原标题只有一种颜色，在文章里没有区分度，所以决定对标签颜色进行修改。</p><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402051945970.png" alt="修改前"></p><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402051941232.png" alt="修改后"></p><p>原代码</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 48px 0 22px -5px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 2.0rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 2.0rem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h2</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 42px 0 18px -5px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.8rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.8rem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h3</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 38px 0 15px -4px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.6rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.7rem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h4</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 32px 0 12px -4px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.45rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.45rem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h5</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 28px 0 8px -4px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h6</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 22px 0 4px -4px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.1rem<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.1rem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化代码</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 标题1样式 */</span><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 48px 0 22px -5px<span class="token punctuation">;</span>       <span class="token comment">/* 上、下、左边距 */</span>    <span class="token comment">/*font-size: 2.0rem;*/</span>              <span class="token comment">/* 字体大小 */</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 2.2rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>              <span class="token comment">/* 字体粗细 */</span>    <span class="token comment">/*line-height: 2.0rem;*/</span>            <span class="token comment">/* 行高 */</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 2.2rem<span class="token punctuation">;</span>    <span class="token comment">/* color: #42b983 !important; */</span>    <span class="token property">color</span><span class="token punctuation">:</span> #7fbaf1 <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>             <span class="token comment">/* 新增居中样式 */</span><span class="token punctuation">&#125;</span><span class="token comment">/* 标题2样式 */</span><span class="token selector">h2</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 42px 0 18px -5px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.8rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.8rem<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #42b983 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 标题3样式 */</span><span class="token selector">h3</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 38px 0 15px -4px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.5rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.5rem<span class="token punctuation">;</span>    <span class="token comment">/* color: #42b983 !important; */</span>    <span class="token property">color</span><span class="token punctuation">:</span> #9b59b6 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 标题4样式 */</span><span class="token selector">h4</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 32px 0 12px -4px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.4rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.4rem<span class="token punctuation">;</span>    <span class="token comment">/* color: #42b983 !important; */</span>    <span class="token property">color</span><span class="token punctuation">:</span> #ff5733 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 标题5样式 */</span><span class="token selector">h5</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 28px 0 8px -4px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span>    <span class="token comment">/* color: #42b983 !important; */</span>    <span class="token property">color</span><span class="token punctuation">:</span> #9b59b6 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 标题6样式 */</span><span class="token selector">h6</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 22px 0 4px -4px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.1rem<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.1rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> 500<span class="token punctuation">;</span>    <span class="token comment">/* color: #b94252 !important; */</span>    <span class="token property">color</span><span class="token punctuation">:</span> #e74c3c <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改说明：</p><ol><li><p>修改了字体大小和行高，使标题间更具区分度</p></li><li><p>修改自定义颜色，使每级标题具有不同的颜色，扩大区分度。博主不是很懂颜色搭配，如果有其他更舒适的颜色配置可以在下面留言框留言(⊙o⊙)哦</p></li><li><p>新增标题居中：<code>text-align: center;</code><br>这里我只设置了二级标题居中，有需要的可以自行设置其他居中，这里我给出所有标题居中的设置：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1, h2, h3, h4, h5, h6</span> <span class="token punctuation">&#123;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果只是设置某一级标题居中，可以只在该级标题中插入<code>text-align: center;</code></p></li></ol><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>分割线样式代码在这，伙伴们可以自行修改：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 分割线样式 */</span><span class="token selector">hr</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 20px 0<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我对分割线没做修改，只是在二级标题下添加了分割线，毕竟没有分割线的样式看着真实难受：</p><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402051926475.png" alt="无分割线"></p><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402051928326.png" alt="有分割线"></p><p>不知道兄弟们觉得哪个更好看，不过我觉得还是有分割线更有条理一些。萝卜白菜各有所爱嘛O(∩_∩)O~</p><p>要在标题下添加分割线只需添加以下代码：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1::after,h2::after,h3::after,h4::after,h5::after,h6::after</span> <span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span> <span class="token comment">/* 分割线的颜色 */</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>    <span class="token comment">/* 调整分割线与标题之间的垂直间距 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是给所有标题下都添加分割线，博主觉得给所有标题添加并不美观，所以只给二级标题下添加了。</p><h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p>原代码</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">blockquote</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> 5px solid #42b983<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 1rem 0.8rem 0.2rem 0.8rem<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #666<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>66<span class="token punctuation">,</span> 185<span class="token punctuation">,</span> 131<span class="token punctuation">,</span> .1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402051954660.png" alt="修改前"></p><p>原来的样式是尖角，同时我感觉边距不是很合适，所以修改了这两处样式：</p><ul><li>修改边距</li><li>边框改为圆角</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 引用块样式 */</span><span class="token selector">blockquote</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> 5px solid #42b983<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0.5rem 0.8rem 0.3rem 0.8rem<span class="token punctuation">;</span>   <span class="token comment">/* 上、右、下、左边距 */</span>    <span class="token property">color</span><span class="token punctuation">:</span> #666<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>66<span class="token punctuation">,</span> 185<span class="token punctuation">,</span> 131<span class="token punctuation">,</span> .1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px 10px 10px 5px<span class="token punctuation">;</span>   <span class="token comment">/*添加圆角*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402052035722.png" alt="修改后"></p><h2 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">code</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 1px 5px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 13px <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Inconsolata<span class="token punctuation">,</span> Monaco<span class="token punctuation">,</span> Consolas<span class="token punctuation">,</span> <span class="token string">'Courier New'</span><span class="token punctuation">,</span> Courier<span class="token punctuation">,</span> monospace<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 0.91rem<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #e96900<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #f8f8f8<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402052042846.png" alt="修改前"></p><p>原格式看起来不够清晰，所以我修改了一下颜色，这样看起来更清晰。</p><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402052048298.png" alt="优化后"></p><p>优化代码如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 行内代码样式优化 */</span><span class="token selector">code</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 1px 5px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 13px <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Inconsolata<span class="token punctuation">,</span> Monaco<span class="token punctuation">,</span> Consolas<span class="token punctuation">,</span> <span class="token string">'Courier New'</span><span class="token punctuation">,</span> Courier<span class="token punctuation">,</span> monospace<span class="token punctuation">;</span>    <span class="token property">word-break</span><span class="token punctuation">:</span> break-word<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 2.1rem<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> .2rem .6rem<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #E66161<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #FF6A6A22<span class="token punctuation">;</span>    <span class="token comment">/* F12 查看css确实好用 */</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选中"><a href="#选中" class="headerlink" title="选中"></a>选中</h2><p>默认的选中是深蓝色背景，白色字体（几乎所有网站的默认样式），博主觉得有些审美疲劳了，为了和博客的底色更搭，所以我决定修改一下选中样式。</p><p>只需在博客的主要css文件中添加以下代码即可（matery主题是<code>matery.css</code>）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">::selection</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #97e262<span class="token punctuation">;</span>  <span class="token comment">/* 设置选中文本的背景色 */</span>    <span class="token property">color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span><span class="token comment">/* 设置选中文本的文本颜色 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402052229232.png" alt="选中效果"></p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol><li><p><code>padding-bottom: 10px;</code> 表示在元素的底部（下边缘）设置内边距，即在元素的内容区域和其边框之间添加额外的空间，高度为 10 像素。具体而言，如果你有一个元素，并且为它应用了 <code>padding-bottom: 10px;</code>，那么元素的底部将有 10 像素的空白区域。这可以用来调整元素内部内容和边框之间的距离，或者在布局中为元素留出一些空间。</p></li><li><p><code>border-radius: 5px 10px 10px 5px;</code> 是 CSS 中设置圆角边框的属性，它定义了四个圆角的半径。</p><p>具体来说，这个属性值的含义是按照顺时针方向，分别对应左上、右上、右下、左下四个角的半径。在这个例子中：</p><ul><li>左上角：5px</li><li>右上角：10px</li><li>右下角：10px</li><li>左下角：5px</li></ul><p>这样设置的效果是，元素的左上角和左下角的圆角半径为 5px，而右上角和右下角的圆角半径为 10px。这种方式允许你为每个角指定不同的圆角半径，以创建各种不同形状的圆角。</p></li><li><p>这段代码是为元素添加阴影效果的 CSS 样式。在这里，使用了两个属性 <code>-webkit-box-shadow</code> 和 <code>box-shadow</code>，分别是针对 WebKit 浏览器和其他浏览器的标准。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> 20px 0 #ffbd2e<span class="token punctuation">,</span> 40px 0 #27c93f<span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> 20px 0 #ffbd2e<span class="token punctuation">,</span> 40px 0 #27c93f<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解析：</p><ul><li><code>-webkit-box-shadow</code> 是 WebKit 浏览器专有的属性，用于设置元素的阴影效果。</li><li><code>box-shadow</code> 是标准 CSS 属性，支持大多数现代浏览器，也用于设置元素的阴影效果。</li></ul><p>两者都接受多个参数，其中：</p><ul><li><code>20px 0 #ffbd2e</code> 表示第一个阴影，水平偏移为 20px，垂直偏移为 0，颜色为 #ffbd2e。</li><li><code>40px 0 #27c93f</code> 表示第二个阴影，水平偏移为 40px，垂直偏移为 0，颜色为 #27c93f。</li></ul><p>这样的设置会在元素的右侧产生两个阴影，一个偏移 20px，另一个偏移 40px，分别用不同的颜色表示。这种效果常用于制作立体感，使元素看起来有立体的投影。</p></li><li><p>这段代码使用了 <code>-webkit-filter</code> 属性，该属性用于对元素应用图像滤镜效果。在这里使用了 <code>invert(50%)</code>，表示将元素中的颜色反转（即反相）一半。</p><p>解析：</p><ul><li><code>-webkit-filter</code> 是 WebKit 浏览器专有的属性，用于应用图像滤镜效果。</li><li><code>invert(50%)</code> 是滤镜效果中的一种，它将元素的颜色反转。括号中的参数 <code>50%</code> 表示反转一半的颜色，即使得元素呈现一种半反转的效果。</li></ul><p>具体效果是将元素的亮度和颜色反转一半，使得原本的颜色变得更浅或更深，以达到反转效果。这样的滤镜效果常用于调整图像颜色，或者在特定场景下实现视觉效果的需求。需要注意的是，滤镜效果的兼容性可能因浏览器而异，所以在使用时应该谨慎考虑浏览器的支持情况。</p></li><li><p>这段代码是用于禁止用户选择（文本选中）的 CSS 样式。不同浏览器厂商采用不同的前缀来支持这一功能，因此提供了对 WebKit（Chrome、Safari）、Mozilla（Firefox）、Microsoft（Internet Explorer、Edge）浏览器以及标准规范的支持。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">-ms-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">user-select</span><span class="token punctuation">:</span> none<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解析：</p><ul><li><code>-webkit-user-select: none;</code>: WebKit 浏览器（例如 Chrome 和 Safari）的私有属性，用于禁止用户选择文本。</li><li><code>-moz-user-select: none;</code>: Mozilla 浏览器（例如 Firefox）的私有属性，同样用于禁止用户选择文本。</li><li><code>-ms-user-select: none;</code>: Microsoft 浏览器（例如 Internet Explorer 和 Edge）的私有属性，同样用于禁止用户选择文本。</li><li><code>user-select: none;</code>: 标准 CSS 属性，用于禁止用户选择文本。</li></ul><p>这样设置后，页面中的文本内容将无法被用户选中。这在一些特定的应用场景中可能会用到，例如避免用户复制网站上的内容，或者在实现一些特殊效果时禁止文本选择。需要注意的是，这种设置可能会影响用户体验，因此在使用时应根据具体情况进行权衡。</p></li><li><p>这段代码是使用 <code>-webkit-transition</code> 属性为元素的所有属性（<code>all</code>）设置过渡效果。过渡效果用于在元素属性发生变化时，使变化更加平滑和渐变。</p><p>解析：</p><ul><li><code>-webkit-transition: all .3s;</code>: WebKit 浏览器（例如 Chrome 和 Safari）的私有属性，用于指定元素的过渡效果。<ul><li><code>all</code>: 表示对所有属性都应用过渡效果。</li><li><code>.3s</code>: 表示过渡的持续时间为 0.3 秒。这个值可以根据实际需要进行调整，决定了过渡效果的时长。</li></ul></li></ul><p>这样的设置将在元素属性发生变化时（例如颜色、尺寸、位置等），以 0.3 秒的时间内过渡到新的状态，使变化更加平滑。过渡效果是一种改善用户体验的手段，可以使页面中的元素变化显得更加流畅和自然。</p><p>需要注意的是，虽然上述代码使用了 WebKit 浏览器的私有属性，但通常为了兼容性，你可能还需要添加标准的过渡属性，例如 <code>transition: all .3s;</code>。这样可以确保在其他浏览器中也能正常使用过渡效果。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>右键菜单</title>
      <link href="/posts/92dc.html"/>
      <url>/posts/92dc.html</url>
      
        <content type="html"><![CDATA[<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.meta-code.top/2022/06/12/2022-68/">【Hexo博客】魔改美化 Butterfly 主题右键菜单 | 百里飞洋 (meta-code.top)</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 右键菜单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面特效</title>
      <link href="/posts/2506.html"/>
      <url>/posts/2506.html</url>
      
        <content type="html"><![CDATA[<h1 id="页面特效"><a href="#页面特效" class="headerlink" title="页面特效"></a>页面特效</h1><h2 id="动态线条"><a href="#动态线条" class="headerlink" title="动态线条"></a>动态线条</h2><p>在<code>themes/matery/layout/layout.ejs</code>文件中添加：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token comment">&lt;!--动态线条背景--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>122 103 238<span class="token punctuation">"</span></span> <span class="token attr-name">opacity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>0.7<span class="token punctuation">'</span></span> <span class="token attr-name">zIndex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-2<span class="token punctuation">"</span></span> <span class="token attr-name">count</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li>color：线条颜色，三个数字分别为(R,G,B)，默认：（0,0,0）</li><li>opacity：线条透明度（0~1），默认：0.5</li><li>count：线条的总数量，默认：150</li><li>zIndex：背景图层所在的位置，默认：-1</li></ul><blockquote><p>参考：<a href="https://crazyyuchi.github.io/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/#toc-heading-28">博客搭建+美化（巨细版本） | 兴平 (crazyyuchi.github.io)</a></p></blockquote><h2 id="樱花特效"><a href="#樱花特效" class="headerlink" title="樱花特效"></a>樱花特效</h2><p>在<code>themes/matery/source/js</code>下新建sakura.js，打开这个网址<a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/js/sakura.js">连接</a>，将内容复制粘贴到sakura.js即可。</p><p>然后在themes&#x2F;matery&#x2F;layout&#x2F;layout.ejs文件内添加下面的内容：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//只在桌面版网页启用特效</span>    <span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;script type="text/javascript" src="/js/sakura.js">&lt;\/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考：<a href="https://crazyyuchi.github.io/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/#toc-heading-28">博客搭建+美化（巨细版本） | 兴平 (crazyyuchi.github.io)</a></p></blockquote><h2 id="雪花特效"><a href="#雪花特效" class="headerlink" title="雪花特效"></a>雪花特效</h2><p>在<code>themes/matery/source/libs/others</code>下新建文件<code>snow.js</code>，并插入如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*样式一*/</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">snow</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> $flake <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;div id="snowbox" />'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">'position'</span><span class="token operator">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span><span class="token string-property property">'z-index'</span><span class="token operator">:</span><span class="token string">'9999'</span><span class="token punctuation">,</span> <span class="token string-property property">'top'</span><span class="token operator">:</span> <span class="token string">'-50px'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&amp;#10052;'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    documentHeight  <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    documentWidth   <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    defaults <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">minSize</span>     <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token literal-property property">maxSize</span>     <span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token literal-property property">newOn</span>       <span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>        <span class="token literal-property property">flakeColor</span>  <span class="token operator">:</span> <span class="token string">"#AFDAEF"</span> <span class="token comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    options <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> defaults<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> interval<span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> startPositionLeft <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> documentWidth <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">,</span>    startOpacity <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    sizeFlake <span class="token operator">=</span> options<span class="token punctuation">.</span>minSize <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> options<span class="token punctuation">.</span>maxSize<span class="token punctuation">,</span>    endPositionTop <span class="token operator">=</span> documentHeight <span class="token operator">-</span> <span class="token number">200</span><span class="token punctuation">,</span>    endPositionLeft <span class="token operator">=</span> startPositionLeft <span class="token operator">-</span> <span class="token number">500</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">,</span>    durationFall <span class="token operator">=</span> documentHeight <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5000</span><span class="token punctuation">;</span>    $flake<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">left</span><span class="token operator">:</span> startPositionLeft<span class="token punctuation">,</span>        <span class="token literal-property property">opacity</span><span class="token operator">:</span> startOpacity<span class="token punctuation">,</span>        <span class="token string-property property">'font-size'</span><span class="token operator">:</span> sizeFlake<span class="token punctuation">,</span>        <span class="token literal-property property">color</span><span class="token operator">:</span> options<span class="token punctuation">.</span>flakeColor    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">top</span><span class="token operator">:</span> endPositionTop<span class="token punctuation">,</span>        <span class="token literal-property property">left</span><span class="token operator">:</span> endPositionLeft<span class="token punctuation">,</span>        <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">0.2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>durationFall<span class="token punctuation">,</span><span class="token string">'linear'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>newOn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">snow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>         <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">/* 定义雪花最小尺寸 */</span>        <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span><span class="token comment">/* 定义雪花最大尺寸 */</span>        <span class="token literal-property property">newOn</span><span class="token operator">:</span> <span class="token number">300</span>  <span class="token comment">/* 定义密集程度，数字越小越密集 */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*样式二*/</span><span class="token comment">/* 控制下雪 */</span><span class="token keyword">function</span> <span class="token function">snowFall</span><span class="token punctuation">(</span><span class="token parameter">snow</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 可配置属性 */</span>    snow <span class="token operator">=</span> snow <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>maxFlake <span class="token operator">=</span> snow<span class="token punctuation">.</span>maxFlake <span class="token operator">||</span> <span class="token number">200</span><span class="token punctuation">;</span>   <span class="token comment">/* 最多片数 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>flakeSize <span class="token operator">=</span> snow<span class="token punctuation">.</span>flakeSize <span class="token operator">||</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">/* 雪花形状 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fallSpeed <span class="token operator">=</span> snow<span class="token punctuation">.</span>fallSpeed <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">/* 坠落速度 */</span><span class="token punctuation">&#125;</span><span class="token comment">/* 兼容写法 */</span>requestAnimationFrame <span class="token operator">=</span> window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span>    window<span class="token punctuation">.</span>mozRequestAnimationFrame <span class="token operator">||</span>    window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span>    window<span class="token punctuation">.</span>msRequestAnimationFrame <span class="token operator">||</span>    window<span class="token punctuation">.</span>oRequestAnimationFrame <span class="token operator">||</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>cancelAnimationFrame <span class="token operator">=</span> window<span class="token punctuation">.</span>cancelAnimationFrame <span class="token operator">||</span>    window<span class="token punctuation">.</span>mozCancelAnimationFrame <span class="token operator">||</span>    window<span class="token punctuation">.</span>webkitCancelAnimationFrame <span class="token operator">||</span>    window<span class="token punctuation">.</span>msCancelAnimationFrame <span class="token operator">||</span>    window<span class="token punctuation">.</span>oCancelAnimationFrame<span class="token punctuation">;</span><span class="token comment">/* 开始下雪 */</span>snowFall<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">start</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* 创建画布 */</span>    <span class="token function">snowCanvas</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 创建雪花形状 */</span>    <span class="token function">createFlakes</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 画雪 */</span>    <span class="token function">drawSnow</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/* 创建画布 */</span><span class="token keyword">function</span> <span class="token function">snowCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 添加Dom结点 */</span>    <span class="token keyword">var</span> snowcanvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    snowcanvas<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"snowfall"</span><span class="token punctuation">;</span>    snowcanvas<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>    snowcanvas<span class="token punctuation">.</span>height <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>    snowcanvas<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">,</span> <span class="token string">"position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>snowcanvas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>canvas <span class="token operator">=</span> snowcanvas<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx <span class="token operator">=</span> snowcanvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 窗口大小改变的处理 */</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        snowcanvas<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>        <span class="token comment">/* snowcanvas.height = window.innerHeight */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 雪运动对象 */</span><span class="token keyword">function</span> <span class="token function">flakeMove</span><span class="token punctuation">(</span><span class="token parameter">canvasWidth<span class="token punctuation">,</span> canvasHeight<span class="token punctuation">,</span> flakeSize<span class="token punctuation">,</span> fallSpeed</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> canvasWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* x坐标 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> canvasHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* y坐标 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> flakeSize <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token comment">/* 形状 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> flakeSize<span class="token punctuation">;</span>                           <span class="token comment">/* 最大形状 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> fallSpeed<span class="token punctuation">;</span>         <span class="token comment">/* 坠落速度 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fallSpeed <span class="token operator">=</span> fallSpeed<span class="token punctuation">;</span>                         <span class="token comment">/* 坠落速度 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velY <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">;</span>                             <span class="token comment">/* Y方向速度 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                      <span class="token comment">/* X方向速度 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stepSize <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">;</span>                 <span class="token comment">/* 步长 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>step <span class="token operator">=</span> <span class="token number">0</span>                                       <span class="token comment">/* 步数 */</span><span class="token punctuation">&#125;</span>flakeMove<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>        y <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token comment">/* 左右摆动(余弦) */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velX <span class="token operator">*=</span> <span class="token number">0.98</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>velY <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>velY <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velX <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>step <span class="token operator">+=</span> <span class="token number">.05</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stepSize<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>velY<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>velX<span class="token punctuation">;</span>    <span class="token comment">/* 飞出边界的处理 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">>=</span> canvas<span class="token punctuation">.</span>width <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">>=</span> canvas<span class="token punctuation">.</span>height <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/* 飞出边界-放置最顶端继续坠落 */</span>flakeMove<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">width<span class="token punctuation">,</span> height</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fallSpeed<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velY <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span>flakeMove<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> snowFlake <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createRadialGradient</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    snowFlake<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"rgba(255, 255, 255, 0.9)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 此处是雪花颜色，默认是白色 */</span>    snowFlake<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token string">"rgba(255, 255, 255, 0.5)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 若要改为其他颜色，请自行查 */</span>    snowFlake<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"rgba(255, 255, 255, 0)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 找16进制的RGB 颜色代码。 */</span>    ctx<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> snowFlake<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/* 创建雪花-定义形状 */</span><span class="token keyword">function</span> <span class="token function">createFlakes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> maxFlake <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxFlake<span class="token punctuation">,</span>        flakes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flakes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        canvas <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxFlake<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        flakes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">flakeMove</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flakeSize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fallSpeed<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 画雪 */</span><span class="token keyword">function</span> <span class="token function">drawSnow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> maxFlake <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxFlake<span class="token punctuation">,</span>        flakes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flakes<span class="token punctuation">;</span>    ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">,</span> canvas <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">,</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment">/* 清空雪花 */</span>    ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> e <span class="token operator">&lt;</span> maxFlake<span class="token punctuation">;</span> e<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        flakes<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flakes<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*  一帧一帧的画 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loop <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">drawSnow</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 调用及控制方法 */</span><span class="token keyword">var</span> snow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">snowFall</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">maxFlake</span><span class="token operator">:</span><span class="token number">60</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>snow<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>themes/matery/layout/layout.ejs</code>里添加：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token comment">&lt;!-- 雪花特效 --></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>snow<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>js<span class="token punctuation">.</span>snow </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在主题配置文件里<code>libs.js</code>里添加一行</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">snow</span><span class="token punctuation">:</span> /libs/others/snow.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后在主题配置文件最后添加：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 雪花特效</span><span class="token key atrule">snow</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>参考：<a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-20">超详细Hexo+Github博客搭建小白教程 | 韦阳的博客 (godweiyang.com)</a></p></blockquote><h2 id="鼠标特效"><a href="#鼠标特效" class="headerlink" title="鼠标特效"></a>鼠标特效</h2><h3 id="点击显示文字"><a href="#点击显示文字" class="headerlink" title="点击显示文字"></a>点击显示文字</h3><p>在 <code>themes\matery\source\js</code> 下新建 <code>click_show_text.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span>        <span class="token punctuation">(</span><span class="token string">"富强"</span><span class="token punctuation">,</span> <span class="token string">"民主"</span><span class="token punctuation">,</span> <span class="token string">"文明"</span><span class="token punctuation">,</span> <span class="token string">"和谐"</span><span class="token punctuation">,</span> <span class="token string">"自由"</span><span class="token punctuation">,</span> <span class="token string">"平等"</span><span class="token punctuation">,</span> <span class="token string">"公正"</span><span class="token punctuation">,</span> <span class="token string">"法治"</span><span class="token punctuation">,</span> <span class="token string">"爱国"</span><span class="token punctuation">,</span> <span class="token string">"敬业"</span><span class="token punctuation">,</span> <span class="token string">"诚信"</span><span class="token punctuation">,</span> <span class="token string">"友善"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> $i <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span/>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>a_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a_idx <span class="token operator">=</span> <span class="token punctuation">(</span>a_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span>        y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>        $i<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string-property property">"z-index"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            <span class="token string-property property">"top"</span><span class="token operator">:</span> y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token string-property property">"left"</span><span class="token operator">:</span> x<span class="token punctuation">,</span>            <span class="token string-property property">"position"</span><span class="token operator">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>            <span class="token string-property property">"font-weight"</span><span class="token operator">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>            <span class="token string-property property">"color"</span><span class="token operator">:</span> <span class="token string">"rgb("</span> <span class="token operator">+</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$i<span class="token punctuation">)</span><span class="token punctuation">;</span>        $i<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string-property property">"top"</span><span class="token operator">:</span> y <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">,</span>            <span class="token string-property property">"opacity"</span><span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token number">3000</span><span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       $i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">'delay()'</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".buryit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>themes\matery\layout\layout.ejs</code> 的 <code>body</code> 标签里引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>单击显示文字<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/click_show_text.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>参考：<a href="https://yunfulin.gitee.io/blog/no-013.html#toc-heading-5">Matery主题优化（一） | YF小林犟 (gitee.io)</a></p></blockquote><h3 id="礼花特效"><a href="#礼花特效" class="headerlink" title="礼花特效"></a>礼花特效</h3><p>在主题文件 <code>themes\hexo-theme-matery\source\js</code> 下新建 <code>mouse_snow.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">,</span>      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"touchmove"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"touchstart"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      d <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>      window<span class="token punctuation">.</span>innerHeight  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>touches<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>touches<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>              <span class="token function">s</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>touches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> t<span class="token punctuation">.</span>touches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>clientY<span class="token punctuation">,</span> r<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">o</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      u<span class="token punctuation">.</span>x <span class="token operator">=</span> t<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>      u<span class="token punctuation">.</span>y <span class="token operator">=</span> t<span class="token punctuation">.</span>clientY<span class="token punctuation">,</span>      <span class="token function">s</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>x<span class="token punctuation">,</span> u<span class="token punctuation">.</span>y<span class="token punctuation">,</span> r<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">l</span><span class="token punctuation">;</span>      e<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span>      f<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> f<span class="token punctuation">.</span>length<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span>          f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> f<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> t <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> t<span class="token operator">--</span><span class="token punctuation">)</span>          f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>lifeSpan <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          f<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">l</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>character <span class="token operator">=</span> <span class="token string">"*"</span><span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>lifeSpan <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>initialStyles <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"fixed"</span><span class="token punctuation">,</span>          <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>          <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">"block"</span><span class="token punctuation">,</span>          <span class="token literal-property property">pointerEvents</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>          <span class="token string-property property">"z-index"</span><span class="token operator">:</span> <span class="token string">"10000000"</span><span class="token punctuation">,</span>          <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">"20px"</span><span class="token punctuation">,</span>          <span class="token string-property property">"will-change"</span><span class="token operator">:</span> <span class="token string">"transform"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">.5</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">1</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">x</span><span class="token operator">:</span> t <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span>              <span class="token literal-property property">y</span><span class="token operator">:</span> i <span class="token operator">-</span> <span class="token number">20</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>initialStyles<span class="token punctuation">.</span>color <span class="token operator">=</span> n<span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>character<span class="token punctuation">,</span>          <span class="token function">c</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initialStyles<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x<span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y<span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>lifeSpan<span class="token operator">--</span><span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">"translate3d("</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">"px,"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">"px,0) scale("</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lifeSpan <span class="token operator">/</span> <span class="token number">120</span> <span class="token operator">+</span> <span class="token string">")"</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">die</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token keyword">in</span> i<span class="token punctuation">)</span>          t<span class="token punctuation">.</span>style<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">[</span>n<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"#D61C59"</span><span class="token punctuation">,</span> <span class="token string">"#E7D84B"</span><span class="token punctuation">,</span> <span class="token string">"#1B8798"</span><span class="token punctuation">]</span>    <span class="token punctuation">,</span> d <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth    <span class="token punctuation">,</span> u <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>      <span class="token literal-property property">x</span><span class="token operator">:</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token literal-property property">y</span><span class="token operator">:</span> d <span class="token operator">/</span> <span class="token number">2</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>themes\matery\layout\layout.ejs</code> 的 <code>body</code> 标签里面 引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 鼠标移动特效 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/mouse_snow.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>参考：<a href="https://yunfulin.gitee.io/blog/no-013.html#toc-heading-5">Matery主题优化（一） | YF小林犟 (gitee.io)</a></p></blockquote><h3 id="点击爆炸"><a href="#点击爆炸" class="headerlink" title="点击爆炸"></a>点击爆炸</h3><p>在<code>themes/matery/source/js</code>下新建fireworks.js，打开这个网址<a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/js/fireworks.js">连接</a>，将内容复制粘贴到fireworks.js即可。</p><p>然后再到themes&#x2F;matery&#x2F;layout&#x2F;layout.ejs中添加：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fireworks<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//cdn.bootcss.com/animejs/2.2.0/anime.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/fireworks.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后hexo clean &amp;&amp; hexo g &amp;&amp; hexo s即可进行本地预览，就可以查看效果了。</p><blockquote><p>参考：<a href="https://crazyyuchi.github.io/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/#toc-heading-28">博客搭建+美化（巨细版本） | 兴平 (crazyyuchi.github.io)</a></p></blockquote><h3 id="浮出爱心"><a href="#浮出爱心" class="headerlink" title="浮出爱心"></a>浮出爱心</h3><p>在<code>themes/matery/source/libs/others</code>下新建文件<code>click_love.js</code>，并插入如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>e<span class="token operator">&lt;</span>n<span class="token punctuation">.</span>length<span class="token punctuation">;</span>e<span class="token operator">++</span><span class="token punctuation">)</span>            n<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">?</span>                <span class="token punctuation">(</span>t<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>                <span class="token punctuation">(</span>n<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">--</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>scale<span class="token operator">+=</span><span class="token number">.004</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha<span class="token operator">-=</span><span class="token number">.013</span><span class="token punctuation">,</span>                 n<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText<span class="token operator">=</span><span class="token string">"left:"</span><span class="token operator">+</span>n<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">+</span><span class="token string">"px;top:"</span><span class="token operator">+</span>n<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">+</span><span class="token string">"px;opacity:"</span><span class="token operator">+</span>n<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha<span class="token operator">+</span><span class="token string">";transform:scale("</span><span class="token operator">+</span>n<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>scale<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>n<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>scale<span class="token operator">+</span><span class="token string">") rotate(45deg);background:"</span><span class="token operator">+</span>n<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>color<span class="token operator">+</span><span class="token string">";z-index:99999"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span>requestAnimationFrame<span class="token operator">=</span>e<span class="token punctuation">.</span>requestAnimationFrame<span class="token operator">||</span>e<span class="token punctuation">.</span>webkitRequestAnimationFrame<span class="token operator">||</span>e<span class="token punctuation">.</span>mozRequestAnimationFrame<span class="token operator">||</span>e<span class="token punctuation">.</span>oRequestAnimationFrame<span class="token operator">||</span>e<span class="token punctuation">.</span>msRequestAnimationFrame<span class="token operator">||</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">1e3</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> a<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            a<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a<span class="token punctuation">.</span>styleSheet<span class="token punctuation">.</span>cssText<span class="token operator">=</span>e        <span class="token punctuation">&#125;</span>        t<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token punctuation">.</span>onclick<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>onclick<span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a<span class="token operator">&amp;&amp;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> a<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                a<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">"heart"</span><span class="token punctuation">,</span>                n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span>a<span class="token punctuation">,</span><span class="token literal-property property">x</span><span class="token operator">:</span>e<span class="token punctuation">.</span>clientX<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span>e<span class="token punctuation">.</span>clientY<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token literal-property property">scale</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">alpha</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">"rgb("</span><span class="token operator">+</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                t<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>themes/matery/layout/layout.ejs</code>里添加：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token comment">&lt;!--  --></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>clicklove<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>js<span class="token punctuation">.</span>clicklove<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>async<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在主题配置文件里<code>libs.js</code>里添加一行</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">snow</span><span class="token punctuation">:</span> /libs/others/click_love.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后在主题配置文件最后添加：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 点击页面浮出'爱心'效果</span><span class="token key atrule">clicklove</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="动态标签栏"><a href="#动态标签栏" class="headerlink" title="动态标签栏"></a>动态标签栏</h2><p>在文件 <code>themes\matery\layout\layout.ejs</code> 的 <code>body</code> 标签里添加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 动态标签栏 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  <span class="token keyword">var</span> OriginTitile <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">,</span> st<span class="token punctuation">;</span>   document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"爱我，别走！"</span><span class="token punctuation">,</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"咦，你来啦！"</span><span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitile <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://yunfulin.gitee.io/blog/no-013.html#toc-heading-5">Matery主题优化（一） | YF小林犟 (gitee.io)</a></p></blockquote><h2 id="冒泡特效"><a href="#冒泡特效" class="headerlink" title="冒泡特效"></a>冒泡特效</h2><p>在 <code>themes&gt;matery&gt;source&gt;libs&gt;others</code>下新建一个文件 bubble.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 首页轮播冒泡</span><span class="token keyword">function</span> <span class="token function">bubble</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.carousel-item, .pd-header'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">circleMagic</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">radius</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token literal-property property">density</span><span class="token operator">:</span> <span class="token number">.2</span><span class="token punctuation">,</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'rgba(255,255,255,.4)'</span><span class="token punctuation">,</span>    <span class="token literal-property property">clearOffset</span><span class="token operator">:</span> <span class="token number">0.99</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">!</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  p<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">circleMagic</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> o<span class="token punctuation">,</span> a<span class="token punctuation">,</span> n<span class="token punctuation">,</span> r<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>      i <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      d <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"rgba(255,0,0,.5)"</span><span class="token punctuation">,</span>        <span class="token literal-property property">radius</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token literal-property property">density</span><span class="token operator">:</span> <span class="token number">.3</span><span class="token punctuation">,</span>        <span class="token literal-property property">clearOffset</span><span class="token operator">:</span> <span class="token number">.2</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span>      l <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">c</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">></span> a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">s</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      o <span class="token operator">=</span> l<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span> a <span class="token operator">=</span> l<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span> l<span class="token punctuation">.</span>height <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>width <span class="token operator">=</span> o<span class="token punctuation">,</span> n<span class="token punctuation">.</span>height <span class="token operator">=</span> a    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">h</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> t <span class="token keyword">in</span> r<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> o<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> i<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">f</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">e</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        t<span class="token punctuation">.</span>pos<span class="token punctuation">.</span>x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> o<span class="token punctuation">,</span> t<span class="token punctuation">.</span>pos<span class="token punctuation">.</span>y <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">.1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> d<span class="token punctuation">.</span>clearOffset<span class="token punctuation">,</span>          t<span class="token punctuation">.</span>scale <span class="token operator">=</span> <span class="token number">.1</span> <span class="token operator">+</span> <span class="token number">.3</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>speed <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"random"</span> <span class="token operator">===</span> d<span class="token punctuation">.</span>color <span class="token operator">?</span> t<span class="token punctuation">.</span>color <span class="token operator">=</span>            <span class="token string">"rgba("</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>              <span class="token number">0</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span> <span class="token operator">:</span> t<span class="token punctuation">.</span>color <span class="token operator">=</span> d<span class="token punctuation">.</span>color      <span class="token punctuation">&#125;</span>      t<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        t<span class="token punctuation">.</span>alpha <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>pos<span class="token punctuation">.</span>y <span class="token operator">-=</span> t<span class="token punctuation">.</span>speed<span class="token punctuation">,</span> t<span class="token punctuation">.</span>alpha <span class="token operator">-=</span> <span class="token number">5e-4</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>pos<span class="token punctuation">.</span>x<span class="token punctuation">,</span> t<span class="token punctuation">.</span>pos<span class="token punctuation">.</span>y<span class="token punctuation">,</span>          t<span class="token punctuation">.</span>scale <span class="token operator">*</span> d<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> t<span class="token punctuation">.</span>color<span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token operator">!</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      o <span class="token operator">=</span> l<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">,</span> a <span class="token operator">=</span> l<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">,</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> t <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          t<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"canvas"</span><span class="token punctuation">;</span>          t<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          t<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span>          t<span class="token punctuation">.</span>style<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token number">0</span>          t<span class="token punctuation">.</span>style<span class="token punctuation">.</span>zIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          t<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"absolute"</span><span class="token punctuation">;</span>          l<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>          t<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token string">"hidden"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width <span class="token operator">=</span> o<span class="token punctuation">,</span> n<span class="token punctuation">.</span>height <span class="token operator">=</span> a<span class="token punctuation">,</span> r <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> o <span class="token operator">*</span> d<span class="token punctuation">.</span>density<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">f</span><span class="token punctuation">;</span>        i<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"scroll"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bubble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主题的配置文件 <code>themes\hexo-theme-matery\_config.yml</code> 找到 <code>libs:</code> 然后在 js 下引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">bubble</span><span class="token operator">:</span> <span class="token operator">/</span>libs<span class="token operator">/</span>others<span class="token operator">/</span>bubble<span class="token punctuation">.</span>js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在主题的配置文件 <code>themes\hexo-theme-matery\_config.yml</code> 的底部，添加下面代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"># 首页轮播冒泡<span class="token literal-property property">bubble</span><span class="token operator">:</span>  <span class="token literal-property property">enable</span><span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在文件 <code>themes\hexo-theme-matery\layout\layout.ejs</code> 的 <code>body</code> 标签里面 引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 白色冒泡 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>bubble<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %>&lt;%- url_for(theme.libs.js.bubble) %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考：<a href="https://yunfulin.gitee.io/blog/no-013.html#toc-heading-1">Matery主题优化（一） | YF小林犟 (gitee.io)</a></p></blockquote><h2 id="打字特效"><a href="#打字特效" class="headerlink" title="打字特效"></a>打字特效</h2><p>首先在<code>themes\matery\source\js</code>下新建<code>activate-power-mode.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">webpackUniversalModuleDefinition</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> exports<span class="token punctuation">[</span><span class="token string">"POWERMODE"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> root<span class="token punctuation">[</span><span class="token string">"POWERMODE"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> installedModules <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">.</span>exports<span class="token punctuation">;</span>            <span class="token keyword">var</span> module <span class="token operator">=</span> installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> moduleId<span class="token punctuation">,</span> <span class="token literal-property property">loaded</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span><span class="token punctuation">;</span>            module<span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        __webpack_require__<span class="token punctuation">.</span>m <span class="token operator">=</span> modules<span class="token punctuation">;</span>        __webpack_require__<span class="token punctuation">.</span>c <span class="token operator">=</span> installedModules<span class="token punctuation">;</span>        __webpack_require__<span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token string">'use strict'</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">'position: fixed; top: 0; left: 0; pointer-events: none; z-index: 0'</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>            canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> particles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> particlePointer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token constant">POWERMODE</span><span class="token punctuation">.</span>shake <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">POWERMODE</span><span class="token punctuation">.</span>colorful<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> u <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">'hsla('</span> <span class="token operator">+</span> <span class="token function">getRandom</span><span class="token punctuation">(</span>u <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> u <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">', 100%, '</span> <span class="token operator">+</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%, '</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">getCaret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span>activeElement<span class="token punctuation">;</span>            <span class="token keyword">var</span> bcr<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">'TEXTAREA'</span> <span class="token operator">||</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">'INPUT'</span> <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> offset <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> el<span class="token punctuation">.</span>selectionStart<span class="token punctuation">)</span><span class="token punctuation">;</span>                bcr <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">x</span><span class="token operator">:</span> offset<span class="token punctuation">.</span>left <span class="token operator">+</span> bcr<span class="token punctuation">.</span>left<span class="token punctuation">,</span>                    <span class="token literal-property property">y</span><span class="token operator">:</span> offset<span class="token punctuation">.</span>top <span class="token operator">+</span> bcr<span class="token punctuation">.</span>top<span class="token punctuation">,</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token function">getColor</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">var</span> selection <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>selection<span class="token punctuation">.</span>rangeCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> range <span class="token operator">=</span> selection<span class="token punctuation">.</span><span class="token function">getRangeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> startNode <span class="token operator">=</span> range<span class="token punctuation">.</span>startContainer<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>startNode<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> document<span class="token punctuation">.</span><span class="token constant">TEXT_NODE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    startNode <span class="token operator">=</span> startNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                bcr <span class="token operator">=</span> range<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">x</span><span class="token operator">:</span> bcr<span class="token punctuation">.</span>left<span class="token punctuation">,</span>                    <span class="token literal-property property">y</span><span class="token operator">:</span> bcr<span class="token punctuation">.</span>top<span class="token punctuation">,</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token function">getColor</span><span class="token punctuation">(</span>startNode<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'transparent'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">createParticle</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">x</span><span class="token operator">:</span> x<span class="token punctuation">,</span>                <span class="token literal-property property">y</span><span class="token operator">:</span> y<span class="token punctuation">,</span>                <span class="token literal-property property">alpha</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token literal-property property">color</span><span class="token operator">:</span> color<span class="token punctuation">,</span>                <span class="token literal-property property">velocity</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>                    <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">3.5</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token constant">POWERMODE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> caret <span class="token operator">=</span> <span class="token function">getCaret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> numParticles <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>numParticles<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                particles<span class="token punctuation">[</span>particlePointer<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createParticle</span><span class="token punctuation">(</span>caret<span class="token punctuation">.</span>x<span class="token punctuation">,</span> caret<span class="token punctuation">.</span>y<span class="token punctuation">,</span> caret<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>                particlePointer <span class="token operator">=</span> <span class="token punctuation">(</span>particlePointer <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">500</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">POWERMODE</span><span class="token punctuation">.</span>shake<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> intensity <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> x <span class="token operator">=</span> intensity <span class="token operator">*</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> y <span class="token operator">=</span> intensity <span class="token operator">*</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginLeft <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginTop <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginLeft <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>                    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginTop <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token constant">POWERMODE</span><span class="token punctuation">.</span>colorful <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> particles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> particle <span class="token operator">=</span> particles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>particle<span class="token punctuation">.</span>alpha <span class="token operator">&lt;=</span> <span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                particle<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token number">0.075</span><span class="token punctuation">;</span>                particle<span class="token punctuation">.</span>x <span class="token operator">+=</span> particle<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x<span class="token punctuation">;</span>                particle<span class="token punctuation">.</span>y <span class="token operator">+=</span> particle<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y<span class="token punctuation">;</span>                particle<span class="token punctuation">.</span>alpha <span class="token operator">*=</span> <span class="token number">0.96</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span>globalAlpha <span class="token operator">=</span> particle<span class="token punctuation">.</span>alpha<span class="token punctuation">;</span>                context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> particle<span class="token punctuation">.</span>color<span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>particle<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>particle<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span>        module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token constant">POWERMODE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> properties <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'direction'</span><span class="token punctuation">,</span> <span class="token string">'boxSizing'</span><span class="token punctuation">,</span> <span class="token string">'width'</span><span class="token punctuation">,</span> <span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token string">'overflowX'</span><span class="token punctuation">,</span> <span class="token string">'overflowY'</span><span class="token punctuation">,</span> <span class="token string">'borderTopWidth'</span><span class="token punctuation">,</span> <span class="token string">'borderRightWidth'</span><span class="token punctuation">,</span> <span class="token string">'borderBottomWidth'</span><span class="token punctuation">,</span> <span class="token string">'borderLeftWidth'</span><span class="token punctuation">,</span> <span class="token string">'borderStyle'</span><span class="token punctuation">,</span> <span class="token string">'paddingTop'</span><span class="token punctuation">,</span> <span class="token string">'paddingRight'</span><span class="token punctuation">,</span> <span class="token string">'paddingBottom'</span><span class="token punctuation">,</span> <span class="token string">'paddingLeft'</span><span class="token punctuation">,</span> <span class="token string">'fontStyle'</span><span class="token punctuation">,</span> <span class="token string">'fontVariant'</span><span class="token punctuation">,</span> <span class="token string">'fontWeight'</span><span class="token punctuation">,</span> <span class="token string">'fontStretch'</span><span class="token punctuation">,</span> <span class="token string">'fontSize'</span><span class="token punctuation">,</span> <span class="token string">'fontSizeAdjust'</span><span class="token punctuation">,</span> <span class="token string">'lineHeight'</span><span class="token punctuation">,</span> <span class="token string">'fontFamily'</span><span class="token punctuation">,</span> <span class="token string">'textAlign'</span><span class="token punctuation">,</span> <span class="token string">'textTransform'</span><span class="token punctuation">,</span> <span class="token string">'textIndent'</span><span class="token punctuation">,</span> <span class="token string">'textDecoration'</span><span class="token punctuation">,</span> <span class="token string">'letterSpacing'</span><span class="token punctuation">,</span> <span class="token string">'wordSpacing'</span><span class="token punctuation">,</span> <span class="token string">'tabSize'</span><span class="token punctuation">,</span> <span class="token string">'MozTabSize'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> isFirefox <span class="token operator">=</span> window<span class="token punctuation">.</span>mozInnerScreenX <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">function</span> <span class="token function">getCaretCoordinates</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> position<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> debug <span class="token operator">=</span> options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>debug <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#input-textarea-caret-position-mirror-div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                div<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'input-textarea-caret-position-mirror-div'</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> style <span class="token operator">=</span> div<span class="token punctuation">.</span>style<span class="token punctuation">;</span>                <span class="token keyword">var</span> computed <span class="token operator">=</span> window<span class="token punctuation">.</span>getComputedStyle <span class="token operator">?</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">:</span> element<span class="token punctuation">.</span>currentStyle<span class="token punctuation">;</span>                style<span class="token punctuation">.</span>whiteSpace <span class="token operator">=</span> <span class="token string">'pre-wrap'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>nodeName <span class="token operator">!==</span> <span class="token string">'INPUT'</span><span class="token punctuation">)</span> style<span class="token punctuation">.</span>wordWrap <span class="token operator">=</span> <span class="token string">'break-word'</span><span class="token punctuation">;</span>                style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'absolute'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>debug<span class="token punctuation">)</span> style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> <span class="token string">'hidden'</span><span class="token punctuation">;</span>                properties<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    style<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> computed<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isFirefox<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>scrollHeight <span class="token operator">></span> <span class="token function">parseInt</span><span class="token punctuation">(</span>computed<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span> style<span class="token punctuation">.</span>overflowY <span class="token operator">=</span> <span class="token string">'scroll'</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    style<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token string">'hidden'</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                div<span class="token punctuation">.</span>textContent <span class="token operator">=</span> element<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>nodeName <span class="token operator">===</span> <span class="token string">'INPUT'</span><span class="token punctuation">)</span> div<span class="token punctuation">.</span>textContent <span class="token operator">=</span> div<span class="token punctuation">.</span>textContent<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"\u00a0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                span<span class="token punctuation">.</span>textContent <span class="token operator">=</span> element<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'.'</span><span class="token punctuation">;</span>                div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> coordinates <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">top</span><span class="token operator">:</span> span<span class="token punctuation">.</span>offsetTop <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>computed<span class="token punctuation">[</span><span class="token string">'borderTopWidth'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token literal-property property">left</span><span class="token operator">:</span> span<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>computed<span class="token punctuation">[</span><span class="token string">'borderLeftWidth'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    span<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'#aaa'</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> coordinates<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> module <span class="token operator">!=</span> <span class="token string">"undefined"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module<span class="token punctuation">.</span>exports <span class="token operator">!=</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                module<span class="token punctuation">.</span>exports <span class="token operator">=</span> getCaretCoordinates<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                window<span class="token punctuation">.</span>getCaretCoordinates <span class="token operator">=</span> getCaretCoordinates<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>themes\matery\layout\layout.ejs</code>中添加</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token comment">&lt;!-- 添加打字爆炸特效 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/activate-power-mode.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token constant">POWERMODE</span><span class="token punctuation">.</span>colorful <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// make power mode colorful</span>    <span class="token constant">POWERMODE</span><span class="token punctuation">.</span>shake <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// turn off shake</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token constant">POWERMODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 特效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>valine</title>
      <link href="/posts/9997.html"/>
      <url>/posts/9997.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>修改字体</title>
      <link href="/posts/3356.html"/>
      <url>/posts/3356.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo优化</title>
      <link href="/posts/8410.html"/>
      <url>/posts/8410.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo优化"><a href="#hexo优化" class="headerlink" title="hexo优化"></a>hexo优化</h1><h2 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h2><blockquote><p><strong>本节参考自　<a href="http://npm.taobao.org/">淘宝 NPM 镜像</a></strong></p></blockquote><p>这是一个完整 <strong>npmjs.org</strong> 镜像，你可以用此代替官方版本（只读），同步频率目前为 10 分钟 一次以保证尽量与官方服务器同步。在 <strong>npm</strong> 无法同步时提供帮助。</p><p><strong>打开命令行窗口安装</strong>：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h4 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h4><p>从 <a href="https://registry.npm.taobao.org/">registry.npm.taobao.org</a> 安装所有模块。当安装的时候发现安装的模块还没有同步过来，淘宝 NPM 会自动在后台进行同步，并且会让你从官方 NPM <a href="https://registry.npm.taobao.org/">registry.npm.taobao.org</a> 进行安装。下次你再安装这个模块的时候，就会直接从 淘宝 NPM 安装了。</p><pre class="line-numbers language-none"><code class="language-none">$ cnpm install [name]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="同步模块"><a href="#同步模块" class="headerlink" title="同步模块"></a>同步模块</h4><p>直接通过 <code>sync</code> 命令马上同步一个模块, 只有 <code>cnpm</code> 命令行才有此功能:</p><pre class="line-numbers language-none"><code class="language-none">$ cnpm sync connect<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然, 你可以直接通过 web 方式来同步: <a href="https://npm.taobao.org/sync/connect">&#x2F;sync&#x2F;connect</a></p><pre class="line-numbers language-none"><code class="language-none">$ open https:&#x2F;&#x2F;npm.taobao.org&#x2F;sync&#x2F;connect<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h4><p>支持 <code>npm</code> 除了 <code>publish</code> 之外的所有命令, 如:</p><pre class="line-numbers language-none"><code class="language-none">$ cnpm info connect<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="InstantClick"><a href="#InstantClick" class="headerlink" title="InstantClick"></a>InstantClick</h2><p><strong>本节参考自　<a href="https://www.liuxinggang.com/2016-12-06-hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%EF%BC%8D%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/">刘兴刚博客</a></strong></p><p><strong>Next 主题 现已集成 quicklink</strong></p><p>通常，我们为了减少 <strong>DNS</strong> 的查询时间，使用 <strong>dns prefetch</strong> 为该页面中的链接做解析，提升页面的加载速度。类似的，我们可以在鼠标滑到链接上到点击的时间间隙去加载这个页面，通常这个间隙有几百毫秒，利用 <strong>InstantClick</strong>，我们可以充分利用这几百毫秒，让网站能够瞬间显示新页面，几乎没有延迟。</p><p>但是 <strong>InstantClick</strong> 并不能滥用，许多 <strong>js</strong> 无法与它兼容，如<strong>谷歌分析</strong>、<strong>百度统计</strong>以及 <strong>fancybox</strong>。</p><p>初始化并解决部分 <strong>js</strong> 无法加载的问题：</p><p><strong>打开</strong>　<code>\hexo-theme-next\layout\_partials\head.njk</code></p><p><strong>添加</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"\js\custom\instantclick.min.js"</span> data<span class="token operator">-</span>no<span class="token operator">-</span>instant<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>   <span class="token operator">&lt;</span>script data<span class="token operator">-</span>no<span class="token operator">-</span>instant<span class="token operator">></span>   InstantClick<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">isInitialLoad</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>isInitialLoad <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> MathJax <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token comment">// support MathJax</span>     MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">.</span><span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"Typeset"</span><span class="token punctuation">,</span>MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> prettyPrint <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token comment">// support google code prettify</span>     <span class="token function">prettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> _hmt <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span>  <span class="token comment">// support 百度统计</span>     _hmt<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'_trackPageview'</span><span class="token punctuation">,</span> location<span class="token punctuation">.</span>pathname <span class="token operator">+</span> location<span class="token punctuation">.</span>search<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ga <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span>  <span class="token comment">// support google analytics</span>       <span class="token function">ga</span><span class="token punctuation">(</span><span class="token string">'send'</span><span class="token punctuation">,</span> <span class="token string">'pageview'</span><span class="token punctuation">,</span> location<span class="token punctuation">.</span>pathname <span class="token operator">+</span> location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   InstantClick<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>下载</strong>　 <a href="http://instantclick.io/v3.1.0/instantclick.min.js">instantclick.min.js</a></p><p><strong>打开</strong>　<code>\hexo-theme-next\source\js\custom\</code></p><p><strong>放置</strong>　<code>instantclick.min.js</code></p><p>这时候对于所有链接都开启<strong>预加载模式</strong>，但可以把部分链接加入黑名单：<br><code>&lt;a href=&quot;\blog\&quot; data-no-instant&gt;Blog&lt;/a&gt;</code></p><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><h3 id="5-1-Gulp"><a href="#5-1-Gulp" class="headerlink" title="5.1. Gulp"></a>5.1. Gulp</h3><p><strong>本节参考自　<a href="https://chanshiyu.com/">蝉時雨</a></strong></p><p><strong>gulp.js</strong> 是基于流的自动化构建工具，我们可以使用 <strong>Gulp</strong> 为 Hexo 压缩文件</p><p><strong>在 \blog\ 打开命令行窗口</strong></p><p><strong>安装</strong></p><pre class="line-numbers language-none"><code class="language-none">npm install gulp --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>再根据需要安装以下模块</strong></p><pre class="line-numbers language-none"><code class="language-none">npm install gulp-minify-css --savenpm install gulp-uglify --savenpm install gulp-htmlmin --savenpm install gulp-htmlclean --savenpm install gulp-imagemin --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>打开</strong>　<code>\blog\</code></p><p><strong>新建</strong>　<code>gulpfile.js</code></p><p><strong>添加</strong></p><pre class="line-numbers language-none"><code class="language-none">var gulp &#x3D; require(&#39;gulp&#39;);var minifycss &#x3D; require(&#39;gulp-minify-css&#39;);var uglify &#x3D; require(&#39;gulp-uglify&#39;);var htmlmin &#x3D; require(&#39;gulp-htmlmin&#39;);var htmlclean &#x3D; require(&#39;gulp-htmlclean&#39;);var imagemin &#x3D; require(&#39;gulp-imagemin&#39;);&#x2F;&#x2F; 压缩html文件gulp.task(&#39;minify-html&#39;, function() &#123;  return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.html&#39;)  .pipe(htmlclean())  .pipe(htmlmin(&#123;  removeComments: true,  minifyJS: true,  minifyCSS: true,  minifyURLs: true,  &#125;))  .pipe(gulp.dest(&#39;.&#x2F;public&#39;))&#125;);&#x2F;&#x2F; 压缩css文件gulp.task(&#39;minify-css&#39;, function() &#123;  return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.css&#39;)  .pipe(minifycss())  .pipe(gulp.dest(&#39;.&#x2F;public&#39;));&#125;);&#x2F;&#x2F; 压缩js文件gulp.task(&#39;minify-js&#39;, function() &#123;  return gulp.src([&#39;.&#x2F;public&#x2F;**&#x2F;.js&#39;,&#39;!.&#x2F;public&#x2F;js&#x2F;**&#x2F;*min.js&#39;])  .pipe(uglify())  .pipe(gulp.dest(&#39;.&#x2F;public&#39;));&#125;);&#x2F;&#x2F; 压缩 public&#x2F;images 目录内图片gulp.task(&#39;minify-images&#39;, function() &#123;  gulp.src(&#39;.&#x2F;public&#x2F;images&#x2F;**&#x2F;*.*&#39;)  .pipe(imagemin(&#123;     optimizationLevel: 5, &#x2F;&#x2F;类型：Number  默认：3  取值范围：0-7（优化等级）     progressive: true, &#x2F;&#x2F;类型：Boolean 默认：false 无损压缩jpg图片     interlaced: false, &#x2F;&#x2F;类型：Boolean 默认：false 隔行扫描gif进行渲染     multipass: false, &#x2F;&#x2F;类型：Boolean 默认：false 多次优化svg直到完全优化  &#125;))  .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;uploads&#39;));&#125;);&#x2F;&#x2F; 默认任务 gulp 4.0 适用的方式gulp.task(&#39;default&#39;, gulp.parallel(&#39;minify-html&#39;, &#39;minify-css&#39;, &#39;minify-js&#39;, &#39;minify-images&#39; &#x2F;&#x2F;build the website));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>依照格式，删除未安装模块的代码部分</strong></p><p><strong>在命令行内输入 <code>$ gulp</code> 即可运行</strong></p><p><strong>一键同步代码参照　<a href="https://qianling.pw/hexo-optimization/#7">7. 批处理脚本自动创建文章及一键部署</a></strong></p><p><strong>把因删除空格缩小的间距调整回来：</strong></p><p><strong>打开</strong>　<code>\blog\source\_data\styles.styl</code></p><p><strong>添加</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; gulp 间距调整span.leancloud-visitors-count, span.post-comments-count.valine-comment-count &#123;  padding-left: 2px;&#125;i.fa.fa-ravelry &#123;  padding-left: 5px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-hexo-neat"><a href="#5-2-hexo-neat" class="headerlink" title="5.2. hexo-neat"></a>5.2. hexo-neat</h3><p><strong>本节参考自　<a href="https://blog.csdn.net/lewky_liu/article/details/82432003">Hexo瞎折腾系列(5) - 使用hexo-neat插件压缩页面静态资源</a></strong></p><p><strong>已知 BUG：</strong></p><ul><li><strong>压缩 md 文件会使 markdown 语法的代码块消失</strong></li><li><strong>会删除全角空格</strong></li></ul><p><strong>安装</strong>　<code>npm install hexo-neat --save</code></p><p><strong>打开</strong>　<code>\blog\_config.yml</code></p><p><strong>添加</strong></p><pre class="line-numbers language-none"><code class="language-none"># hexo-neat# 开关neat_enable: true# 压缩 htmlneat_html:  enable: true  exclude:    - &#39;**&#x2F;*.md&#39;# 压缩 cssneat_css:  enable: true  exclude:  - &#39;**&#x2F;*.min.css&#39;# 压缩 jsneat_js:  enable: true  mangle: true  output:  compress:  exclude:  - &#39;**&#x2F;*.min.js&#39;  - &#39;**&#x2F;jquery.fancybox.pack.js&#39;  - &#39;**&#x2F;index.js&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h2><p><strong>教程　<a href="https://qianling.pw/service-worker/">Hexo 部署 Service Worker</a></strong></p><p>Service workers 本质上充当 Web 应用程序与浏览器之间的代理服务器，为了适应越来越多的网页应用而产生。</p><p>它可以通过拦截并修改访问和资源请求，缓存特定的网页资源，并可以将网页做到离线可用；</p><p>同时 Service Workers 也能做到定期后台同步与信息推送。</p><p>部署成功后，您可以节省用户流量、提升页面二次加载速度等。</p><h2 id="批处理脚本自动创建文章及一键部署"><a href="#批处理脚本自动创建文章及一键部署" class="headerlink" title="批处理脚本自动创建文章及一键部署"></a>批处理脚本自动创建文章及一键部署</h2><p><strong>打开</strong>　<code>\blog\</code></p><p><strong>新建</strong>　<code>新建文章.bat</code></p><p><strong>添加</strong></p><pre class="line-numbers language-none"><code class="language-none">set &quot;a&#x3D;%date:~,4%&quot;set &quot;b&#x3D;%date:~5,2%&quot;set &quot;c&#x3D;%date:~8,2%&quot;hexo new &quot;%a%-%b%-%c%&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>命名格式为　<code>年-月-日.md</code></strong></p><p><strong>部署可写为</strong>　<code>hexo clean &amp; hexo g -d</code></p><p><strong>若使用 gulp 则写为</strong>　<code>hexo clean &amp; hexo g &amp;&amp; gulp &amp; hexo deploy</code></p><h2 id="添加标题底部横线"><a href="#添加标题底部横线" class="headerlink" title="添加标题底部横线"></a>添加标题底部横线</h2><p><strong>本节参考自　<a href="http://yuchen-lea.github.io/">跬步</a></strong></p><p><strong>打开</strong>　<code>\blog\source\_data\styles.styl</code></p><p><strong>添加</strong></p><pre class="line-numbers language-none"><code class="language-none">h1, h2, h3, h4, h5, h6 &#123;  border-bottom: 2px solid #8c8c8c;  padding: 0 5% 2px 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="阅读进度条"><a href="#阅读进度条" class="headerlink" title="阅读进度条"></a>阅读进度条</h2><p><strong>本节参考自　<a href="https://isudox.com/2016/07/14/customize-hexo-theme/">I sudo X</a></strong></p><p><strong>比自带的更好看。</strong></p><p><strong>打开</strong>　<code>\blog\source\_data\header.njk</code></p><p><strong>添加</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;top-scroll-bar&quot;&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>打开</strong>　<code>\blog\source\_data\styles.styl</code></p><p><strong>添加</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;顶部阅读进度条.top-scroll-bar &#123;  position: fixed;  height: 3px;  top: 0;  left: 0;  transition-duration: 0.7s,0.7s;  transiton-property: width,background;  z-index: 99999;  display: none;  background: #37C6C0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>打开</strong>　<code>\hexo-theme-next\source\js\custom\custom.js</code></p><p><strong>添加</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;阅读进度条$(document).ready(function () &#123;  $(window).scroll(function()&#123;  $(&quot;.top-scroll-bar&quot;).attr(&quot;style&quot;, &quot;width: &quot; + ($(this).scrollTop() &#x2F; ($(document).height() - $(this).height()) * 100) + &quot;%; display: block;&quot;);  var s&#x3D;$(window).scrollTop();  var a&#x3D;$(document).height();  var b&#x3D;$(window).height();  var result&#x3D;parseInt(s&#x2F;(a-b)*100);  $(&quot;.top-scroll-bar&quot;).css(&quot;width&quot;,result+&quot;%&quot;);  if(result&gt;&#x3D;0&amp;&amp;result&lt;&#x3D;19)  $(&quot;.top-scroll-bar&quot;).css(&quot;background&quot;,&quot;#cccccc&quot;);  if(result&gt;&#x3D;20&amp;&amp;result&lt;&#x3D;39)  $(&quot;.top-scroll-bar&quot;).css(&quot;background&quot;,&quot;#50bcb6&quot;);  if(result&gt;&#x3D;40&amp;&amp;result&lt;&#x3D;59)  $(&quot;.top-scroll-bar&quot;).css(&quot;background&quot;,&quot;#85c440&quot;);  if(result&gt;&#x3D;60&amp;&amp;result&lt;&#x3D;79)  $(&quot;.top-scroll-bar&quot;).css(&quot;background&quot;,&quot;#f2b63c&quot;);  if(result&gt;&#x3D;80&amp;&amp;result&lt;&#x3D;99)  $(&quot;.top-scroll-bar&quot;).css(&quot;background&quot;,&quot;#FF0000&quot;);  if(result&#x3D;&#x3D;100)  $(&quot;.top-scroll-bar&quot;).css(&quot;background&quot;,&quot;#f58ca1&quot;);  &#125;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><h2 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h2><h2 id="文末结束标记"><a href="#文末结束标记" class="headerlink" title="文末结束标记"></a>文末结束标记</h2><p><strong>本节参考自　<a href="http://www.wuxubj.cn/2016/08/Hexo-nexT-build-personal-blog/#5-3-%E6%96%87%E7%AB%A0%E6%9C%AB%E5%B0%BE%E6%B7%BB%E5%8A%A0%E2%80%9C%E6%9C%AC%E6%96%87%E7%BB%93%E6%9D%9F%E2%80%9D%E6%A0%87%E8%AE%B0/">务虚笔记</a></strong></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://qianling.pw/hexo-optimization/">Hexo 优化汇总 | 千灵 (qianling.pw)</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="/posts/1d91.html"/>
      <url>/posts/1d91.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><p>开始入门Docker学习，开始时间的晚了点，只能多花点功夫努力学习了。</p><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402032139023.png" alt="DockerCheatSheet"></p><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402032139991.png" alt="DockerXmind"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相册设置</title>
      <link href="/posts/fb80.html"/>
      <url>/posts/fb80.html</url>
      
        <content type="html"><![CDATA[<h1 id="添加相册"><a href="#添加相册" class="headerlink" title="添加相册"></a>添加相册</h1><h2 id="为什么添加相册"><a href="#为什么添加相册" class="headerlink" title="为什么添加相册"></a>为什么添加相册</h2><p>个人博客中添加相册功能，不仅具备多项实用性与娱乐性优点，而且能够丰富博客的表达形式与内容层次：</p><ol><li><strong>保存和展示图片</strong>：博主可以将自己拍摄或收集到的各种喜欢的图片上传至相册，如旅行照片、作品集、灵感素材等，为自己的博客创建一个独特的视觉档案库，方便随时查看和分享。</li><li><strong>记录日常生活</strong>：通过相册功能，博主能够以直观且生动的方式记录下生活中的点点滴滴，如美食制作过程、家庭聚会瞬间、学习工作进展、户外探险经历等。这些图像资料既是对生活记忆的有效留存，也是向读者展现真实自我、增进情感交流的重要载体。</li><li><strong>激发创作灵感</strong>：对于艺术创作者或者写作者来说，过往的图片记录可能是未来的创作源泉，相册的存在可以帮助他们回顾过去，挖掘新的创意灵感。</li></ol><p>综上所述，在个人博客中添加相册功能，不仅可以满足博主个性化的需求，还能有效增强博客的吸引力，提升用户的浏览满意度，并为博主提供一个珍贵的记忆宝库和持续创新的动力来源。</p><h2 id="样式一"><a href="#样式一" class="headerlink" title="样式一"></a>样式一</h2><h3 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h3><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402022017255.png" alt="galleries"></p><h3 id="添加【相册】菜单"><a href="#添加【相册】菜单" class="headerlink" title="添加【相册】菜单"></a>添加【相册】菜单</h3><ol><li><p>进入主题（matery）下的配置文件_config.yml，在menu下添加以下代码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">Galleries</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>photo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在主题（matery）下的languages下的</p><p>default.yml（英文）添加：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">galleries</span><span class="token punctuation">:</span> galleries<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>zh-CN.yml（中文）添加：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">galleries</span><span class="token punctuation">:</span> 相册<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在matery&#x2F;layout&#x2F;_partial&#x2F;下的<code>navigation.ejs</code>和<code>mobile-nav.ejs</code>文件里添加：</p><p>至于添加的位置，打开文件后就知道了，里面会有类似格式的代码，很容易找到的</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">menuMap.set("Galleries"<span class="token punctuation">,</span> "相册");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在站点根目录source下新建galleries文件，然后在该目录下新建index.md，添加以下代码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 相册<span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"galleries"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h3><p>在matery&#x2F;source&#x2F;css下新建gallery.css文件，添加以下样式：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.gallery-wrapper</span><span class="token punctuation">&#123;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.gallery-wrapper .gallery-box</span><span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 5px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.gallery-wrapper .gallery-item</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> 0 1px 3px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.22<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> 0 1px 3px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.22<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 1px 3px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.22<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.gallery-cover-box</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> 60%<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> center center no-repeat<span class="token punctuation">;</span>  <span class="token property">-webkit-background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.gallery-cover-box .gallery-cover-img</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.gallery-item .gallery-name</span><span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #666<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.waterfall</span> <span class="token punctuation">&#123;</span>  <span class="token property">column-count</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span>  <span class="token property">column-gap</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.photo-wrapper</span><span class="token punctuation">&#123;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.photo-item</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">-moz-page-break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span>  <span class="token property">-webkit-column-break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span>  <span class="token property">break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> 0 1px 3px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.22<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> 0 1px 3px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.22<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 1px 3px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.22<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.photo-item img</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.photo-item .photo-name</span><span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> 1px solid #dddddd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*适配移动端布局*/</span><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 601px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.waterfall</span> <span class="token punctuation">&#123;</span>    <span class="token property">column-count</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>    <span class="token property">column-gap</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在matery&#x2F;layout目录下</p><ul><li><p>新建galleries.ejs文件，添加以下代码：</p><pre class="line-numbers language-ej" data-language="ej"><code class="language-ej">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;css&#x2F;gallery.css&quot;&gt;&lt;%- partial(&#39;_partial&#x2F;bg-cover&#39;) %&gt;&lt;main class&#x3D;&quot;content&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;% if (site.data &amp;&amp; site.data.galleries) &#123; %&gt;        &lt;% var galleries &#x3D; site.data.galleries; %&gt;        &lt;div class&#x3D;&quot;gallery-wrapper row&quot;&gt;            &lt;% for (var i &#x3D; 0, len &#x3D; galleries.length; i &lt; len; i++) &#123; %&gt;            &lt;% var gallery &#x3D; galleries[i]; %&gt;            &lt;div class&#x3D;&quot;col s6 m4 l4 xl3 gallery-box&quot;&gt;                &lt;a href&#x3D;&quot;.&#x2F;&lt;%- gallery.name %&gt;&quot; class&#x3D;&quot;gallery-item&quot; data-aos&#x3D;&quot;zoom-in-up&quot;&gt;                    &lt;div class&#x3D;&quot;gallery-cover-box&quot; style&#x3D;&quot;background-image: url(http:&#x2F;&#x2F;图片地址.com&#x2F;&lt;%- gallery.cover%&gt;);&quot;&gt;                    &lt;&#x2F;div&gt;                    &lt;p class&#x3D;&quot;gallery-name&quot;&gt;                        &lt;%- gallery.name %&gt;                    &lt;&#x2F;p&gt;                &lt;&#x2F;a&gt;            &lt;&#x2F;div&gt;            &lt;% &#125; %&gt;        &lt;&#x2F;div&gt;        &lt;% &#125; %&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;main&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新建gallery.ejs，添加以下代码：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/css/gallery.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/libs/fancybox/jquery.fancybox.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/libs/justifiedGallery/justifiedGallery.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/post-cover'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"><span class="token keyword">let</span> galleries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>site<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> site<span class="token punctuation">.</span>data<span class="token punctuation">.</span>galleries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    galleries <span class="token operator">=</span> site<span class="token punctuation">.</span>data<span class="token punctuation">.</span>galleries<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> pageTitle <span class="token operator">=</span> page<span class="token punctuation">.</span>title<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getCurrentGallery</span><span class="token punctuation">(</span><span class="token parameter">galleries<span class="token punctuation">,</span> pageTitle</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> galleries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>galleries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">==</span> pageTitle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> galleries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> currentGallery <span class="token operator">=</span> <span class="token function">getCurrentGallery</span><span class="token punctuation">(</span>galleries<span class="token punctuation">,</span> pageTitle<span class="token punctuation">)</span><span class="token keyword">var</span> photos <span class="token operator">=</span> currentGallery<span class="token punctuation">.</span>photos<span class="token punctuation">;</span><span class="token keyword">let</span> imageStr <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> photos<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> photo <span class="token operator">=</span> photos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    imageStr <span class="token operator">+=</span> <span class="token string">"&lt;a href=\"http://图片地址.com/"</span> <span class="token operator">+</span> photo <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span>            <span class="token string">"     class=\"photo-item\" rel=\"example_group\""</span> <span class="token operator">+</span>            <span class="token string">"     data-fancybox=\"images\">"</span> <span class="token operator">+</span>            <span class="token string">"      &lt;img src=\"http://图片地址.com/"</span> <span class="token operator">+</span> photo <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span>            <span class="token string">"       alt="</span> <span class="token operator">+</span> photo <span class="token operator">+</span> <span class="token string">">\n"</span> <span class="token operator">+</span>            <span class="token string">"    &lt;/a>"</span><span class="token punctuation">&#125;</span></span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>photo-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>waterfall<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mygallery<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> imageStr </span><span class="token delimiter punctuation">%></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/libs/fancybox/fancybox.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/libs/justifiedGallery/justifiedGallery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a[rel=example_group]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fancybox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#mygallery"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">justifiedGallery</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">margins</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">rowHeight</span><span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><ol><li><p>在站点目录sources&#x2F;_data下新建一个galleries.json的文件，模板如下：</p><p>每个相册有以下字段：</p><ul><li>name是相册标题</li><li>cover是封面图片，从相册里随便选一个就行</li><li>description是相册介绍</li><li>photos是图片列表</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"美女"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"美女/IMG_20171109_124516.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"2017年记录"</span><span class="token punctuation">,</span>    <span class="token property">"photos"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"美女/IMG_美女0924_110224.jpg"</span><span class="token punctuation">,</span>      <span class="token string">"美女/IMG_美女0924_113412.jpg"</span><span class="token punctuation">,</span>      <span class="token string">"美女/IMG_美女1109_124516.jpg"</span><span class="token punctuation">,</span>      <span class="token string">"美女/IMG_美女1125_125304.jpg"</span><span class="token punctuation">,</span>      <span class="token string">"美女/IMG_美女1126_181605.jpg"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"动漫"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"动漫/IMG_20181124_125818.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"2018年记录"</span><span class="token punctuation">,</span>    <span class="token property">"photos"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"动漫/IMG_动漫0204_113055.jpg"</span><span class="token punctuation">,</span>      <span class="token string">"动漫/IMG_动漫0204_113302.jpg"</span><span class="token punctuation">,</span>      <span class="token string">"动漫/IMG_动漫0204_113442.jpg"</span><span class="token punctuation">,</span>      <span class="token string">"动漫/IMG_动漫0208_083336.jpg"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"游玩"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"游玩/IMG_游玩0331_165713_1.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"游玩年记录"</span><span class="token punctuation">,</span>    <span class="token property">"photos"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"游玩/IMG_游玩0118_200104.jpg"</span><span class="token punctuation">,</span>      <span class="token string">"游玩/IMG_游玩0118_200120.jpg"</span><span class="token punctuation">,</span>      <span class="token string">"游玩/IMG_游玩0118_200456.jpg"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在galleries下建立对应的相册名称的文件夹，比如我的相册需要建：美女、 动漫、游玩、个人四个目录，然后下面再分别新建index.md文件，文件格式为:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 美女<span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"gallery"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="选择布局"><a href="#选择布局" class="headerlink" title="选择布局"></a>选择布局</h3><p>上面的博客用的布局比较简单粗暴，都是固定的大小和宽高比。但是不同的图片有不同的宽高比，用这种模式的话图片有两种显示方式：</p><ul><li>一是强制缩放到固定的宽高，缺点是图片会变形</li><li>二是裁切只显示一部分，缺点是图片显示不全</li></ul><p>那么有没有两全齐美的办法呢？答案是肯定的，选用CSS3的新特性实现的瀑布流布局，特点是等宽布局，固定列数，图片高度自适应。瀑布流布局虽美观且现代化，但图片按照列垂直顺序排列，不符合阅读习惯。</p><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402022020011.png" alt="瀑布流"></p><p>另外一种布局是等高布局，图片高度一致，宽度自适应，图片托管网站flickr就是用的这种模式，但用CSS方法是实现不了，因为每一行最后张图片不一定能正好撑满这一行，需要用js动态设置图片的宽高来实现，justifiedGallery插件就是来完成这个的。</p><p>暂时没有演示图片😂</p><p>下面代码的功能就是初始化这个插件，间距是5px，每一行的高度是150px</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">$("#mygallery").justifiedGallery(&#123;margins: 5, rowHeight: 150&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这两种布局上面的代码里都是包含了的。是可以手动切换，只需要把上面那句代码注释掉就会切换到瀑布流布局。</p><p>当然，你要是对这个样式不满意也可以自行设计样式。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://crazyyuchi.github.io/2022/06/27/xin-jian-xiang-ce/">新建相册 | 兴平 (crazyyuchi.github.io)</a></p><h2 id="样式二"><a href="#样式二" class="headerlink" title="样式二"></a>样式二</h2><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过新建相册，可以让自己的博文更加具有真实性，是十分值得拥有的，希望能帮到您。<br>最后，如果这篇教程能帮到您，请点击最后的 <strong>“赏”</strong> 字，不管多少都是对我的支持，谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 相册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>404页面</title>
      <link href="/posts/e7a5.html"/>
      <url>/posts/e7a5.html</url>
      
        <content type="html"><![CDATA[<h1 id="404-修改失败"><a href="#404-修改失败" class="headerlink" title="404(修改失败)"></a>404(修改失败)</h1><h2 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h2><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402011322913.gif" alt="404"></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>我的模版选用的使用404 Andrew Lawendy，<a href="https://codepen.io/andrew-lawendy/pen/deOpMZ">模版代码</a></p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>not-found parallax<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sky-bg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-island<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://res.cloudinary.com/andrewhani/image/upload/v1524501929/404/island.svg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Island<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-lost wrp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-boat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>boat<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://res.cloudinary.com/andrewhani/image/upload/v1524501894/404/boat.svg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Boat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Your're lost<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Click on the island to return<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'https://fonts.googleapis.com/css?family=Open+Sans|PT+Sans+Narrow'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>$<span class="token property">in-out-cubic</span><span class="token punctuation">:</span> <span class="token function">cubic-bezier</span><span class="token punctuation">(</span>0.65<span class="token punctuation">,</span> 0.05<span class="token punctuation">,</span> 0.36<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token atrule"><span class="token rule">@mixin</span> <span class="token function">transform</span><span class="token punctuation">(</span>$transform...<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> $transform<span class="token punctuation">;</span>    <span class="token property">-moz-transform</span><span class="token punctuation">:</span> $transform<span class="token punctuation">;</span>    <span class="token property">-ms-transform</span><span class="token punctuation">:</span> $transform<span class="token punctuation">;</span>    <span class="token property">-o-transform</span><span class="token punctuation">:</span> $transform<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> $transform<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@mixin</span> <span class="token function">transform-origin</span><span class="token punctuation">(</span>$transform-origin...<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">-webkit-transform-origin</span><span class="token punctuation">:</span> $transform-origin<span class="token punctuation">;</span>    <span class="token property">-moz-transform-origin</span><span class="token punctuation">:</span> $transform-origin<span class="token punctuation">;</span>    <span class="token property">-ms-transform-origin</span><span class="token punctuation">:</span> $transform-origin<span class="token punctuation">;</span>    <span class="token property">-o-transform-origin</span><span class="token punctuation">:</span> $transform-origin<span class="token punctuation">;</span>    <span class="token property">transform-origin</span><span class="token punctuation">:</span> $transform-origin<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@mixin</span> <span class="token function">key-frame</span><span class="token punctuation">(</span>$name<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token atrule"><span class="token rule">@-webkit-keyframes</span> #</span><span class="token punctuation">&#123;</span>$name<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@content</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span>    <span class="token atrule"><span class="token rule">@-moz-keyframes</span> #</span><span class="token punctuation">&#123;</span>$name<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@content</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span>    <span class="token atrule"><span class="token rule">@-o-keyframes</span> #</span><span class="token punctuation">&#123;</span>$name<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@content</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* Standard syntax */</span>    <span class="token atrule"><span class="token rule">@keyframes</span> #</span><span class="token punctuation">&#123;</span>$name<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@content</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@mixin</span> <span class="token function">animation</span><span class="token punctuation">(</span>$animation...<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> $animation<span class="token punctuation">;</span>    <span class="token property">-moz-animation</span><span class="token punctuation">:</span> $animation<span class="token punctuation">;</span>    <span class="token property">-o-animation</span><span class="token punctuation">:</span> $animation<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> $animation<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@mixin</span> <span class="token function">animation-delay</span><span class="token punctuation">(</span>$animation...<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">-webkit-animation-delay</span><span class="token punctuation">:</span> $animation<span class="token punctuation">;</span>    <span class="token property">-moz-animation-delay</span><span class="token punctuation">:</span> $animation<span class="token punctuation">;</span>    <span class="token property">-o-animation-delay</span><span class="token punctuation">:</span> $animation<span class="token punctuation">;</span>    <span class="token property">animation-delay</span><span class="token punctuation">:</span> $animation<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span><span class="token punctuation">&#123;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Open Sans'</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span>0 -20vw<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>110vh<span class="token punctuation">;</span>    <span class="token selector">[class*="wave"]</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">div</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token atrule"><span class="token rule">@for</span> $i from 1 through 7</span> <span class="token punctuation">&#123;</span>            <span class="token selector">&amp;.wave-#</span><span class="token punctuation">&#123;</span>$i<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>                <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>http://res.cloudinary.com/andrewhani/image/upload/v1524501869/404/wave-#&#123;$i&#125;.svg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token selector">&amp;.sky-bg</span><span class="token punctuation">&#123;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>http://res.cloudinary.com/andrewhani/image/upload/v1524821915/404/bg-1_gvybzk.svg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token selector">&amp;[class*="wave"]:not(.wave-4)</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 250px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">&amp;.wave-4</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 430px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.boat</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> 15%<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">animation</span><span class="token punctuation">(</span>boat 15s $in-out-cubic infinite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.wave-lost</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 20rem<span class="token punctuation">;</span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">animation</span><span class="token punctuation">(</span>surf 2s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>        <span class="token selector">span</span> <span class="token punctuation">&#123;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token atrule"><span class="token rule">@include</span> <span class="token function">animation</span><span class="token punctuation">(</span>float 3s ease-in infinite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>            <span class="token selector">&amp;:nth-child(2)</span> <span class="token punctuation">&#123;</span>                <span class="token atrule"><span class="token rule">@include</span> <span class="token function">animation-delay</span><span class="token punctuation">(</span>2.5s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>            <span class="token punctuation">&#125;</span>            <span class="token selector">&amp;:nth-child(3)</span> <span class="token punctuation">&#123;</span>                <span class="token atrule"><span class="token rule">@include</span> <span class="token function">animation-delay</span><span class="token punctuation">(</span>4.5s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.wave-island</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 130px<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 170px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.wave-message</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>        <span class="token property">padding-right</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> auto <span class="token important">!important</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 3rem<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">animation</span><span class="token punctuation">(</span>wave-message 1s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@include</span> <span class="token function">key-frame</span><span class="token punctuation">(</span>boat<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform-origin</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">rotate</span><span class="token punctuation">(</span>-15deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>400px<span class="token punctuation">,</span> 0px<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span>    <span class="token selector">20%</span> <span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform-origin</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">rotate</span><span class="token punctuation">(</span>15deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-20vw<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span>    <span class="token selector">25%</span> <span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform-origin</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">rotate</span><span class="token punctuation">(</span>-7deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-25vw<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform-origin</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">rotate</span><span class="token punctuation">(</span>5deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-50vw<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span>    <span class="token selector">60%</span> <span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform-origin</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">rotate</span><span class="token punctuation">(</span>-1deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-60vw<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span>    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform-origin</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">rotate</span><span class="token punctuation">(</span>2deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-100vw<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@include</span> <span class="token function">key-frame</span><span class="token punctuation">(</span>float<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">0%,    100%</span> <span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">rotate</span><span class="token punctuation">(</span>3deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0px<span class="token punctuation">,</span> -10px<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">rotate</span><span class="token punctuation">(</span>-3deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0px<span class="token punctuation">,</span> 10px<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@include</span> <span class="token function">key-frame</span><span class="token punctuation">(</span>surf<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform-origin</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">rotate</span><span class="token punctuation">(</span>15deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 800px<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span>    <span class="token selector">30%</span> <span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform-origin</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">rotate</span><span class="token punctuation">(</span>15deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 500px<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span>    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform-origin</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">rotate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@include</span> <span class="token function">key-frame</span><span class="token punctuation">(</span>wave-message<span class="token punctuation">)</span></span><span class="token punctuation">&#123;</span>    <span class="token selector">0%</span><span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 120%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">&#125;</span>    <span class="token selector">100%</span><span class="token punctuation">&#123;</span>        <span class="token atrule"><span class="token rule">@include</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">parallax</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">&lt;</span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> halfFieldWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".parallax"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      halfFieldHeight <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".parallax"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      fieldPos <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".parallax"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span>      y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> fieldPos<span class="token punctuation">.</span>top<span class="token punctuation">,</span>      newX <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> halfFieldWidth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">,</span>      newY <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> halfFieldHeight<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.parallax [class*="wave"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">transition</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token literal-property property">transform</span><span class="token operator">:</span>          <span class="token string">"translate3d("</span> <span class="token operator">+</span> index <span class="token operator">*</span> newX <span class="token operator">+</span> <span class="token string">"px,"</span> <span class="token operator">+</span> index <span class="token operator">*</span> newY <span class="token operator">+</span> <span class="token string">"px,0px)"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">stopParallax</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.parallax [class*="wave"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">"translate(0px,0px)"</span><span class="token punctuation">,</span>      <span class="token literal-property property">transition</span><span class="token operator">:</span> <span class="token string">"all .7s"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$timeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.parallax [class*="wave"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"transition"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".not-found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> parallax<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".not-found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"mouseleave"</span><span class="token punctuation">,</span> stopParallax<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二次修改"><a href="#二次修改" class="headerlink" title="二次修改"></a>二次修改</h3><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Parallax 404 page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../themes/matery/source/css/404.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../themes/matery/source/js/404.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>not-found<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>not-found parallax<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sky-bg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-island<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../themes/matery/source/404/island.svg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Island<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-lost wrp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-boat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>boat<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../themes/matery/source/404/boat.svg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Boat<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You seem lost<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Click on the island to return<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Open Sans"</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> -1vh -20vw<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 110vh<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found [class*=wave]</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found div</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found div.wave-1</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../404/wave-1.svg<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found div.wave-2</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../404/wave-2.svg<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found div.wave-3</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../404/wave-3.svg<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found div.wave-4</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../404/wave-4.svg<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found div.wave-5</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../404/wave-5.svg<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found div.wave-6</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../404/wave-6.svg<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found div.wave-7</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../404/wave-7.svg<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found div.sky-bg</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../404/bg.svg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found div[class*=wave]</span> <span class="token punctuation">&#123;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.99<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found div[class*=wave]:not(.wave-4)</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 350px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found div.wave-4</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 530px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found .boat</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 15%<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> boat 15s <span class="token function">cubic-bezier</span><span class="token punctuation">(</span>0.65<span class="token punctuation">,</span> 0.05<span class="token punctuation">,</span> 0.36<span class="token punctuation">,</span> 1<span class="token punctuation">)</span> infinite<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found .wave-lost</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 20rem<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> surf 2s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">.not-found .wave-lost</span> <span class="token punctuation">&#123;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 13rem<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 16%<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">.not-found .wave-lost</span> <span class="token punctuation">&#123;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 20rem<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 22%<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found .wave-lost span</span> <span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> float 3s ease-in infinite<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found .wave-lost span:nth-child(2)</span> <span class="token punctuation">&#123;</span>    <span class="token property">animation-delay</span><span class="token punctuation">:</span> 2.5s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found .wave-lost span:nth-child(3)</span> <span class="token punctuation">&#123;</span>    <span class="token property">animation-delay</span><span class="token punctuation">:</span> 4.5s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found .wave-island</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 170px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.not-found .wave-message</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">padding-right</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> auto <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 3rem<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> wave-message 1s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">.not-found .wave-message</span> <span class="token punctuation">&#123;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 16%<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 1.8rem<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">.not-found .wave-message</span> <span class="token punctuation">&#123;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 22%<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 3rem<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> boat</span> <span class="token punctuation">&#123;</span>    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform-origin</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-15deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>400px<span class="token punctuation">,</span> 0px<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">20%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform-origin</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>15deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-20vw<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">25%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform-origin</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-7deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-25vw<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform-origin</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>5deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-50vw<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">60%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform-origin</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-1deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-60vw<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform-origin</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>2deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-100vw<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> float</span> <span class="token punctuation">&#123;</span>    <span class="token selector">0%,    100%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>3deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0px<span class="token punctuation">,</span> -10px<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-3deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0px<span class="token punctuation">,</span> 10px<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> surf</span> <span class="token punctuation">&#123;</span>    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform-origin</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>15deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 800px<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">30%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform-origin</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>15deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 500px<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform-origin</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> wave-message</span> <span class="token punctuation">&#123;</span>    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 120%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">parallax</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> windowWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">&lt;</span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> parallax <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.parallax'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> halfFieldWidth <span class="token operator">=</span> parallax<span class="token punctuation">.</span>offsetWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> halfFieldHeight <span class="token operator">=</span> parallax<span class="token punctuation">.</span>offsetHeight <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> fieldPos <span class="token operator">=</span> parallax<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>  <span class="token keyword">var</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> fieldPos<span class="token punctuation">.</span>top<span class="token punctuation">;</span>  <span class="token keyword">var</span> newX <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> halfFieldWidth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> newY <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> halfFieldHeight<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> waveElements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.parallax [class*="wave"]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  waveElements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">"translate3d("</span> <span class="token operator">+</span> index <span class="token operator">*</span> newX <span class="token operator">+</span> <span class="token string">"px,"</span> <span class="token operator">+</span> index <span class="token operator">*</span> newY <span class="token operator">+</span> <span class="token string">"px,0px"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">stopParallax</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> waveElements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.parallax [class*="wave"]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    waveElements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">"translate(0px, 0px)"</span><span class="token punctuation">;</span>      element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">"all 0.7s"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      waveElements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"not-found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> parallax<span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"not-found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseleave"</span><span class="token punctuation">,</span> stopParallax<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改步骤"><a href="#修改步骤" class="headerlink" title="修改步骤"></a>修改步骤</h2><ol><li><p>将原来source目录下的404.md文件删除，新建404.ejs</p><p>原404.md代码：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml">title: 404date: 2019-07-19 16:41:10type: "404"layout: "404"description: "你似乎来到了没有知识的荒原~~~"</span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>404.ejs：将上面的<code>HTML代码</code>粘贴到<code>404.ejs</code> 文件中</p></li><li><p><strong>将CSS代码添加到主题中：</strong></p><ul><li>在matery&#x2F;source&#x2F;css下，新建404.css，把上面的<code>css代码</code>粘贴到里面</li><li>将404.css添加到<code>Matery/_config.yml</code>的样式表中</li></ul></li><li><p><strong>将JS代码添加到主题中：</strong></p><ul><li>matery&#x2F;source&#x2F;js下，新建404.js，把上面的<code>js代码</code>粘贴到其中</li><li>将404.css添加到<code>Matery/_config.yml</code>的样式表中</li></ul></li><li><p><strong>配置主题以使用404页面：</strong></p><ul><li>打开Hexo博客根目录下的 <code>_config.yml</code> 文件。</li><li>在该文件中找到主题配置项，通常是 <code>theme: matery</code></li><li>查找是否有配置项用于指定404页面，或者类似的配置。如果有，将其设置为 <code>404.ejs</code> 或你的自定义404页面文件名。</li></ul></li><li><p><strong>重新生成并部署博客：</strong></p><p>运行以下命令重新生成并部署Hexo博客：</p><pre class="line-numbers language-none"><code class="language-none">hexo cleanhexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>刷新你的博客，现在应该能够看到自定义的404页面了。</p></li></ol><h2 id="理解HTTP状态码"><a href="#理解HTTP状态码" class="headerlink" title="理解HTTP状态码"></a>理解HTTP状态码</h2><h3 id="信息响应（100–199）"><a href="#信息响应（100–199）" class="headerlink" title="信息响应（100–199）"></a>信息响应（100–199）</h3><ul><li><p><strong>100 Continue（继续）</strong>：服务器已收到请求头，客户端应继续发送请求体。</p></li><li><p><strong>101 Switching Protocols（切换协议）</strong>：请求者要求服务器切换协议。</p></li></ul><h3 id="成功响应（200–299）"><a href="#成功响应（200–299）" class="headerlink" title="成功响应（200–299）"></a>成功响应（200–299）</h3><ul><li><p><strong>200 OK（成功）</strong>：请求成功。</p></li><li><p><strong>201 Created（已创建）</strong>：请求成功，并创建了新的资源。</p></li><li><p><strong>204 No Content（无内容）</strong>：服务器成功处理请求，但没有额外的内容要发送。</p></li></ul><h3 id="重定向消息（300–399）"><a href="#重定向消息（300–399）" class="headerlink" title="重定向消息（300–399）"></a>重定向消息（300–399）</h3><ul><li><p><strong>301 Moved Permanently（永久移动）</strong>：所请求的资源已被永久移动。</p></li><li><p><strong>302 Found（或307 Temporary Redirect）</strong>：所请求的资源暂时存放在不同的URI下。</p></li><li><p><strong>304 Not Modified（未修改）</strong>：自请求指定的版本以来，资源未被修改。</p></li></ul><h3 id="客户端错误响应（400–499）"><a href="#客户端错误响应（400–499）" class="headerlink" title="客户端错误响应（400–499）"></a>客户端错误响应（400–499）</h3><ul><li><p><strong>400 Bad Request（错误请求）</strong>：服务器无法理解请求。</p></li><li><p><strong>401 Unauthorized（未授权）</strong>：请求要求用户身份验证。</p></li><li><p><strong>403 Forbidden（禁止）</strong>：服务器理解请求，但拒绝授权。</p></li><li><p><strong>404 Not Found（未找到）</strong>：服务器未找到请求的资源。</p></li><li><p><strong>405 Method Not Allowed（方法禁用）</strong>：请求中指定的方法不被允许。</p></li><li><p><strong>408 Request Timeout（请求超时）</strong>：服务器等待请求时发生超时。</p></li></ul><h3 id="服务器错误响应（500–599）"><a href="#服务器错误响应（500–599）" class="headerlink" title="服务器错误响应（500–599）"></a>服务器错误响应（500–599）</h3><ul><li><p><strong>500 Internal Server Error（服务器内部错误）</strong>：遇到意外条件，服务器无法完成请求。</p></li><li><p><strong>502 Bad Gateway（错误网关）</strong>：服务器作为网关或代理时，从上游服务器接收到无效的响应。</p></li><li><p><strong>503 Service Unavailable（服务不可用）</strong>：服务器暂时无法处理请求。</p></li></ul><p>参考文章：<a href="https://www.52txr.cn/2022/404html.html">好看的404模板</a></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过了解HTTP状态码并创建自定义404错误页面，您可以提升用户体验，留住访客，并减轻网站死链对用户的影响。定期监测网站错误并根据需要更新404页面。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>如果是新建 <code>404.html</code> 文件的话，是可以进行本地预览的。但是这个预览不能使用 <code>http://localhost:4000/任意字符</code> 来查看，必须使用 <code>http://localhost:4000/404</code> 来进行本地预览</p><h2 id="更多模版"><a href="#更多模版" class="headerlink" title="更多模版"></a>更多模版</h2><p><a href="https://frontendin.com/404-page-templates-on-codepen/?amp=1">404模版展示及源码</a></p><h2 id="修改前代码"><a href="#修改前代码" class="headerlink" title="修改前代码"></a>修改前代码</h2><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>404 Andrew Lawendy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- &lt;link rel="stylesheet" href="https://rsupanta-weather.herokuapp.com/css/404.css"> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../themes/matery/source/css/404.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>not-found parallax<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sky-bg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-island<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://haiyongcsdn.gitee.io/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://res.cloudinary.com/andrewhani/image/upload/v1524501929/404/island.svg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Island<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-lost wrp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-boat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>boat<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://res.cloudinary.com/andrewhani/image/upload/v1524501894/404/boat.svg<span class="token punctuation">"</span></span>                <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Boat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wave-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Your're lost<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Click on the island to return<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- &lt;script src="https://rsupanta-weather.herokuapp.com/js/404.js">&lt;/script> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../themes/matery/source/js/404.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 404 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenMP</title>
      <link href="/posts/8905.html"/>
      <url>/posts/8905.html</url>
      
        <content type="html"><![CDATA[<h1 id="OpenMP"><a href="#OpenMP" class="headerlink" title="OpenMP"></a>OpenMP</h1><h2 id="OpenMP介绍"><a href="#OpenMP介绍" class="headerlink" title="OpenMP介绍"></a>OpenMP介绍</h2><p>在C&#x2F;C++中，OpenMP可以通过使用预处理指令来让程序并行化。OpenMP指令使用的格式为:</p><pre class="line-numbers language-none"><code class="language-none">#pragma omp 指令 [子句[子句]…]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面是一个最简单的OpenMP程序，可以运行后观察结果与普通程序有什么不同。</p><p>请在适当的位置填上<code>#pragma omp parallel for</code> 使程序并行执行。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">// YOUR CODE HERE</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> </span></span><span class="token comment">// END OF YOUR CODE</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">i &#x3D; 2i &#x3D; 0i &#x3D; 6i &#x3D; 1i &#x3D; 8i &#x3D; 5i &#x3D; 4i &#x3D; 7i &#x3D; 9i &#x3D; 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fork-join并行执行模式的概念"><a href="#fork-join并行执行模式的概念" class="headerlink" title="fork&#x2F;join并行执行模式的概念"></a>fork&#x2F;join并行执行模式的概念</h2><p>OpenMP是一套用于共享内存并行系统的多处理器程序设计的指导性的编译处理方案，从之前的介绍我们可以发现程序还是在循环结束之后才运行return 0语句，因此可以推断OpenMP并行执行的程序要全部结束后才会运行后面非并行部分的代码，这就是fork&#x2F;join并行模式。以上结论可以从示例代码中体现。</p><p>请在适当的位置填上<code>#pragma omp parallel for </code>使程序并行执行。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">Time &#x3D; 159Time &#x3D; 161Total time &#x3D; 162<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1e8</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> t1 <span class="token operator">=</span> <span class="token function">omp_get_wtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// your code</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span></span></span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">double</span> t2 <span class="token operator">=</span> <span class="token function">omp_get_wtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Total time = %f seconds\n"</span><span class="token punctuation">,</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="parallel-指令"><a href="#parallel-指令" class="headerlink" title="parallel 指令"></a>parallel 指令</h2><p><code>#pragma omp parallel</code> 是 OpenMP 中用于创建并行区域（parallel region）的指令，它可以搭配 <code>for</code> 或 <code>sections</code> 以及其他子句来实现不同的并行操作。</p><p>这个指令的作用是创建一个并行区域，在这个区域中的代码可以被多个线程同时执行，以充分利用多核处理器的性能优势。</p><p>下面是对 <code>#pragma omp parallel</code> 的详细解释和示例用法：</p><ul><li><p><strong>解释</strong>：</p><ul><li><code>#pragma omp</code> 是 OpenMP 指令的前缀，用于指示编译器执行并行化操作。</li><li><code>parallel</code> 指令用于创建一个并行区域，其中的代码可以由多个线程同时执行。</li><li>在并行区域中的代码将会被多个线程执行，每个线程都将执行相同的代码。每个线程都将执行这段代码，并行地进行计算，直到并行区域结束为止。</li><li>在并行区域内部的变量具有不同的作用域。比如在每个线程中，变量的值是独立的，每个线程都有自己的变量实例。</li><li>默认情况下，线程数量由系统决定，但也可以通过设置 <code>OMP_NUM_THREADS</code> 环境变量或调用 <code>omp_set_num_threads()</code> 函数来指定线程数量。</li></ul></li><li><p><strong>作用</strong>：</p><ul><li>创建一个并行区域，使其中的代码能够在多个线程中并行执行，充分利用多核处理器的性能。</li><li>用于并行化一段代码，使其能够在多个线程中同时执行，加快程序的执行速度。</li></ul></li><li><p><strong>用法</strong>：</p><ul><li><p>需要注意的是，<code>#pragma omp parallel</code> 只是创建一个并行区域，不会自动对代码进行并行化。在这个并行区域中的代码将被多个线程执行，但如果没有进一步的指示，代码仍然是串行执行的。因此，为了实现真正的并行化，需要结合其他 OpenMP 指令（比如 <code>for</code> 循环的 <code>parallel for</code> 或 <code>parallel sections</code>）来并行执行具体的任务。</p></li><li><p>与一段代码块配合使用，可以是复合语句、函数或一个 <code>for</code> 循环。</p></li><li><p><code>#pragma omp parallel</code> 可以与不同的子句一起使用，比如 <code>for</code> 或 <code>sections</code>，并可以添加其他子句来调整并行区域的行为。</p></li><li><p>示例1：与 <code>for</code> 结合使用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span></span></span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 并行执行的 for 循环代码</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种用法将一个 <code>for</code> 循环中的迭代分配给多个线程并行执行。</p></li><li><p>示例2：与 <code>sections</code> 结合使用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel sections</span></span><span class="token punctuation">&#123;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp section</span></span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 第一个部分的代码</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp section</span></span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 第二个部分的代码</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种用法将不同的代码部分分配给不同的线程并行执行，每个 <code>section</code> 内的代码将在独立的线程中执行。</p></li></ul></li><li><p><strong>其他子句</strong>：</p><ul><li><p>可以在 <code>#pragma omp parallel</code> 后添加其他子句来调整并行区域的行为。比如设置线程数量、私有变量等等。例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token function">num_threads</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token function">private</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>num_threads(4)</code>：指定并行区域中的线程数量为4。</li><li><code>private(x)</code>：指定变量 <code>x</code> 在每个线程中是私有的，每个线程有自己的 <code>x</code> 变量实例。</li></ul></li></ul></li></ul><p><code>#pragma omp parallel</code> 创建的并行区域中的代码将会在多个线程间并行执行。在并行区域中的变量可能具有不同的作用域和共享性质，需要小心处理共享变量可能引发的竞态条件和数据同步问题。</p><h3 id="超算习堂"><a href="#超算习堂" class="headerlink" title="超算习堂"></a>超算习堂</h3><p>parallel 是构造并行块的一个指令，同时也可以配合其他指令如for, sections等指令一起使用。在这个指令后面需要使用一对大括号来指定需要并行计算的代码。</p><pre class="line-numbers language-none"><code class="language-none">#pragma omp parallel [for | sections] [子句[子句]…] &#123; &#x2F;&#x2F;并行部分 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过实例代码我们可以看出并行部分创建出了多个线程来完成。</p><p>请在适当的位置填上<code>#pragma omp parallel num_threads(6)</code> 使程序并行执行。</p><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">Thread: 0Thread: 2Thread: 1Thread: 3Thread: 4Thread: 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// YOUR CODE HERE</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token function">num_threads</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> </span></span><span class="token comment">// END OF YOUR CODE</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread: %d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="for-指令"><a href="#for-指令" class="headerlink" title="for 指令"></a>for 指令</h2><p>在 OpenMP 中，<code>for</code> 循环通常与 <code>#pragma omp parallel for</code> 结合使用，将一个 <code>for</code> 循环中的迭代任务分配给多个线程并行执行。用于在循环中实现并行化，允许将一个普通的for循环转换为一个并行化的for循环，从而提高程序的执行效率。这样可以有效地利用多核处理器的性能，加速循环中的计算。</p><p>以下是对 <code>#pragma omp parallel for</code> 的详细解释和使用方法：</p><ul><li><p><strong>语法</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span></span></span><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化语句； 循环条件； 更新语句<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 循环体</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>作用</strong>：</p><ul><li>将一个 <code>for</code> 循环中的迭代任务分配给多个线程并行执行，加速循环的运行。</li><li>通常用于对大型迭代进行并行化处理，例如遍历数组、矩阵运算等。</li></ul></li><li><p><strong>用法</strong>：</p><ul><li><p><code>#pragma omp parallel for</code> 用于并行化一个 <code>for</code> 循环，用法示例如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span></span></span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 并行执行的 for 循环体代码</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个指令将 <code>for</code> 循环中的迭代任务平均地分配给多个线程，每个线程执行一部分迭代。循环迭代会被分成多个块，每个线程执行其中的一个块。</p><p>例如，我们有一个计算数组元素平方和的简单任务，可以使用<code>#pragma omp parallel for</code>将其并行化：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;omp.h&gt;int main() &#123;const int N &#x3D; 1000;double sum &#x3D; 0.0;double arr[N];&#x2F;&#x2F; 初始化数组for (int i &#x3D; 0; i &lt; N; ++i) &#123;  arr[i] &#x3D; static_cast&lt;double&gt;(i);&#125;&#x2F;&#x2F; 使用#pragma omp parallel for进行并行化#pragma omp parallel for reduction(+:sum)for (int i &#x3D; 0; i &lt; N; ++i) &#123;  sum +&#x3D; arr[i] * arr[i];&#125;std::cout &lt;&lt; &quot;Sum of squares: &quot; &lt;&lt; sum &lt;&lt; std::endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，我们使用了<code>reduction(+:sum)</code>子句来指定如何合并多个线程的结果。这样，每个线程都会计算其部分元素的平方和，并将结果累加到全局变量<code>sum</code>中。最后，主线程会输出整个数组元素平方和的结果。</p></li></ul></li><li><p><strong>注意事项</strong>：</p><ul><li>在使用 <code>#pragma omp parallel for</code> 时，循环变量（如上例中的 <code>i</code>）必须是迭代变量。OpenMP 将根据迭代变量自动进行任务分配。</li><li>循环的迭代次数应该足够大，以便在多个线程之间实现有效的并行执行。如果循环迭代次数太小，则并行化的开销可能超过了并行执行所带来的性能提升。</li></ul></li><li><p><strong>其他子句</strong>：</p><ul><li><p>可以使用其他 OpenMP 子句来进一步控制并行化的行为，例如指定私有变量、指定线程数量、设置线程绑定等。例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">num_threads</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token function">private</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span></span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>num_threads(4)</code>：指定并行区域中的线程数量为4。</li><li><code>private(x)</code>：指定变量 <code>x</code> 在每个线程中是私有的，每个线程有自己的 <code>x</code> 变量实例。</li></ul></li></ul></li></ul><p><code>#pragma omp parallel for</code> 的使用可以显著提高循环迭代的效率，但需要注意并行化可能引入的数据竞争和同步问题，特别是对于共享变量的操作需要进行合适的同步控制。</p><h3 id="超算习堂-1"><a href="#超算习堂-1" class="headerlink" title="超算习堂"></a>超算习堂</h3><p>for指令的作用是使一个for循环在多个线程中执行，一般for指令会与parallel指令同时使用，即parallel for指令。此外还可以在parallel指令的并行块中单独使用，在一个并行块中可以使用多个for指令。但是单独使用for指令是没有效果的。</p><p>请在适当的位置使用for指令使程序并行执行。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel </span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>                <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp <span class="token keyword">for</span> <span class="token function">private</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span></span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp <span class="token keyword">for</span> <span class="token function">private</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span></span></span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"j = %d\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">i &#x3D; 1i &#x3D; 0i &#x3D; 4i &#x3D; 3i &#x3D; 2j &#x3D; 0j &#x3D; 2j &#x3D; 1j &#x3D; 3j &#x3D; 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sections和section指令"><a href="#sections和section指令" class="headerlink" title="sections和section指令"></a>sections和section指令</h2><p>在 OpenMP 中，<code>#pragma omp sections</code> 和 <code>#pragma omp section</code> 是用于并行化代码的指令，允许将不同的代码部分分配给不同的线程并行执行。这种并行化模式允许多个线程同时执行各自的代码段，可以提高程序的效率。</p><p>以下是对 <code>#pragma omp sections</code> 和 <code>#pragma omp section</code> 的详细解释和用法：</p><ul><li><p><strong>作用</strong>：</p><ul><li><code>#pragma omp sections</code> 用于创建一个并行区域，内部包含多个 <code>section</code>，每个 <code>section</code> 中的代码可以由不同的线程并行执行。</li><li><code>#pragma omp section</code> 用于定义 <code>sections</code> 区域中的一个具体代码段。</li></ul></li><li><p><strong>用法</strong>：</p><ul><li><p><code>#pragma omp sections</code> 必须与多个 <code>#pragma omp section</code> 结合使用，代码示例如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel</span></span><span class="token punctuation">&#123;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp sections</span></span>    <span class="token punctuation">&#123;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp section</span></span>        <span class="token punctuation">&#123;</span>            <span class="token comment">// 第一个 section 的代码</span>            <span class="token comment">// ...</span>        <span class="token punctuation">&#125;</span>                <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp section</span></span>        <span class="token punctuation">&#123;</span>            <span class="token comment">// 第二个 section 的代码</span>            <span class="token comment">// ...</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 可以有更多的 sections</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种用法将 <code>sections</code> 区域内的代码分成多个 <code>section</code>，每个 <code>section</code> 中的代码会被不同的线程并行执行。</p></li></ul></li><li><p><strong>特点</strong>：</p><ul><li>每个 <code>section</code> 中的代码都是独立执行的，各个 <code>section</code> 之间的执行顺序不确定，取决于系统调度和线程完成任务的时间。</li><li><code>sections</code> 区域中的线程数目与 <code>section</code> 的数目无关，OpenMP 会自动决定线程分配情况。</li></ul></li><li><p><strong>注意事项</strong>：</p><ul><li>每个 <code>section</code> 都应该是互相独立的任务单元，不应该有共享变量的修改或者依赖关系，以免引起竞态条件或死锁等问题。</li><li><code>sections</code> 区域中的每个 <code>section</code> 可能会被不同的线程执行，因此要确保每个 <code>section</code> 的执行是独立的，不会相互影响。</li></ul></li></ul><p><code>#pragma omp sections</code> 和 <code>#pragma omp section</code> 适用于将程序中的不同任务并行化执行，特别适用于任务间没有数据依赖性的情况。通过这种方式，可以提高程序的效率和性能，充分利用多核处理器的优势。</p><p>sections语句可以将下面的代码分成不同的分块，通过section指令来指定分块。每一个分块都会并行执行，具体格式：<br>#pragma omp [parallel] sections [子句]<br>{<br>    #pragma omp section<br>    {<br>        &#x2F;&#x2F;代码<br>    }<br>…<br>}</p><p>请在适当的位置填上使用sections指令使程序并行执行</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel sections</span></span>    <span class="token punctuation">&#123;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp section </span></span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Section 1 ThreadId = %d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 某些代码任务</span>        <span class="token punctuation">&#125;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp section</span></span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Section 2 ThreadId = %d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 可能的合并任务或其他处理</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">Section 2 ThreadId &#x3D; 1Section 1 ThreadId &#x3D; 0Section 4 ThreadId &#x3D; 3Section 3 ThreadId &#x3D; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="private-子句"><a href="#private-子句" class="headerlink" title="private 子句"></a>private 子句</h2><p>在 OpenMP 中，<code>private</code> 子句用于指定变量在并行区域中的私有性质。这意味着每个线程都会拥有该变量的一个私有副本，而不是共享同一个变量副本。这样可以避免多个线程同时访问和修改同一个变量引发的竞态条件问题。</p><p>以下是对 <code>private</code> 子句的详细解释和用法：</p><ul><li><p><strong>作用</strong>：</p><ul><li>在并行区域中，将变量指定为私有的，以确保每个线程都拥有自己的变量副本。</li><li>避免多个线程对同一个变量进行并发读写而导致的数据混乱或不确定的结果。</li></ul></li><li><p><strong>用法</strong>：</p><ul><li><p>在 OpenMP 指令中，通过 <code>private</code> 子句来指定私有变量，例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token function">private</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span></span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// i 和 j 变量在并行区域中是私有的</span>    <span class="token comment">// 每个线程都会有自己的 i 和 j 副本</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>i</code> 和 <code>j</code> 变量被指定为私有变量，每个线程都会有自己的 <code>i</code> 和 <code>j</code> 的副本。任何在并行区域内声明的变量默认情况下都是共享的，使用 <code>private</code> 子句可以将其设为私有。</p></li></ul></li><li><p><strong>作用范围</strong>：</p><ul><li><code>private</code> 子句可以在不同的 OpenMP 指令中使用，比如 <code>parallel</code>, <code>for</code>, <code>sections</code> 等，并且可以在同一个指令块中同时指定多个私有变量。</li><li>如果在循环并行化 <code>for</code> 中使用了 <code>private</code> 子句，则循环索引变量通常需要被指定为私有变量。</li></ul></li><li><p><strong>注意事项</strong>：</p><ul><li>私有变量仅在并行区域中是私有的，出了并行区域后，变量仍然是原来的共享状态。</li><li>被指定为私有的变量需要在每个线程中进行初始化。因为每个线程都有自己的变量副本，变量值在不同线程中是独立的。</li></ul></li></ul><p><code>private</code> 子句是用于控制变量私有性的重要工具，在多线程并行编程中经常用于避免共享变量带来的并发访问问题，确保程序的正确性和可靠性。</p><p>private 子句可以将变量声明为线程私有，声明称线程私有变量以后，每个线程都有一个该变量的副本，线程之间不会互相影响，其他线程无法访问其他线程的副本。原变量在并行部分不起任何作用，也不会受到并行部分内部操作的影响。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">private</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 手动更新循环外的 i</span>    <span class="token comment">// 得到最后一个并行循环中的 i 值</span>    i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"outside i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">i &#x3D; 0i &#x3D; 2i &#x3D; 1i &#x3D; 4i &#x3D; 3i &#x3D; 5i &#x3D; 6i &#x3D; 7i &#x3D; 9i &#x3D; 8outside i &#x3D; 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="firstprivate子句"><a href="#firstprivate子句" class="headerlink" title="firstprivate子句"></a>firstprivate子句</h5><p><code>firstprivate</code> 子句是 OpenMP 中用于指定并行区域中变量的初始私有值的一种指令。它用于保留变量在并行区域外的初始值，并将其作为每个线程私有变量的初始值，以便在并行执行过程中使用。</p><p>以下是 <code>firstprivate</code> 子句的用法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token function">firstprivate</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span></span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// x 变量在并行区域中是私有的，并且每个线程都有一个私有副本</span>        <span class="token comment">// 初始值是 x 在并行区域外的初始值（5）</span>                <span class="token comment">// 在并行区域内修改 x 的值</span>        x <span class="token operator">+=</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread %d: x = %d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 在并行区域外打印 x 的值，值仍然为初始值（5）</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"After parallel region: x = %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>firstprivate(x)</code> 将变量 <code>x</code> 指定为私有变量，并且每个线程都有自己的私有副本，初始值为并行区域外 <code>x</code> 的初始值（5）。在并行区域内，每个线程将 <code>x</code> 的值增加了当前线程编号 <code>omp_get_thread_num()</code>，然后输出结果。</p><p>值得注意的是，虽然并行区域内对 <code>x</code> 进行了修改，但在并行区域外，<code>x</code> 的值仍然保持初始值，不受并行区域内修改的影响。这是因为 <code>firstprivate</code> 子句保留了变量在并行区域外的初始值，并在并行区域内每个线程都有一个私有的初始值副本，不会影响到外部的 <code>x</code>。</p><p>private子句不能继承原变量的值，但是有时我们需要线程私有变量继承原来变量的值，这样我们就可以使用firstprivate子句来实现。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> i<span class="token punctuation">;</span><span class="token comment">// YOUR CODE HERE</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">firstprivate</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span></span><span class="token comment">// END OF YOUR CODE</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>t <span class="token operator">+=</span> i<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"t = %d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"outside t = %d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">t &#x3D; 20t &#x3D; 21t &#x3D; 23t &#x3D; 24t &#x3D; 22outside t &#x3D; 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="lastprivate子句"><a href="#lastprivate子句" class="headerlink" title="lastprivate子句"></a>lastprivate子句</h5><p><code>lastprivate</code> 子句是 OpenMP 中用于指定并行循环或区域结束后，从多个线程中获取最后一个迭代的变量值，并将其赋值给指定变量的一种指令。</p><p>以下是 <code>lastprivate</code> 子句的用法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> last_val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">lastprivate</span><span class="token punctuation">(</span>last_val<span class="token punctuation">)</span></span></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        last_val <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread %d: i = %d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 在并行循环结束后，获取最后一个迭代的值赋给 last_val</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Last value after parallel region: %d\n"</span><span class="token punctuation">,</span> last_val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>lastprivate(last_val)</code> 将变量 <code>last_val</code> 指定为 <code>lastprivate</code> 变量。在并行循环中，每个线程都有一个私有的 <code>last_val</code> 变量，但最终会从多个线程中获取最后一个迭代的值，并将该值赋给外部的 <code>last_val</code>。</p><p>请注意，<code>lastprivate</code> 子句只对循环结束后的最后一个迭代有效。在并行循环执行期间，每个线程都会在自己的 <code>last_val</code> 中存储最后一个迭代的值，但只有在并行区域结束后，会将最后一个迭代的值赋给外部的 <code>last_val</code>。</p><p>这对于需要在并行循环结束后获取最后一个迭代的值并继续使用的情况非常有用，例如需要保留并利用并行循环中最后一个迭代的结果。</p><p>除了在进入并行部分时需要继承原变量的值外，有时我们还需要再退出并行部分时将计算结果赋值回原变量，lastprivate子句就可以实现这个需求。<br>需要注意的是，根据OpenMP规范，在循环迭代中，是最后一次迭代的值赋值给原变量；如果是section结构，那么是程序语法上的最后一个section语句赋值给原变量。<br>如果是类(class)变量作为lastprivate的参数时，我们需要一个缺省构造函数，除非该变量也作为firstprivate子句的参数；此外还需要一个拷贝赋值操作符。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> i<span class="token punctuation">;</span><span class="token comment">// YOUR CODE HERE</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">firstprivate</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">lastprivate</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span></span><span class="token comment">// END OF YOUR CODE</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>t <span class="token operator">+=</span> i<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"t = %d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"outside t = %d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">t &#x3D; 20t &#x3D; 22t &#x3D; 24t &#x3D; 21t &#x3D; 23outside t &#x3D; 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="threadprivate子句"><a href="#threadprivate子句" class="headerlink" title="threadprivate子句"></a>threadprivate子句</h5><p><code>threadprivate</code> 是 OpenMP 中用于指定全局变量在每个线程中具有自己的私有副本的指令。通常，全局变量在并行区域中是共享的，所有线程都能访问和修改它。但有时，我们需要在每个线程中拥有自己的变量副本，以便不同线程之间的修改不会相互影响。</p><p><code>threadprivate</code> 的用法如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token comment">// 定义一个全局变量，在每个线程中将拥有自己的私有副本</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp <span class="token function">threadprivate</span><span class="token punctuation">(</span>global_var<span class="token punctuation">)</span></span></span><span class="token keyword">int</span> global_var<span class="token punctuation">;</span> <span class="token comment">// 全局变量</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    global_var <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量的初始值</span>        <span class="token comment">// 启动并行区域，多个线程同时访问 global_var</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel</span></span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 每个线程都会有一个私有的 global_var</span>        global_var <span class="token operator">+=</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread %d: global_var = %d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> global_var<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>global_var</code> 是一个全局变量，但使用了 <code>#pragma omp threadprivate(global_var)</code> 指令，因此在每个线程中都会有一个 <code>global_var</code> 的私有副本。每个线程对 <code>global_var</code> 进行操作时都在自己的私有副本上进行，不会相互干扰。</p><p>值得注意的是，<code>threadprivate</code> 用于指定全局变量在每个线程中具有自己的私有副本。这样的话，每个线程都有一个与其他线程独立的变量副本，它们互不干扰。</p><p>threadprivate子句可以将一个变量复制一个私有的拷贝给各个线程，即各个线程具有各自私有的全局对象。<br>格式：#pragma omp threadprivate(list)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> g <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp <span class="token function">threadprivate</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> i<span class="token punctuation">;</span><span class="token comment">// YOUR CODE HERE</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel</span></span><span class="token comment">// END OF YOUR CODE</span><span class="token punctuation">&#123;</span>g <span class="token operator">=</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel</span></span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread id: %d g: %d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">thread id: 1 g: 1thread id: 5 g: 5thread id: 2 g: 2thread id: 3 g: 3thread id: 6 g: 6thread id: 4 g: 4thread id: 0 g: 0thread id: 7 g: 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="shared子句"><a href="#shared子句" class="headerlink" title="shared子句"></a>shared子句</h2><p>在 OpenMP 中，<code>shared</code> 子句用于指定变量在并行区域中的共享性质。共享变量是所有线程共同访问和修改的变量。使用 <code>shared</code> 子句可以将变量显式地声明为共享变量，以确保所有线程在并行区域中都使用同一个变量副本。</p><p>以下是对 <code>shared</code> 子句的详细解释和用法：</p><ul><li><p><strong>作用</strong>：</p><ul><li>在并行区域中将变量指定为共享变量，以确保所有线程都共享同一个变量副本。</li><li>允许多个线程同时访问和修改变量的值，适用于线程之间需要共享信息的情况。</li></ul></li><li><p><strong>用法</strong>：</p><ul><li><p>在 OpenMP 指令中，通过 <code>shared</code> 子句将变量指定为共享变量，例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token function">shared</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span></span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// x 和 y 变量在并行区域中是共享的</span>    <span class="token comment">// 所有线程都使用同一个 x 和 y 变量副本</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>x</code> 和 <code>y</code> 变量被指定为共享变量，这意味着所有线程都会使用相同的 <code>x</code> 和 <code>y</code> 的副本。</p></li></ul></li><li><p><strong>默认共享性</strong>：</p><ul><li>在 OpenMP 中，默认情况下，在并行区域内声明的变量通常是共享的。因此，对于全局变量和在并行区域之外声明的变量，默认情况下是共享的。</li><li>局部变量默认情况下是私有的，每个线程都有自己的私有副本。</li></ul></li><li><p><strong>注意事项</strong>：</p><ul><li>共享变量可能存在并发访问的问题，需要注意线程之间的同步控制，避免出现数据竞争、不确定行为等问题。</li><li>如果变量在并行区域外被声明为共享的，需确保对其的访问是线程安全的，避免多个线程同时修改造成的问题。</li></ul></li></ul><p><code>shared</code> 子句用于控制变量在并行区域中的共享性质，可帮助开发者更清晰地表达并行代码中的共享数据。但需要特别注意共享变量的同步和互斥访问问题，以确保并行程序的正确性和可靠性。</p><p><code>shared</code> 子句是 OpenMP 中的一个指令，用于指定变量在并行区域中的共享性质。在并行区域内，<code>shared</code> 子句使得变量在不同线程之间共享同一个内存位置。</p><p>以下是 <code>shared</code> 子句的用法示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> shared_var <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 使用 shared 子句将 shared_var 变量指定为共享变量</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token function">shared</span><span class="token punctuation">(</span>shared_var<span class="token punctuation">)</span></span></span>    <span class="token punctuation">&#123;</span>        shared_var <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 所有线程共享同一个 shared_var 变量</span>                <span class="token comment">// 获取当前线程号和 shared_var 的值</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread %d: shared_var = %d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shared_var<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 在并行区域结束后，输出最终 shared_var 的值</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Final value of shared_var: %d\n"</span><span class="token punctuation">,</span> shared_var<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>#pragma omp parallel shared(shared_var)</code> 将 <code>shared_var</code> 变量指定为共享变量，这意味着在并行区域中，所有线程都将共享同一个 <code>shared_var</code> 变量。</p><p>在并行区域内，每个线程都可以访问并修改 <code>shared_var</code> 的值。因此，在示例中，每个线程都对 <code>shared_var</code> 执行了加一操作，并输出了当前线程号和 <code>shared_var</code> 的值。需要注意的是，由于所有线程共享同一个 <code>shared_var</code>，可能会发生竞争条件，需要谨慎处理并发修改。</p><p>最终输出的 <code>Final value of shared_var</code> 表示并行区域结束后的 <code>shared_var</code> 的值。由于多个线程共享该变量，因此最终结果取决于并发修改的顺序和操作。</p><p>Share子句可以将一个变量声明成共享变量，并且在多个线程内共享。需要注意的是，在并行部分进行写操作时，要求共享变量进行保护，否则不要随便使用共享变量，尽量将共享变量转换为私有变量使用。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> i<span class="token punctuation">;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">shared</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token function">private</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp atomic</span></span>            t<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d, t = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">i &#x3D; 0, t &#x3D; 21i &#x3D; 2, t &#x3D; 22i &#x3D; 9, t &#x3D; 23i &#x3D; 4, t &#x3D; 23i &#x3D; 8, t &#x3D; 25i &#x3D; 5, t &#x3D; 25i &#x3D; 7, t &#x3D; 24i &#x3D; 1, t &#x3D; 24i &#x3D; 3, t &#x3D; 24i &#x3D; 6, t &#x3D; 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reduction子句"><a href="#reduction子句" class="headerlink" title="reduction子句"></a>reduction子句</h2><p><code>reduction</code> 子句是 OpenMP 中用于对并行循环中的变量执行归约操作的一种指令。归约操作指将并行循环中多个线程的局部结果合并为一个最终结果的过程。这种操作通常用于对变量进行累加、求和、求积等聚合运算，以避免竞态条件并提高并行程序的性能。</p><p>以下是对 <code>reduction</code> 子句的详细解释和用法：</p><ul><li><p><strong>作用</strong>：</p><ul><li>在并行循环中对指定的变量执行归约操作，将多个线程的局部结果合并为一个最终结果。</li><li>常用于求和、求积、求最大值、最小值等聚合操作。</li></ul></li><li><p><strong>用法</strong>：</p><ul><li><p>在 OpenMP 中，<code>reduction</code> 子句用于声明进行归约操作的变量，例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">reduction</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token operator">:</span>sum<span class="token punctuation">)</span></span></span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sum <span class="token operator">+=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>reduction(+:sum)</code> 表示对变量 <code>sum</code> 执行归约操作，使用 <code>+</code> 操作符对局部结果进行累加。</p></li></ul></li><li><p><strong>支持的操作符</strong>：</p><ul><li><code>reduction</code> 子句支持多种操作符，常用的包括 <code>+</code>、<code>*</code>、<code>-</code>、<code>&amp;</code>、<code>|</code>、<code>^</code>、<code>&amp;&amp;</code>、<code>||</code>、<code>max</code>、<code>min</code> 等。具体支持的操作符取决于编译器和 OpenMP 的实现。</li></ul></li><li><p><strong>特点</strong>：</p><ul><li><code>reduction</code> 子句会自动为每个线程创建一个局部变量，每个线程对局部变量进行归约操作，最后将所有局部变量的结果合并得到最终结果。</li><li>在并行循环结束后，变量的值会被存储在原始变量中。</li></ul></li><li><p><strong>示例</strong>：</p><ul><li><p>对数组中元素求和的示例代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">reduction</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token operator">:</span>sum<span class="token punctuation">)</span></span></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sum = %d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>reduction(+:sum)</code> 表示对变量 <code>sum</code> 执行累加操作，将各个线程的局部累加结果最后合并到 <code>sum</code> 中。</p></li></ul></li></ul><p><code>reduction</code> 子句是一个强大的工具，能够简化对并行循环中变量的归约操作，提高并行程序的性能，减少了手动同步和合并的复杂度。</p><p><code>reduction</code> 子句是 OpenMP 中用于执行并行归约操作的关键指令。它允许在并行循环中对指定的变量执行归约操作，并将各个线程的局部结果合并为一个最终结果。</p><p>以下是 <code>reduction</code> 子句的用法示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 使用 reduction 子句对 sum 变量执行归约操作</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">reduction</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token operator">:</span>sum<span class="token punctuation">)</span></span></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread %d: sum = %d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 在并行循环结束后，输出最终的 sum 值</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Final sum value after reduction: %d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>#pragma omp parallel for reduction(+:sum)</code> 将 <code>sum</code> 变量指定为 <code>+</code> 归约运算符的归约变量。在并行循环中，每个线程都有自己的 <code>sum</code> 变量，并行地对其进行累加操作。</p><p>关键点是 <code>reduction(+:sum)</code> 中的 <code>+</code> 表示进行求和操作，这意味着各个线程各自计算自己的局部和，并在循环结束时将所有局部和合并为一个最终的总和。这种归约操作确保了并行计算的正确性，最终得到了正确的总和结果。</p><p><code>reduction</code> 子句可以用于多种归约操作，如求和、乘积、最大值、最小值等。它提供了一种简洁而有效的方法来在并行计算中执行归约操作，以提高程序性能并确保计算的准确性。</p><p>reduction子句可以对一个或者多个参数指定一个操作符，然后每一个线程都会创建这个参数的私有拷贝，在并行区域结束后，迭代运行指定的运算符，并更新原参数的值。<br>私有拷贝变量的初始值依赖于redtution的运算类型。<br>具体用法如下<br>reduction(operator:list)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// YOUR CODE HERE</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">reduction</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token operator">:</span> sum<span class="token punctuation">)</span></span></span><span class="token comment">// END OF YOUR CODE</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> i<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum = %d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">0215457689sum &#x3D; 55<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="copyin子句"><a href="#copyin子句" class="headerlink" title="copyin子句"></a>copyin子句</h2><p><code>copyin</code> 子句是 OpenMP 中的一个指令，用于将数据从主线程复制到所有线程的私有副本中。它确保了并行区域中所有线程都使用相同的初始数据。</p><p>以下是 <code>copyin</code> 子句的简单示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> initial_data <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">// 使用 copyin 子句将 initial_data 数据复制到并行区域中的所有线程的私有副本</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token function">copyin</span><span class="token punctuation">(</span>initial_data<span class="token punctuation">)</span></span></span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取每个线程的私有副本的初始数据值</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread %d: initial_data = %d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> initial_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>#pragma omp parallel copyin(initial_data)</code> 将 <code>initial_data</code> 变量的值复制到所有线程的私有副本中，以确保在并行区域中每个线程都有相同的初始数据。</p><p>并行区域内的每个线程都可以访问私有副本的 <code>initial_data</code>，并且这些私有副本都具有相同的初始值。在示例中，每个线程打印了自己的线程编号和 <code>initial_data</code> 的值，这些值都是从主线程复制到各自私有副本的。</p><p>需要注意的是，<code>copyin</code> 子句通常用于确保并行区域中所有线程拥有相同的初始数据。</p><p>copyin子句可以将主线程中变量的值拷贝到各个线程的私有变量中，让各个线程可以访问主线程中的变量。<br>copyin的参数必须要被声明称threadprivate，对于类的话则并且带有明确的拷贝赋值操作符。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> g <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp <span class="token function">threadprivate</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> </span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span>   </span></span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>g <span class="token operator">=</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread %d, g = %d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"global g: %d\n"</span><span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// YOUR CODE HERE</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">copyin</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span></span></span><span class="token comment">// END OF YOUR CODE</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread %d, g = %d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">thread 0, g &#x3D; 0thread 1, g &#x3D; 1thread 2, g &#x3D; 2thread 3, g &#x3D; 3global g: 0thread 1, g &#x3D; 0thread 2, g &#x3D; 0thread 0, g &#x3D; 0thread 3, g &#x3D; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="static字句"><a href="#static字句" class="headerlink" title="static字句"></a>static字句</h2><p>在 OpenMP 中，<code>static</code> 字句用于指定并行循环中迭代变量的存储方式。它决定了迭代变量的存储分配方式和范围。</p><p>在 <code>parallel for</code> 循环中，迭代变量可以采用不同的存储方式，其中之一就是使用 <code>static</code> 字句。<code>static</code> 字句指定了在并行循环中，迭代变量的存储分配是静态的，即在编译时就进行分配。</p><p>以下是一个示例，展示了 <code>static</code> 字句的用法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment">// 使用 static 字句指定迭代变量 i 的存储分配方式为静态</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">)</span></span></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread %d: i = %d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>#pragma omp parallel for schedule(static)</code> 中的 <code>static</code> 字句指定了迭代变量 <code>i</code> 的存储分配方式为静态。这意味着在编译时，迭代变量 <code>i</code> 的内存空间将被分配，并在每个线程中都保持相同的内存位置。</p><p><code>static</code> 字句还可以与 <code>schedule</code> 指定循环迭代方式一起使用，比如 <code>schedule(static, chunk_size)</code>，这样可以进一步控制循环迭代的分块大小。</p><p>需要注意的是，<code>static</code> 字句是 OpenMP 中常用的一种迭代变量存储方式，它适用于并行循环中迭代变量访问频率较为均匀的情况。</p><p>当parallel for没有带schedule时，大部分情况下系统都会默认采用static调度方式。假设有n次循环迭代，t个线程，那么每个线程大约分到n&#x2F;t次迭代。这种调度方式会将循环迭代均匀的分布给各个线程，各个线程迭代次数可能相差1次。用法为schedule(method)。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">// YOUR CODE HERE</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">)</span></span></span><span class="token comment">// END OF YOUR CODE</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d, thread %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">i &#x3D; 0, thread 0i &#x3D; 4, thread 2i &#x3D; 1, thread 0i &#x3D; 7, thread 5i &#x3D; 8, thread 6i &#x3D; 2, thread 1i &#x3D; 9, thread 7i &#x3D; 3, thread 1i &#x3D; 5, thread 3i &#x3D; 6, thread 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Size参数的用法"><a href="#Size参数的用法" class="headerlink" title="Size参数的用法"></a>Size参数的用法</h5><p>在 OpenMP 的 <code>schedule</code> 指令中，<code>size</code> 参数用于指定分块的大小（chunk size），它影响了并行循环中迭代的分配方式。</p><p>在循环并行化中，通常迭代是分配给不同线程的。<code>size</code> 参数控制了每个线程获取的迭代次数。</p><p>当 <code>schedule</code> 指定为 <code>static</code> 或者 <code>dynamic</code> 时，<code>size</code> 参数可以用于控制分块的大小。当 <code>schedule</code> 设置为 <code>static</code> 时，<code>size</code> 指定的是每个线程被分配的迭代次数。在 <code>schedule(static, size)</code> 中，<code>size</code> 表示每个线程被分配的连续迭代次数。</p><p>示例如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment">// 使用 static 分配迭代</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread %d: i = %d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述示例中，<code>#pragma omp parallel for schedule(static, 3)</code> 指定了静态调度，每个线程被分配了大小为 3 的连续迭代。这样，10 个迭代会被分为三块（3, 3, 3, 1）分配给线程。</p><p>需要注意的是，<code>size</code> 参数的具体效果取决于实际问题的特征和硬件环境。在选择 <code>size</code> 参数时，应该根据问题的特性、数据大小和计算资源等因素进行调整，以获得最佳的性能。</p><p>在静态调度的时候，我们可以通过指定size参数来分配一个线程的最小迭代次数。指定size之后，每个线程最多可能相差size次迭代。可以推断出[0,size-1]的迭代是在第一个线程上运行，依次类推。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">// YOUR CODE HERE</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span></span><span class="token comment">// END OF YOUR CODE</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d, thread %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">i &#x3D; 6, thread 2i &#x3D; 3, thread 1i &#x3D; 4, thread 1i &#x3D; 0, thread 0i &#x3D; 5, thread 1i &#x3D; 9, thread 3i &#x3D; 1, thread 0i &#x3D; 7, thread 2i &#x3D; 2, thread 0i &#x3D; 8, thread 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="dynamic子句指令"><a href="#dynamic子句指令" class="headerlink" title="dynamic子句指令"></a>dynamic子句指令</h2><p>在 OpenMP 中，<code>schedule</code> 指令可用于指定并行循环中迭代的调度方式。<code>schedule(dynamic, chunk_size)</code> 是其中一种调度方式，其中的 <code>dynamic</code> 子句指示编译器以动态方式调度循环的迭代，<code>chunk_size</code> 表示每次分配给线程的迭代数量。</p><p>下面是一个示例，演示了 <code>schedule(dynamic, chunk_size)</code> 的用法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment">// 使用 dynamic 子句和 chunk_size 为 2 进行循环的动态调度</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">schedule</span><span class="token punctuation">(</span>dynamic<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread %d: i = %d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>#pragma omp parallel for schedule(dynamic, 2)</code> 指定了动态调度，每个线程会按需获取两个迭代。当一个线程完成它所分配的两个迭代后，它将获取更多的迭代。这种方式可在并行循环中实现更灵活的负载平衡，因为线程会动态地获取迭代，避免了静态分配中可能出现的某些线程处理的工作量较少而其他线程处理的工作量较多的情况。</p><p>需要注意的是，<code>schedule(dynamic, chunk_size)</code> 中的 <code>chunk_size</code> 决定了每次分配给线程的迭代数量。过小的 <code>chunk_size</code> 可能会增加调度开销，因此需要根据实际问题的特性和硬件环境进行调整以获取更好的性能。</p><p>动态分配是将迭代动态分配到各个线程，依赖于运行你状态来确定，所以我们无法像静态调度一样事先预计进程的分配。哪一个线程先启动，哪一个线程迭代多久，这些都取决于系统的资源和线程的调度。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">// YOUR CODE HERE</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">schedule</span><span class="token punctuation">(</span>dynamic<span class="token punctuation">)</span></span></span><span class="token comment">// END OF YOUR CODE</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d, thread %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">i &#x3D; 0, thread 0i &#x3D; 3, thread 3i &#x3D; 8, thread 3i &#x3D; 9, thread 7i &#x3D; 2, thread 1i &#x3D; 4, thread 4i &#x3D; 5, thread 5i &#x3D; 7, thread 0i &#x3D; 1, thread 2i &#x3D; 6, thread 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="omp-get-num-procs"><a href="#omp-get-num-procs" class="headerlink" title="omp_get_num_procs"></a>omp_get_num_procs</h2><p>返回调用函数时可用的处理器数目。<br>函数原型<br>int omp_get_num_procs(void)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_num_procs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel  </span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// YOUR CODE HERE</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_num_procs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// END OF YOUR CODE</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">888888888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="omp-get-num-threads"><a href="#omp-get-num-threads" class="headerlink" title="omp_get_num_threads"></a>omp_get_num_threads</h2><p>返回当前并行区域中的活动线程个数，如果在并行区域外部调用，返回1<br>int omp_get_num_threads(void)<br><em>注意：由于程序并行执行，每次输出的结果可能会有所区别。</em></p><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">188888888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-omp" data-language="omp"><code class="language-omp">#include &lt;stdio.h&gt;#include &lt;omp.h&gt;int main(int argc, char* argv[])&#123;printf(&quot;%d\n&quot;, omp_get_num_threads());#pragma omp parallel  &#123;   &#x2F;&#x2F; YOUR CODE HEREprintf(&quot;%d\n&quot;, omp_get_num_threads());&#x2F;&#x2F; YOUR CODE HERE&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="omp-get-thread-num"><a href="#omp-get-thread-num" class="headerlink" title="omp_get_thread_num"></a>omp_get_thread_num</h2><p>返回当前的线程号，注意不要和之前的omp_get_num_threads混淆。<br>函数原型<br>int omp_get_thread_num(void)<br><em>注意：由于程序并行执行，每次输出的结果可能会有所区别。</em></p><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">002134567<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-omp" data-language="omp"><code class="language-omp">#include &lt;stdio.h&gt;#include &lt;omp.h&gt;int main(int argc, char* argv[])&#123;printf(&quot;%d\n&quot;, omp_get_thread_num());#pragma omp parallel  &#123;        &#x2F;&#x2F; YOUR CODE HERE    printf(&quot;%d\n&quot;, omp_get_thread_num());    &#x2F;&#x2F; END OF YOUR CODE&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="omp-set-num-threads"><a href="#omp-set-num-threads" class="headerlink" title="omp_set_num_threads"></a>omp_set_num_threads</h2><p>设置进入并行区域时，将要创建的线程个数<br>函数原型<br>int omp_set_num_threads(void)<br><em>注意：由于程序并行执行，每次输出的结果可能会有所区别。</em></p><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">0 of 4 threads2 of 4 threads1 of 4 threads3 of 4 threads<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-omp" data-language="omp"><code class="language-omp">#include &lt;stdio.h&gt;#include &lt;omp.h&gt;int main(int argc, char* argv[])&#123;    &#x2F;&#x2F; YOUR CODE HERE    omp_set_num_threads(4);    &#x2F;&#x2F; END OF YOUR CODE#pragma omp parallel  &#123;printf(&quot;%d of %d threads\n&quot;, omp_get_thread_num(), omp_get_num_threads());&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="omp-in-parallel"><a href="#omp-in-parallel" class="headerlink" title="omp_in_parallel"></a>omp_in_parallel</h2><p>可以判断当前是否处于并行状态<br>函数原型<br>int omp_in_parallel();<br><em>注意：由于程序并行执行，每次输出的结果可能会有所区别。</em></p><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">01111<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-omp" data-language="omp"><code class="language-omp">#include &lt;stdio.h&gt;#include &lt;omp.h&gt;int main(int argc, char* argv[])&#123;printf(&quot;%d\n&quot;, omp_in_parallel());omp_set_num_threads(4);#pragma omp parallel  &#123;    &#x2F;&#x2F; YOUR CODE HEREprintf(&quot;%d\n&quot;, omp_in_parallel());    &#x2F;&#x2F; END OF YOUR CODE&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="omp-get-max-threads"><a href="#omp-get-max-threads" class="headerlink" title="omp_get_max_threads"></a>omp_get_max_threads</h2><p>该函数可以用于获得最大的线程数量，根据OpenMP文档中的规定，这个最大数量是指在不使用num_threads的情况下，OpenMP可以创建的最大线程数量。需要注意的是这个值是确定的，与它是否在并行区域调用没有关系。<br><em>注意：由于程序并行执行，每次输出的结果可能会有所区别。</em></p><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">84444<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-omp" data-language="omp"><code class="language-omp">#include &lt;stdio.h&gt;#include &lt;omp.h&gt;int main(int argc, char* argv[])&#123;    &#x2F;&#x2F; YOUR CODE HEREprintf(&quot;%d\n&quot;, omp_get_max_threads());&#x2F;&#x2F; END OF YOUR CODEomp_set_num_threads(4);#pragma omp parallel  &#123;printf(&quot;%d\n&quot;, omp_get_max_threads());&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="OpenMP中互斥锁"><a href="#OpenMP中互斥锁" class="headerlink" title="OpenMP中互斥锁"></a>OpenMP中互斥锁</h2><p>Openmp中有提供一系列函数来进行锁的操作，一般来说常用的函数的下面4个<br>void omp_init_lock(omp_lock*) 初始化互斥锁<br>void omp_destroy_lock(omp_lock*) 销毁互斥锁<br>void omp_set_lock(omp_lock*) 获得互斥锁<br>void omp_unset_lock(omp_lock*) 释放互斥锁<br><em>注意：由于程序并行执行，每次输出的结果可能会有所区别</em></p><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">0+0-1+1-4+4-2+2-3+3-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span><span class="token keyword">static</span> <span class="token class-name">omp_lock_t</span> lock<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token function">omp_init_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span>   </span></span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// YOUR CODE HERE</span><span class="token function">omp_set_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// END OF YOUR CODE</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d+\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-\n"</span><span class="token punctuation">,</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// YOUR CODE HERE</span><span class="token function">omp_unset_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// END OF YOUR CODE</span><span class="token punctuation">&#125;</span><span class="token function">omp_destroy_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="omp-test-lock"><a href="#omp-test-lock" class="headerlink" title="omp_test_lock"></a>omp_test_lock</h2><p>除了之前介绍的4个函数之外，与互斥锁的相关的函数还有一个，用来尝试获得锁。<br>该函数可以看作是omp_set_lock的非阻塞版本。<br>函数原型<br>bool omp_test_lock(omp_lock*)<br><em>注意：由于程序并行执行，每次输出的结果可能会有所区别</em></p><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">0+fail to get lockfail to get lockfail to get lock0-2+2-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-omp" data-language="omp"><code class="language-omp">#include &lt;stdio.h&gt;#include &lt;omp.h&gt;static omp_lock_t lock;int main(int argc, char* argv[])&#123;    int i;omp_init_lock(&amp;lock); #pragma omp parallel for   for (i &#x3D; 0; i &lt; 5; ++i)&#123;    &#x2F;&#x2F; YOUR CODE HEREif (omp_test_lock(&amp;lock))&#x2F;&#x2F; END OF YOUR CODE&#123;printf(&quot;%d+\n&quot;, omp_get_thread_num());printf(&quot;%d-\n&quot;, omp_get_thread_num());omp_unset_lock(&amp;lock);&#125;else&#123;printf(&quot;fail to get lock\n&quot;);&#125;&#125;omp_destroy_lock(&amp;lock);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="omp-set-dynamic"><a href="#omp-set-dynamic" class="headerlink" title="omp_set_dynamic"></a>omp_set_dynamic</h2><p>该函数可以设置是否允许在运行时动态调整并行区域的线程数。<br>函数原型：<br>void omp_set_dynamic(int)<br>当参数为0时，动态调整被禁用。<br>当参数为非0值时，系统会自动调整线程以最佳利用系统资源。<br><em>注意：由于程序并行执行，每次输出的结果可能会有所区别。</em></p><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">0123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-omp" data-language="omp"><code class="language-omp">#include &lt;stdio.h&gt;#include &lt;omp.h&gt;int main(int argc, char* argv[])&#123;    int i;    &#x2F;&#x2F; YOUR CODE HEREomp_set_dynamic(1);&#x2F;&#x2F; END OF YOUR CODE#pragma omp parallel forfor (i &#x3D; 0; i &lt; 4; i++)&#123;printf(&quot;%d\n&quot;, omp_get_thread_num());&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="omp-get-dynamic"><a href="#omp-get-dynamic" class="headerlink" title="omp_get_dynamic"></a>omp_get_dynamic</h2><p>该函数可以返回当前程序是否允许在运行时动态调整并行区域的线程数。<br>函数原型<br>int omp_get_dynamic()<br>当返回值为非0时表示允许系统动态调整线程。<br>当返回值为0时表示不允许。<br><em>注意：由于程序并行执行，每次输出的结果可能会有所区别。</em></p><p><strong>运行结果</strong></p><pre class="line-numbers language-none"><code class="language-none">01111<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-omp" data-language="omp"><code class="language-omp">#include &lt;stdio.h&gt;#include &lt;omp.h&gt;int main(int argc, char* argv[])&#123;    int i;printf(&quot;%d\n&quot;, omp_get_dynamic());omp_set_dynamic(1);#pragma omp parallel forfor (i &#x3D; 0; i &lt; 4; i++)&#123;    &#x2F;&#x2F; YOUR CODE HEREprintf(&quot;%d\n&quot;, omp_get_dynamic());&#x2F;&#x2F; END OF YOUR CODE&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pthreads</title>
      <link href="/posts/ef25.html"/>
      <url>/posts/ef25.html</url>
      
        <content type="html"><![CDATA[<h1 id="Pthreads"><a href="#Pthreads" class="headerlink" title="Pthreads"></a>Pthreads</h1><h2 id="创建和终止"><a href="#创建和终止" class="headerlink" title="创建和终止"></a>创建和终止</h2><p>本节展示了两个最基本的线程管理函数——创建与终止线程。</p><ul><li><code>pthread.h</code>头文件的引入</li><li><code>pthread_create</code>创建线程</li><li><code>pthread_exit</code>终止线程</li></ul><p>欢迎来到Posix Threads的世界。</p><p>为了编写Pthreads程序。首先，我们应包含头文件<code>&lt;pthread.h&gt;</code>。这个头文件包含了Pthreads程序的必要函数。</p><p>同时，我们也需要引入这些函数实现线程化的功能。</p><h3 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h3><p>创建线程</p><pre class="line-numbers language-none"><code class="language-none">int pthread_create(pthread_t * thread,    const pthread_attr_t * attr,   void * (*start_routine)(void *),    void *arg);参数：thread - 指向线程的指针。attr - 指向线程属性的指针。可设置为NULL。start_routine - 用于线程化的函数指针。arg - 指向函数参数的指针。返回值：线程标识id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pthread_create</code>是POSIX线程库中的一个函数，用于创建一个新的线程。它接受四个参数：</p><ol><li><code>pthread_t * thread</code>：这是一个指向<code>pthread_t</code>类型的指针，用于存储新创建的线程的标识符。</li><li><code>const pthread_attr_t * attr</code>：这是一个指向<code>pthread_attr_t</code>类型的指针，用于设置新线程的属性。如果设置为NULL，则使用默认属性。</li><li><code>void * (*start_routine)(void *)</code>：这是一个函数指针，指向新线程的入口点函数。这个函数将在新线程中执行。</li><li><code>void *arg</code>：这是传递给入口点函数的参数。</li></ol><p>函数返回0表示成功，非0表示失败。</p><p>退出线程</p><pre class="line-numbers language-none"><code class="language-none">void pthread_exit(void *retval);参数：retval - 指向线程返回值的指针。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>pthread_exit(void *retval)</code> 是一个用于终止线程的函数，它接受一个 <code>void *</code> 类型的参数 <code>retval</code>。当线程调用此函数时，它将立即返回，并将 <code>retval</code> 作为线程的退出状态传递给操作系统。</p><p><code>pthread_exit(void *retval);</code> 是一个用于终止线程的函数，它接受一个指向返回值的指针作为参数。当线程调用此函数时，它将立即终止，并将指定的返回值传递给调用者。</p><p>输出结果</p><blockquote><p>In main: creating thread 0<br>In main: creating thread 1<br>Hello World!<br>In main: creating thread 2<br>In main: creating thread 3<br>Hello World!<br>Hello World!<br>Hello World!</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_THREADS</span><span class="token expression"><span class="token number">4</span></span></span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">PrintHello</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>null<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">pthread_t</span> threads<span class="token punctuation">[</span>NUM_THREADS<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> rc<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> t<span class="token operator">&lt;</span>NUM_THREADS<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"In main: creating thread %d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//your code here</span>rc <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>threads<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> PrintHello<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//end of your code</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR; return code from pthread_create() is %d\n"</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="向线程传递参数-1"><a href="#向线程传递参数-1" class="headerlink" title="向线程传递参数(1)"></a>向线程传递参数(1)</h2><p>本节展示了最基本的线程创建，以及向线程传递单个参数的方法。</p><ul><li><code>pthread_create</code>创建线程</li><li><code>pthread_exit</code>终止线程</li></ul><p>本例用<code>pthread_create</code>创建了4个线程。</p><p>用于线程化的线程接收唯一一个参数。</p><p>每一个线程都会打印一条表明自己线程id的消息，然后调用<code>pthread_exit</code>终止线程。</p><p>输出结果</p><p>由于并行程序执行顺序的不确定性，你的结果的顺序可能和这个结果不一致。<br>为了比较输出结果，请将环境设置中的并行核数调为1。<br>本实验暂不支持性能评测。</p><blockquote><p>In main: creating thread 0<br>In main: creating thread 1<br>Hello World! It’s me, thread #0!<br>In main: creating thread 2<br>Hello World! It’s me, thread #1!<br>In main: creating thread 3<br>Hello World! It’s me, thread #2!<br>Hello World! It’s me, thread #3!</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_THREADS</span><span class="token expression"><span class="token number">4</span></span></span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">PrintHello</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>threadid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> tid<span class="token punctuation">;</span> tid <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>threadid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World! It's me, thread #%d!\n"</span><span class="token punctuation">,</span> tid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>threadid<span class="token punctuation">)</span><span class="token punctuation">;</span>threadid <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">pthread_t</span> threads<span class="token punctuation">[</span>NUM_THREADS<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> rc<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> t<span class="token operator">&lt;</span>NUM_THREADS<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"In main: creating thread %d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span><span class="token operator">*</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>id <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token comment">//your code here</span>rc <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>threads<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> PrintHello<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//end of your code</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR; return code from pthread_create() is %d"</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="向线程传递参数-2"><a href="#向线程传递参数-2" class="headerlink" title="向线程传递参数(2)"></a>向线程传递参数(2)</h2><p>本节展示了向线程传递非空参数的方法。</p><ul><li><code>pthread_create</code>创建线程，接收多参数</li></ul><p>很多时候，用于线程化的函数需要接收不止一个参数。<br>当多个参数需要被传递时，可以通过定义一个结构体包含所有要传的参数，然后用<code>pthread_create</code>传递一个指向改结构体的指针，来打破传递参数的个数的限制。</p><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p>由于并行程序执行顺序的不确定性，你的结果的顺序可能和这个结果不一致。</p><blockquote><p>msg: apple on thread 0<br>msg: cat on thread 2<br>msg: banana on thread 1<br>msg: dog on thread 3</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_THREADS</span>   <span class="token expression"><span class="token number">4</span></span></span><span class="token keyword">struct</span> <span class="token class-name">thread_data</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span>  thread_id<span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>message<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>thread_data_array<span class="token punctuation">[</span>NUM_THREADS<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>threadarg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">struct</span> <span class="token class-name">thread_data</span> <span class="token operator">*</span>my_data<span class="token punctuation">;</span> my_data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">thread_data</span> <span class="token operator">*</span><span class="token punctuation">)</span> threadarg<span class="token punctuation">;</span> <span class="token keyword">int</span> taskid<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> msg<span class="token punctuation">;</span>taskid <span class="token operator">=</span> my_data<span class="token operator">-></span>thread_id<span class="token punctuation">;</span> msg <span class="token operator">=</span> my_data<span class="token operator">-></span>message<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"msg: %s on thread %d\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> taskid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">pthread_t</span> threads<span class="token punctuation">[</span>NUM_THREADS<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> rc<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> messages<span class="token punctuation">[</span>NUM_THREADS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token string">"dog"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> NUM_THREADS<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>thread_data_array<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>thread_id <span class="token operator">=</span> t<span class="token punctuation">;</span> thread_data_array<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>message <span class="token operator">=</span> messages<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//your code here</span>rc <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>threads<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> Print<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>thread_data_array<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//end of your code</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR; return code from pthread_create() is %d"</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程属性-线程连接和分离-1"><a href="#线程属性-线程连接和分离-1" class="headerlink" title="线程属性 - 线程连接和分离(1)"></a>线程属性 - 线程连接和分离(1)</h2><p>本节展示了线程连接和分离的基本知识。</p><ul><li><code>pthread_join</code>主线程挂起直至目标进程返回</li><li><code>pthread_attr_init</code>初始化属性对象</li><li><code>pthread_attr_destroy</code>销毁属性对象</li><li><code>pthread_attr_setdetachstate</code>设置属性对象的分离状态</li></ul><p>当一个线程被创建，它有一个属性定义了它是可连接的(joinable)还是分离的(detached)。只有是可连接的线程才能被连接(joined)，若果创建的线程是分离的，则不能连接。<br><code>pthread_join</code>函数阻塞主线程直到指定的线程终止。“连接”是一种在线程间完成同步的方法。<br><code>pthread_detach</code>函数可以显式用于分离线程。</p><p>使用<code>pthread_create</code>的attr参数可以显式的创建可连接或分离的线程，典型四步如下：</p><ol><li>声明一个<code>pthread_attr_t</code>数据类型的线程属性变量</li><li>用<code>pthread_attr_init</code>初始化改属性变量</li><li>用<code>pthread_attr_setdetachstate</code>设置可分离状态属性</li><li>完了后，用<code>pthread_attr_destroy</code>释放属性所占用的库资源</li></ol><h3 id="函数说明-1"><a href="#函数说明-1" class="headerlink" title="函数说明"></a>函数说明</h3><p>主线程挂起直至目标进程返回</p><pre class="line-numbers language-none"><code class="language-none">int pthread_join(pthread_t thread, void **retval);参数：thread - 线程id，标识唯一线程。retval - 用户定义的指针，用来存储被等待线程的返回值。返回值：0代表成功。若失败，返回的则是错误号。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>pthread_join</code> 是一个用于等待线程结束的函数，它接受两个参数：一个是要等待的线程标识符 <code>pthread_t thread</code>，另一个是指向返回值的指针 <code>void **retval</code>。当线程结束时，<code>pthread_join</code> 会将线程的返回值存储在 <code>retval</code> 指向的内存中。</p><p>函数原型如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_join</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> thread<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><ul><li><code>thread</code>：要等待的线程标识符。</li><li><code>retval</code>：指向返回值的指针。如果线程正常结束，该指针将被设置为线程的返回值；如果线程被其他线程阻塞，该指针将被设置为NULL。</li></ul><p>返回值：</p><ul><li>如果成功等待线程结束并获取返回值，返回0；</li><li>如果线程已经结束，返回0；</li><li>如果发生错误，返回非0值。</li></ul></blockquote><p>初始化属性对象</p><pre class="line-numbers language-none"><code class="language-none">int pthread_attr_init(pthread_attr_t *attr);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>int pthread_attr_init(pthread_attr_t *attr);</code> 是一个用于初始化线程属性的函数。它接受一个指向 <code>pthread_attr_t</code> 类型的指针作为参数，该指针用于存储线程属性的结构体。如果函数成功执行，它将返回0；否则，返回非0值。</p><p>以下是一个简单的示例代码，演示如何使用 <code>pthread_attr_init</code> 函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">pthread_attr_t</span> attr<span class="token punctuation">;</span> <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"线程属性初始化成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 在这里可以对线程属性进行进一步的配置和设置</span>     <span class="token comment">// 在完成线程属性的使用后，记得释放资源</span>     <span class="token function">pthread_attr_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"线程属性初始化失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，在使用完线程属性后，需要调用 <code>pthread_attr_destroy</code> 函数来释放相关资源。</p></blockquote><p>销毁属性对象</p><pre class="line-numbers language-none"><code class="language-none">int pthread_attr_destroy(pthread_attr_t *attr);参数：attr - 指向线程属性对象的指针。返回值：0代表成功。若失败，返回的则是错误号。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>int pthread_attr_destroy(pthread_attr_t *attr);</code> 是一个用于销毁线程属性的函数。它接受一个指向 <code>pthread_attr_t</code> 类型的指针作为参数，该指针指向要销毁的线程属性结构体。如果函数成功执行，它将返回0；否则，返回非0值。</p><p>以下是一个简单的示例代码，演示如何使用 <code>pthread_attr_destroy</code> 函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">pthread_attr_t</span> attr<span class="token punctuation">;</span> <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 在这里可以对线程属性进行进一步的配置和设置</span>     <span class="token comment">// 在完成线程属性的使用后，记得销毁它</span>     result <span class="token operator">=</span> <span class="token function">pthread_attr_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"线程属性销毁成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"线程属性销毁失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"线程属性初始化失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>设置属性对象的分离状态</p><pre class="line-numbers language-none"><code class="language-none">int pthread_attr_setdetachstate(const pthread_attr_t *attr,                                int *detachstate);参数：attr - 指向线程属性对象的指针。detachstate - 设置可分离(PTHREAD_CREATE_DETACHED）或可连接属性(PTHREAD_CREATE_JOINABLE)。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>pthread_attr_setdetachstate</code> 是一个用于设置线程属性的函数，它允许你指定线程在创建后是否应该自动分离。该函数接受两个参数：</p><ol><li><code>const pthread_attr_t *attr</code>：指向要设置的属性对象的指针。这个对象包含了线程的属性信息，例如堆栈大小、优先级等。</li><li><code>int *detachstate</code>：指向一个整数变量的指针，用于存储设置的分离状态。你可以使用以下值之一来指定分离状态：<ul><li><code>PTHREAD_CREATE_JOINABLE</code>：线程可以在其他线程中被连接（join），即主线程可以等待子线程完成执行。这是默认的分离状态。</li><li><code>PTHREAD_CREATE_DETACHED</code>：线程在创建后将自动分离，即主线程无法等待其完成执行。</li></ul></li></ol><p>函数返回0表示成功设置了分离状态，非零值表示出现错误。</p><p>下面是一个示例代码，演示如何使用 <code>pthread_attr_setdetachstate</code> 函数来设置线程的分离状态：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">pthread_attr_t</span> attr<span class="token punctuation">;</span>    <span class="token keyword">int</span> detachstate <span class="token operator">=</span> PTHREAD_CREATE_JOINABLE<span class="token punctuation">;</span> <span class="token comment">// 设置分离状态为可连接</span>    <span class="token comment">// 初始化属性对象</span>    <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置分离状态</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">pthread_attr_setdetachstate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>detachstate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 处理错误情况</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failed to set detach state\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 分离状态设置成功，继续执行其他操作</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 销毁属性对象</span>    <span class="token function">pthread_attr_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，在使用 <code>pthread_attr_setdetachstate</code> 函数之前，你需要先初始化属性对象，并在使用完毕后销毁它。</p></blockquote><p>运行结果</p><p>由于并行程序执行顺序的不确定性，你的结果的顺序可能和这个结果不一致。<br>为了比较输出结果，请将环境设置中的并行核数调为1。<br>本实验暂不支持性能评测。</p><blockquote><p>Creating thread 0<br>Creating thread 1<br>Creating thread 2<br>Thread 0 is running<br>Creating thread 3<br>Thread 1 is running<br>Thread 2 is running<br>Completed join with thread 0<br>Thread 3 is running<br>Completed join with thread 1<br>Completed join with thread 2<br>Completed join with thread 3</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_THREADS</span> <span class="token expression"><span class="token number">4</span> </span></span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>threadid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread %d is running\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>threadid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>threadid<span class="token punctuation">)</span><span class="token punctuation">;</span>threadid <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">pthread_t</span> thread<span class="token punctuation">[</span>NUM_THREADS<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token class-name">pthread_attr_t</span> attr<span class="token punctuation">;</span> <span class="token keyword">int</span> rc<span class="token punctuation">,</span> t<span class="token punctuation">;</span>  <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//your code here</span><span class="token function">pthread_attr_setdetachstate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> PTHREAD_CREATE_JOINABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//end of your code</span><span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> t<span class="token operator">&lt;</span>NUM_THREADS<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span><span class="token operator">*</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>id <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Creating thread %d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span> rc <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> Print<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR; return code from pthread_create() is %d\n"</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token function">pthread_attr_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> t<span class="token operator">&lt;</span>NUM_THREADS<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//your code here</span>rc <span class="token operator">=</span> <span class="token function">pthread_join</span><span class="token punctuation">(</span>thread<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//end of your code</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR; return code from pthread_join() is %d\n"</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Completed join with thread %d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程属性-栈管理"><a href="#线程属性-栈管理" class="headerlink" title="线程属性 - 栈管理"></a>线程属性 - 栈管理</h2><p>本节展示了获取与设置当前线程的栈空间的方法。</p><ul><li><code>pthread_attr_getstacksize</code>获取当前线程的栈空间</li><li><code>pthread_attr_setstacksize</code>设置当前线程的栈空间</li></ul><p>POSIX标准并没有指定线程栈的大小，依赖于实现并随实现变化。</p><p>很容易超出默认的栈大小，常见结果：程序终止或者数据损坏。</p><p>安全和可移植的程序应该不依赖于默认的栈限制，但是取而代之的是用<code>pthread_attr_setstacksize</code>分配足够的栈大小。</p><p><code>pthread_attr_getstackaddr</code>和<code>pthread_attr_setstackaddr</code>函数可以被程序用于将栈设置在指定的内存区域。</p><h3 id="函数说明-2"><a href="#函数说明-2" class="headerlink" title="函数说明"></a>函数说明</h3><p>获取当前线程的栈空间</p><pre class="line-numbers language-none"><code class="language-none">int pthread_attr_getstacksize(const pthread_attr_t *restrict attr,                              size_t *restrict stacksize);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>pthread_attr_getstacksize</code> 是一个用于获取线程属性中栈大小的函数。它接受两个参数：一个指向 <code>pthread_attr_t</code> 类型的指针，表示要查询的线程属性；另一个是指向 <code>size_t</code> 类型的指针，用于存储查询到的栈大小。</p><p>函数原型如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_attr_getstacksize</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>restrict attr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> <span class="token operator">*</span>restrict stacksize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该函数返回一个整数，如果成功获取到栈大小，则返回0；否则返回非零值。</p><p>以下是一个示例代码，演示如何使用 <code>pthread_attr_getstacksize</code> 函数来获取线程属性中的栈大小：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">pthread_attr_t</span> attr<span class="token punctuation">;</span> <span class="token class-name">size_t</span> stacksize<span class="token punctuation">;</span> <span class="token comment">// 初始化线程属性对象</span> <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取线程属性中的栈大小</span> <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">pthread_attr_getstacksize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stacksize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stack size: %zu\n"</span><span class="token punctuation">,</span> stacksize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failed to get stack size\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 销毁线程属性对象</span> <span class="token function">pthread_attr_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述示例中，我们首先创建了一个 <code>pthread_attr_t</code> 类型的变量 <code>attr</code>，然后使用 <code>pthread_attr_init</code> 函数进行初始化。接下来，调用 <code>pthread_attr_getstacksize</code> 函数来获取线程属性中的栈大小，并将结果存储在 <code>stacksize</code> 变量中。最后，根据返回值判断是否成功获取到栈大小，并打印相应的信息。最后，记得使用 <code>pthread_attr_destroy</code> 函数销毁线程属性对象。</p></blockquote><p>设置当前线程的栈空间</p><pre class="line-numbers language-none"><code class="language-none">int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);参数：attr - 指向线程属性的指针stacksize - 栈空间大小返回值：0代表成功。若失败，返回的则是错误号。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：restrict为C语言保留字，用于编译器优化。后同。</p><blockquote><p><code>pthread_attr_setstacksize</code> 是一个用于设置线程属性中栈大小的函数。它接受两个参数：一个指向 <code>pthread_attr_t</code> 类型的指针，表示要设置的线程属性；另一个是 <code>size_t</code> 类型的变量，表示要设置的栈大小。</p><p>函数原型如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_attr_setstacksize</span><span class="token punctuation">(</span><span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> stacksize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该函数返回一个整数，如果成功设置栈大小，则返回0；否则返回非零值。</p><p>以下是一个示例代码，演示如何使用 <code>pthread_attr_setstacksize</code> 函数来设置线程属性中的栈大小：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">pthread_attr_t</span> attr<span class="token punctuation">;</span> <span class="token class-name">size_t</span> stacksize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// 设置栈大小为1MB</span> <span class="token comment">// 初始化线程属性对象</span> <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置线程属性中的栈大小</span> <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">pthread_attr_setstacksize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> stacksize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">printf</span><span class="token punctuation">(</span>"Stack size set successfully"<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token function">printf</span><span class="token punctuation">(</span>"Failed to set stack size"<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 销毁线程属性对象</span> <span class="token function">pthread_attr_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述示例中，我们首先创建了一个 <code>pthread_attr_t</code> 类型的变量 <code>attr</code>，然后使用 <code>pthread_attr_init</code> 函数进行初始化。接下来，调用 <code>pthread_attr_setstacksize</code> 函数来设置线程属性中的栈大小，并将结果存储在 <code>stacksize</code> 变量中。最后，根据返回值判断是否成功设置栈大小，并打印相应的信息。最后，记得使用 <code>pthread_attr_destroy</code> 函数销毁线程属性对象。</p></blockquote><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>由于并行程序执行顺序的不确定性，你的结果的顺序可能和这个结果不一致。<br>为了比较输出结果，请将环境设置中的并行核数调为1。<br>本实验暂不支持性能评测。</p><blockquote><p>Default stack size &#x3D; 0<br>Amount of stack needed per thread &#x3D; 9000000<br>Creating threads with stack size &#x3D; 9000000 bytes<br>Created 4 threads.<br>Thread 1: stack size &#x3D; 9000000 bytes<br>Thread 2: stack size &#x3D; 9000000 bytes<br>Thread 0: stack size &#x3D; 9000000 bytes<br>Thread 3: stack size &#x3D; 9000000 bytes</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUMTHREADS</span> <span class="token expression"><span class="token number">4</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">1000</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MEGEXTRA</span> <span class="token expression"><span class="token number">1000000</span> </span></span><span class="token class-name">pthread_attr_t</span> attr<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">dowork</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>threadid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//The 2-dim array takes up sizeof(double)*N*N bytes.</span><span class="token keyword">double</span> A<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>tid<span class="token punctuation">;</span> <span class="token class-name">size_t</span> mystacksize<span class="token punctuation">;</span>  tid <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>threadid<span class="token punctuation">;</span> <span class="token function">pthread_attr_getstacksize</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mystacksize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread %d: stack size = %li bytes \n"</span><span class="token punctuation">,</span> tid<span class="token punctuation">,</span> mystacksize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3.452</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>N<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>threadid<span class="token punctuation">)</span><span class="token punctuation">;</span>threadid <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">pthread_t</span> threads<span class="token punctuation">[</span>NUMTHREADS<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token class-name">size_t</span> stacksize<span class="token punctuation">;</span> <span class="token keyword">int</span> rc<span class="token punctuation">,</span> t<span class="token punctuation">;</span> <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//your code here</span><span class="token function">pthread_attr_getstacksize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stacksize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//end of your code</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Default stack size = %li\n"</span><span class="token punctuation">,</span> stacksize<span class="token punctuation">)</span><span class="token punctuation">;</span> stacksize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token operator">*</span>N<span class="token operator">*</span>N<span class="token operator">+</span>MEGEXTRA<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Amount of stack needed per thread = %li\n"</span><span class="token punctuation">,</span>stacksize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//your code here</span><span class="token function">pthread_attr_setstacksize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> stacksize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//end of your code</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Creating threads with stack size = %li bytes\n"</span><span class="token punctuation">,</span>stacksize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> t<span class="token operator">&lt;</span>NUMTHREADS<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span><span class="token operator">*</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>id <span class="token operator">=</span> t<span class="token punctuation">;</span>rc <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>threads<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> dowork<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR; return code from pthread_create() is %d\n"</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Created %d threads.\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="互斥锁-1"><a href="#互斥锁-1" class="headerlink" title="互斥锁(1)"></a>互斥锁(1)</h2><ul><li>定义一个互斥锁</li><li><code>pthread_mutex_init</code>互斥锁的初始化</li><li><code>pthread_mutex_destroy</code>互斥锁的销毁</li><li><code>pthread_mutex_lock</code>加锁</li><li><code>pthread_mutex_unlock</code>解锁</li></ul><p>互斥锁(Mutex)是“mutual exclusion”的缩写。互斥锁是实现线程同步，和保护同时写共享数据的主要方法<br>互斥锁对共享数据的保护就像一把锁。在Pthreads中，任何时候仅有一个线程可以锁定互斥锁，因此，当多个线程尝试去锁定该互斥锁时仅有一个会成功。直到锁定互斥锁的线程解锁互斥锁后，其他线程才可以去锁定互斥锁。线程必须轮着访问受保护数据。<br>互斥锁可以防止“竞争”条件。</p><p>用互斥锁的典型顺序如下：</p><ol><li>创建和初始一个互斥锁</li><li>多个线程尝试去锁定该互斥锁</li><li>仅有一个线程可以成功锁定改互斥锁</li><li>锁定成功的线程做一些处理</li><li>线程解锁该互斥锁</li><li>另外一个线程获得互斥锁，重复上述过程</li><li>最后销毁互斥锁</li></ol><h3 id="函数说明："><a href="#函数说明：" class="headerlink" title="函数说明："></a>函数说明：</h3><p>定义一个互斥锁</p><pre class="line-numbers language-none"><code class="language-none">pthread_mutex_t mutex &#x3D; PTHREAD_MUTEX_INITIALIZER;PTHREAD_MUTEX_INITIALIZER是定义在头文件中的宏，能用于初始化静态分配空间的互斥锁。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>这是C语言中用于初始化互斥锁的代码。<code>pthread_mutex_t</code> 是互斥锁的类型，<code>PTHREAD_MUTEX_INITIALIZER</code> 是一个宏，用于初始化互斥锁。</p><p>解析：</p><ol><li><code>pthread_mutex_t mutex;</code>：声明一个互斥锁变量 <code>mutex</code>。</li><li><code>= PTHREAD_MUTEX_INITIALIZER;</code>：使用 <code>PTHREAD_MUTEX_INITIALIZER</code> 宏来初始化互斥锁。</li></ol><p>代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">pthread_mutex_t</span> mutex <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span>    <span class="token comment">// 其他代码...</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>互斥锁的初始化</p><pre class="line-numbers language-none"><code class="language-none">int pthread_mutex_init(pthread_mutex_t *restrict mutex,                       const pthread_mutexattr_t *restrict attr);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);</code> 是一个用于初始化互斥锁的函数。它接受两个参数：</p><ol><li><code>pthread_mutex_t *restrict mutex</code>：指向要初始化的互斥锁对象的指针。</li><li><code>const pthread_mutexattr_t *restrict attr</code>：指向互斥锁属性对象的指针，该对象定义了互斥锁的行为和属性。如果设置为NULL，则使用默认的属性。</li></ol><p>函数返回一个整数，表示操作的结果。如果成功，返回0；否则，返回一个非零的错误码。</p><p>以下是一个示例代码，演示如何使用 <code>pthread_mutex_init</code> 函数来初始化一个互斥锁：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">pthread_mutex_t</span> myMutex<span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myMutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 互斥锁初始化成功</span>        <span class="token comment">// 在这里可以使用互斥锁进行线程同步操作</span>        <span class="token comment">// ...</span>        <span class="token comment">// 释放互斥锁资源</span>        <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myMutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 互斥锁初始化失败，处理错误情况</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，在使用完互斥锁后，需要调用 <code>pthread_mutex_destroy</code> 函数来释放互斥锁资源，以避免内存泄漏。</p></blockquote><p>互斥锁的销毁</p><pre class="line-numbers language-none"><code class="language-none">int pthread_mutex_destroy(pthread_mutex_t *mutex);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>int pthread_mutex_destroy(pthread_mutex_t *mutex);</code> 是一个用于销毁互斥锁的函数。它接受一个指向 <code>pthread_mutex_t</code> 类型的指针作为参数，该指针指向要销毁的互斥锁对象。</p><p>当调用此函数时，它将释放互斥锁所占用的系统资源，并使互斥锁处于未锁定状态。在销毁互斥锁之前，必须先确保没有任何线程正在使用该互斥锁进行同步操作。</p><p>以下是一个示例代码，演示如何使用 <code>pthread_mutex_destroy</code> 函数来销毁互斥锁：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token comment">// 创建互斥锁</span><span class="token class-name">pthread_mutex_t</span> myMutex<span class="token punctuation">;</span><span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myMutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行一些需要同步的操作...</span><span class="token comment">// 销毁互斥锁</span><span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myMutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，在使用 <code>pthread_mutex_destroy</code> 函数之前，必须确保互斥锁已经被正确地初始化，并且没有其他线程正在使用它进行同步操作。</p></blockquote><p>加锁</p><pre class="line-numbers language-none"><code class="language-none">int pthread_mutex_lock(pthread_mutex_t *mutex);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>int pthread_mutex_lock(pthread_mutex_t *mutex);</code> 是一个用于锁定互斥锁的函数。它接受一个指向 <code>pthread_mutex_t</code> 类型的指针作为参数，该指针指向要锁定的互斥锁对象。</p><p>当调用此函数时，它将尝试获取互斥锁的所有权。如果互斥锁已经被其他线程锁定，则当前线程将被阻塞，直到互斥锁被释放。如果成功获取到互斥锁的所有权，函数将返回0；否则，返回非零错误码。</p><p>以下是一个示例代码，演示如何使用 <code>pthread_mutex_lock</code> 函数来锁定互斥锁：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token comment">// 创建互斥锁</span><span class="token class-name">pthread_mutex_t</span> myMutex<span class="token punctuation">;</span><span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myMutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行一些需要同步的操作...</span><span class="token comment">// 锁定互斥锁</span><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myMutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 互斥锁已成功锁定，可以执行临界区代码</span> <span class="token comment">// ...</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 互斥锁锁定失败，处理错误情况</span> <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// 解锁互斥锁</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myMutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 销毁互斥锁</span><span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myMutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，在使用 <code>pthread_mutex_lock</code> 函数之前，必须确保互斥锁已经被正确地初始化，并且没有其他线程正在使用它进行同步操作。在完成对互斥锁的使用后，应该使用 <code>pthread_mutex_unlock</code> 函数来释放互斥锁的所有权，并最终使用 <code>pthread_mutex_destroy</code> 函数来销毁互斥锁对象。</p></blockquote><p>解锁</p><pre class="line-numbers language-none"><code class="language-none">int pthread_mutex_unlock(pthread_mutex_t *mutex);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>int pthread_mutex_unlock(pthread_mutex_t *mutex);</code> 是一个用于解锁互斥锁的函数。它接受一个指向 <code>pthread_mutex_t</code> 类型的指针作为参数，该指针指向要解锁的互斥锁对象。</p><p>当调用此函数时，它将释放互斥锁的所有权，并允许其他线程获取互斥锁进行同步操作。如果成功解锁互斥锁，函数将返回0；否则，返回非零错误码。</p><p>以下是一个示例代码，演示如何使用 <code>pthread_mutex_unlock</code> 函数来解锁互斥锁：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token comment">// 创建互斥锁</span><span class="token class-name">pthread_mutex_t</span> myMutex<span class="token punctuation">;</span><span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myMutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行一些需要同步的操作...</span><span class="token comment">// 锁定互斥锁</span><span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myMutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行临界区代码</span><span class="token comment">// ...</span><span class="token comment">// 解锁互斥锁</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myMutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 销毁互斥锁</span><span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myMutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，在使用 <code>pthread_mutex_unlock</code> 函数之前，必须确保互斥锁已经被正确地初始化，并且当前线程已经获得了互斥锁的所有权。在完成对互斥锁的使用后，应该使用 <code>pthread_mutex_destroy</code> 函数来销毁互斥锁对象。</p></blockquote><h3 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h3><blockquote><p>0<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token class-name">pthread_mutex_t</span> mutex1<span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">readfunction</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">writefunction</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>  <span class="token class-name">pthread_t</span> thread1<span class="token punctuation">,</span>thread2<span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//your code here</span><span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//end of your code</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>readfunction<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>writefunction<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">pthread_join</span><span class="token punctuation">(</span>thread1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">pthread_join</span><span class="token punctuation">(</span>thread2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//your code here</span><span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//end of your code</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">readfunction</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>  <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">writefunction</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>  <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex1<span class="token punctuation">)</span><span class="token punctuation">;</span>  i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="互斥锁-2"><a href="#互斥锁-2" class="headerlink" title="互斥锁(2)"></a>互斥锁(2)</h2><ul><li><code>pthread_mutex_trylock</code>是<code>pthread_mutex_lock</code>的非阻塞版本，调用后立即返回。</li></ul><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><pre class="line-numbers language-none"><code class="language-none">int pthread_mutex_trylock(pthread_mutex_t *mutex); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>int pthread_mutex_trylock(pthread_mutex_t *mutex);</code> 是一个用于尝试获取互斥锁的函数。它接受一个指向 <code>pthread_mutex_t</code> 类型的指针作为参数，该指针指向要锁定的互斥锁对象。</p><p>如果成功获取到互斥锁的所有权，函数将返回0；否则，返回非零错误码。这个函数与 <code>pthread_mutex_lock</code> 函数类似，但不会阻塞当前线程，而是立即返回结果。这在某些情况下可能更有用，例如在高并发场景下，可以避免不必要的线程阻塞。</p><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>pthread b trylock<br>the main close</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token class-name">pthread_mutex_t</span> mutex<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">thread_a</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">thread_b</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token comment">/*your code here*/</span><span class="token function">pthread_mutex_trylock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pthread b trylock\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">pthread_t</span> tid_a<span class="token punctuation">,</span>tid_b<span class="token punctuation">;</span>    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid_a<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>thread_a<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid_b<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>thread_b<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid_a<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid_b<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the main close\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="条件变量-1"><a href="#条件变量-1" class="headerlink" title="条件变量(1)"></a>条件变量(1)</h2><ul><li>条件变量的初始化</li><li><code>pthread_cond_init</code>创建条件变量</li><li><code>pthread_cond_destroy</code>删除条件变量</li><li><code>pthread_cond_wait</code>等待条件变量为真</li><li><code>pthread_cond_signal</code>解锁阻塞在条件变量上的进程</li></ul><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>条件变量是用来通知共享数据状态信息的。<br>条件变量机制允许进程停止当前的执行，让出CPU时间，直到条件为真。<br>每个条件变量必须与一个特定的互斥量相关联以避免死锁。</p><p><code>pthread_cond_wait</code>总和一个互斥锁结合使用。<br>在调用<code>pthread_cond_wait</code>前要先获取锁。<br><code>pthread_cond_wait</code>函数执行时先自动释放指定的锁，然后等待条件变量的变化。在函数调用返回之前，自动将指定的互斥量重新锁住。<br>调用<code>pthread_cond_signal</code>后要立刻释放互斥锁。</p><h3 id="函数说明-3"><a href="#函数说明-3" class="headerlink" title="函数说明"></a>函数说明</h3><p>初始化</p><pre class="line-numbers language-none"><code class="language-none">pthread_cond_t cod &#x3D; PTHREAD_COND_INITIALIZER;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>pthread_cond_t cod = PTHREAD_COND_INITIALIZER;</code> 这行代码是用于初始化一个条件变量 <code>cod</code>。条件变量是一种同步原语，用于在多线程环境中实现线程间的同步和通信。</p><p>在这段代码中，<code>PTHREAD_COND_INITIALIZER</code> 是一个宏定义，它表示一个已经初始化的条件变量对象。通过将其赋值给 <code>cod</code>，我们可以将这个条件变量对象与 <code>cod</code> 关联起来。</p><p>使用条件变量可以使得多个线程等待某个条件成立时才继续执行。例如，当一个线程需要等待另一个线程完成某个任务后才能继续执行时，可以使用条件变量来实现这种同步机制。</p><p>以下是一个示例代码片段，演示如何使用条件变量进行线程同步：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">// 全局变量作为条件变量的标识符</span><span class="token class-name">pthread_cond_t</span> cond <span class="token operator">=</span> PTHREAD_COND_INITIALIZER<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 线程1等待条件变量满足</span> <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread 1: Condition satisfied!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 线程2等待条件变量满足</span> <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread 2: Condition satisfied!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">pthread_t</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span> <span class="token comment">// 创建两个线程并启动</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 主线程等待一段时间，模拟其他操作</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送信号通知条件变量已满足</span> <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待线程结束</span> <span class="token function">pthread_join</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">pthread_join</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的示例中，我们创建了两个线程 <code>thread1</code> 和 <code>thread2</code>，它们都等待条件变量 <code>cond</code> 被满足。在主线程中，我们通过调用 <code>pthread_cond_signal</code> 函数来发送信号，通知条件变量已满足。这样，等待的线程就可以继续执行了。</p></blockquote><p>创建条件变量</p><pre class="line-numbers language-none"><code class="language-none">int pthread_cond_init(pthread_cond_t *cond, pthread_condattr_t *condattr);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>int pthread_cond_init(pthread_cond_t *cond, pthread_condattr_t *condattr);</code> 是一个用于初始化条件变量的函数。它接受两个参数：</p><ol><li><code>pthread_cond_t *cond</code>：指向要初始化的条件变量的指针。</li><li><code>pthread_condattr_t *condattr</code>：指向条件变量属性的指针，可以为 NULL。如果为 NULL，则使用默认属性。</li></ol><p>函数返回一个整数，表示操作的结果。如果成功，返回 0；否则，返回错误码。</p></blockquote><p>删除条件变量</p><pre class="line-numbers language-none"><code class="language-none">int pthread_cond_destroy(pthread_cond_t *cond);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>int pthread_cond_destroy(pthread_cond_t *cond);</code> 是一个用于销毁条件变量的函数。它接受一个指向要销毁的条件变量的指针作为参数。</p><p>函数返回一个整数，表示操作的结果。如果成功，返回 0；否则，返回错误码。</p></blockquote><p>等待条件变量为真</p><pre class="line-numbers language-none"><code class="language-none">int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);</code> 是一个用于线程等待条件的函数。它接受两个参数：</p><ol><li><code>pthread_cond_t *restrict cond</code>：指向要等待的条件变量的指针。</li><li><code>pthread_mutex_t *restrict mutex</code>：指向互斥锁的指针，用于保护条件变量。</li></ol><p>函数返回一个整数，表示操作的结果。如果成功，返回 0；否则，返回错误码。</p></blockquote><p>解锁阻塞在条件变量上的进程</p><pre class="line-numbers language-none"><code class="language-none">int pthread_cond_signal(pthread_cond_t *cond);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>int pthread_cond_signal(pthread_cond_t *cond);</code> 是一个用于唤醒等待条件变量的线程的函数。它接受一个指向条件变量的指针作为参数。</p><p>函数返回一个整数，表示操作的结果。如果成功，返回 0；否则，返回错误码。</p></blockquote><h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>Counter value functionCount1: 1<br>Counter value functionCount2: 2<br>Counter value functionCount1: 3<br>Counter value functionCount2: 4<br>Counter value functionCount2: 5<br>Counter value functionCount2: 6<br>Counter value functionCount2: 7<br>Counter value functionCount2: 8<br>Counter value functionCount1: 9<br>Counter value functionCount2: 10<br>Counter value functionCount1: 11</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token class-name">pthread_mutex_t</span> count_mutex     <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span><span class="token class-name">pthread_mutex_t</span> condition_mutex <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span><span class="token class-name">pthread_cond_t</span>  condition_cond  <span class="token operator">=</span> PTHREAD_COND_INITIALIZER<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">functionCount1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">functionCount2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span>  count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">COUNT_DONE</span>  <span class="token expression"><span class="token number">10</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">COUNT_HALT1</span>  <span class="token expression"><span class="token number">3</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">COUNT_HALT2</span>  <span class="token expression"><span class="token number">6</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token class-name">pthread_t</span> thread1<span class="token punctuation">,</span> thread2<span class="token punctuation">;</span>   <span class="token function">pthread_create</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>thread1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>functionCount1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">pthread_create</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>thread2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>functionCount2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">pthread_join</span><span class="token punctuation">(</span> thread1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">pthread_join</span><span class="token punctuation">(</span> thread2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">functionCount1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>      <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>condition_mutex <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span> count <span class="token operator">>=</span> COUNT_HALT1 <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;=</span> COUNT_HALT2 <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span><span class="token comment">//your code here</span>        <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>condition_cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>condition_mutex <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//end of your code</span>      <span class="token punctuation">&#125;</span>      <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>condition_mutex <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>count_mutex <span class="token punctuation">)</span><span class="token punctuation">;</span>      count<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Counter value functionCount1: %d\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>count_mutex <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">>=</span> COUNT_DONE<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">functionCount2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>       <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>condition_mutex <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span> count <span class="token operator">&lt;</span> COUNT_HALT1 <span class="token operator">||</span> count <span class="token operator">></span> COUNT_HALT2 <span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>        <span class="token comment">//your code here</span>        <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>condition_cond <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//end of your code</span>       <span class="token punctuation">&#125;</span>       <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>condition_mutex <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>count_mutex <span class="token punctuation">)</span><span class="token punctuation">;</span>       count<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Counter value functionCount2: %d\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>count_mutex <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">>=</span> COUNT_DONE<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="条件变量-2"><a href="#条件变量-2" class="headerlink" title="条件变量(2)"></a>条件变量(2)</h2><p>本节继续展示条件变量的相关方法</p><ul><li><code>pthread_cond_broadcast</code>解除所有被某个条件变量阻塞的进程</li></ul><p><code>pthread_cond_broadcast</code>可用于解除所有被某个条件变量阻塞的进程<br>与<code>pthread_cond_signal</code>函数相似，<code>pthread_cond_broadcast</code>函数执行时先自动释放指定的锁，然后等待条件变量的变化。在函数调用返回之前，自动将指定的互斥量重新锁住</p><h3 id="函数说明-4"><a href="#函数说明-4" class="headerlink" title="函数说明"></a>函数说明</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_cond_broadcast</span><span class="token punctuation">(</span><span class="token class-name">pthread_cond_t</span> <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>pthread_cond_broadcast</code>是一个POSIX线程库函数，用于唤醒所有等待某个条件变量的线程。它的原型如下：</p><p>参数：</p><ul><li><code>cond</code>：指向要广播的条件变量的指针</li></ul><p>返回值：</p><ul><li>成功时返回0；失败时返回错误码</li></ul><h3 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>thread 1 waiting for signal<br>thread 2 waiting for signal<br>main thread broadcasts signal<br>thread 2 receives signal<br>thread 1 receives signal</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>   <span class="token keyword">static</span> <span class="token class-name">pthread_mutex_t</span> mtx<span class="token operator">=</span>PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token class-name">pthread_cond_t</span> cond<span class="token operator">=</span>PTHREAD_COND_INITIALIZER<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">func_1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread 1 waiting for signal\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread 1 receives signal\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">func_2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread 2 waiting for signal\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread 2 receives signal\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>      <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token class-name">pthread_t</span> tid1<span class="token punctuation">,</span> tid2<span class="token punctuation">;</span>        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> func_1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> func_2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main thread broadcasts signal\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//your code here</span>    <span class="token function">pthread_cond_broadcast</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//end of your code</span>      <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="障碍同步"><a href="#障碍同步" class="headerlink" title="障碍同步"></a>障碍同步</h2><p>本节展示了障碍同步的相关方法。</p><ul><li><code>pthread_barrier_init</code>障碍初始化</li><li><code>pthread_barrier_wait</code>障碍等待</li><li><code>pthread_barrier_destroy</code>障碍销毁</li></ul><p>障碍同步(Barrier Synchronization)是Pthread中另外一种同步机制。<br>barrier意为栏杆，形象的说就是把先后到达的多个线程挡在同一栏杆前，直到所有线程到齐，然后撤下栏杆同时放行。</p><h3 id="函数原型-1"><a href="#函数原型-1" class="headerlink" title="函数原型"></a>函数原型</h3><pre class="line-numbers language-none"><code class="language-none">int pthread_barrier_init(pthread_barrier_t *restrict barrier, const pthread_barrierattr_t *restrict attr, unsigned count);int pthread_barrier_wait(pthread_barrier_t *barrier);int pthread_barrier_destroy(pthread_barrier_t *barrier);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><code>pthread_barrier_init</code>函数用于初始化一个屏障对象。它接受三个参数：</p><ol><li><code>barrier</code>：指向要初始化的屏障对象的指针。</li><li><code>attr</code>：指向屏障属性对象的指针，可以为NULL。如果为NULL，则使用默认的属性。</li><li><code>count</code>：需要等待的线程数量。当所有线程都调用了<code>pthread_barrier_wait</code>函数后，屏障将被解除。</li></ol><p>函数返回0表示成功，非0表示失败。</p></blockquote><blockquote><p><code>pthread_barrier_wait</code>函数用于让当前线程等待其他线程到达屏障。它接受一个指向<code>pthread_barrier_t</code>类型的指针作为参数，该指针指向要等待的屏障对象。</p><p>当调用<code>pthread_barrier_wait</code>时，当前线程将被阻塞，直到所有其他线程都到达屏障。一旦所有线程都到达屏障，它们将继续执行并解除阻塞。</p><p>以下是一个示例代码，演示了如何使用<code>pthread_barrier_wait</code>函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">// 定义线程数量和屏障对象</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_THREADS</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token class-name">pthread_barrier_t</span> barrier<span class="token punctuation">;</span><span class="token comment">// 线程函数</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">threadFunction</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread %ld is waiting on barrier\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">pthread_barrier_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>barrier<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 等待其他线程到达屏障</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread %ld has crossed the barrier\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">pthread_t</span> threads<span class="token punctuation">[</span>NUM_THREADS<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 初始化屏障对象</span> <span class="token function">pthread_barrier_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>barrier<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> NUM_THREADS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建并启动线程</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_THREADS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> threadFunction<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 等待所有线程完成</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_THREADS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">pthread_join</span><span class="token punctuation">(</span>threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 销毁屏障对象</span> <span class="token function">pthread_barrier_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>barrier<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述示例中，我们创建了一个包含5个线程的线程池，并使用<code>pthread_barrier_wait</code>函数来同步这些线程。每个线程在到达屏障之前都会打印一条消息，表示正在等待其他线程。一旦所有线程都到达屏障，它们将打印另一条消息，表示已经跨越了屏障。最后，主线程等待所有子线程完成，然后销毁屏障对象。</p></blockquote><blockquote><p><code>int pthread_barrier_destroy(pthread_barrier_t *barrier);</code> 是一个用于销毁线程屏障的函数。当一个线程屏障不再需要时，可以调用此函数来释放资源。</p><p>该函数接受一个指向 <code>pthread_barrier_t</code> 结构的指针作为参数，该结构表示要销毁的线程屏障。函数返回一个整数，表示操作的结果。如果成功销毁了线程屏障，则返回0；否则返回非零错误代码。</p><p>以下是一个示例代码，演示如何使用 <code>pthread_barrier_destroy</code> 函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">// 定义线程数量和屏障对象</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_THREADS</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token class-name">pthread_barrier_t</span> barrier<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">threadFunction</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread %ld is waiting on barrier\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">pthread_barrier_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>barrier<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 等待其他线程到达屏障</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread %ld has crossed the barrier\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">pthread_t</span> threads<span class="token punctuation">[</span>NUM_THREADS<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 初始化线程并启动它们</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_THREADS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> threadFunction<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 等待所有线程完成</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_THREADS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">pthread_join</span><span class="token punctuation">(</span>threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 销毁线程屏障</span> <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">pthread_barrier_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>barrier<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Barrier destroyed successfully\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failed to destroy barrier\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述示例中，我们创建了一个包含5个线程的线程池，每个线程都执行 <code>threadFunction</code> 函数。在函数中，线程使用 <code>pthread_barrier_wait</code> 函数等待其他线程到达屏障。一旦所有线程都到达屏障，它们将打印消息并继续执行。</p><p>在主函数中，我们首先启动所有线程，然后等待它们完成。最后，我们调用 <code>pthread_barrier_destroy</code> 函数来销毁线程屏障，并根据返回值判断是否成功销毁。</p></blockquote><h3 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>Task1 will be blocked.<br>main process will sleep 1s.<br>Task2 will be blocked.<br>Task1 is running.<br>Task2 is running.</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_THREADS</span> <span class="token expression"><span class="token number">2</span></span></span><span class="token class-name">pthread_barrier_t</span> barrier<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">Task1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">Task2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> policy<span class="token punctuation">,</span> inher<span class="token punctuation">;</span>    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span>    <span class="token class-name">pthread_attr_t</span> attr<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sched_param</span> param<span class="token punctuation">;</span>    <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_barrier_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>barrier<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> NUM_THREADS <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> Task1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> Task2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main process will sleep 1s.\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_barrier_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>barrier<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_barrier_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>barrier<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">Task1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Task1 will be blocked.\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// your code here</span>    <span class="token function">pthread_barrier_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>barrier<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// end of your code</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Task1 is running.\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">Task2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Task2 will be blocked.\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// your code here</span>    <span class="token function">pthread_barrier_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>barrier<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// end of your code</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Task2 is running.\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取调用线程标识号"><a href="#获取调用线程标识号" class="headerlink" title="获取调用线程标识号"></a>获取调用线程标识号</h2><p>本节展示了获取调用线程标识号的方法。</p><ul><li><code>pthread_self</code>获取调用线程标识号</li></ul><h3 id="函数说明-5"><a href="#函数说明-5" class="headerlink" title="函数说明"></a>函数说明</h3><pre class="line-numbers language-none"><code class="language-none">pthread_t pthread_self(void);返回调用线程标识号，返回类型为pthread_t<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>pthread_t pthread_self(void);</code> 是一个用于获取当前线程标识符的函数。在C语言中，可以使用POSIX线程库（pthread）来实现多线程编程。这个函数返回一个 <code>pthread_t</code> 类型的值，表示当前线程的唯一标识符。</p><h3 id="运行结果-5"><a href="#运行结果-5" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>main thread:  pid 1588 tid 2 (0x2)<br>new thread:  pid 1588 tid 1 (0x1)</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">printids</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span>      pid <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//your code here</span>    tid <span class="token operator">=</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//end of your code</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s pid %u tid %u (0x%x)\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>pid<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>tid<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 添加返回语句</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span>    <span class="token keyword">int</span> err<span class="token punctuation">;</span>        err <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> printids<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"new thread: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"can't create thread: %s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">printids</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"main thread: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程取消"><a href="#线程取消" class="headerlink" title="线程取消"></a>线程取消</h2><p>pthread_cancel调用并不等待线程终止，它只提出请求。线程在取消请求(pthread_cancel)发出后会继续运行。</p><h3 id="函数说明-6"><a href="#函数说明-6" class="headerlink" title="函数说明"></a>函数说明</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_cancel</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>int pthread_cancel(pthread_t thread);</code> 用于请求取消指定线程。它接受一个 <code>pthread_t</code> 类型的参数，表示要取消的线程标识符。如果成功取消线程，函数返回0；否则返回错误码。这个函数允许主线程或者其他线程发起对目标线程的取消请求。</p><p>参数说明：</p><ul><li><code>pthread_t thread</code>：要取消的线程标识符，即你想结束的那个线程的句柄。</li></ul><p>返回值：</p><ul><li>如果成功发送了取消请求，则返回0。</li><li>如果发生错误（例如，无效的线程ID），则返回非零错误代码。</li></ul><p>注意：</p><ol><li><p>取消一个线程并不意味着它会立即停止执行。目标线程必须检查并处理取消请求才能真正终止。通常情况下，线程需要在安全点检查<code>pthread_cancel</code>状态，并调用<code>pthread_testcancel</code>来响应取消请求。</p></li><li><p>线程可以通过设置取消类型为<code>PTHREAD_CANCEL_DISABLE</code>来暂时禁用取消，或者通过调用<code>pthread_setcancelstate</code>函数改变其取消状态。</p></li><li><p>为了正确地清理资源，线程可以注册一个取消处理函数(<code>pthread_cleanup_push</code>和<code>pthread_cleanup_pop</code>)，当线程被取消时，这些函数会被自动调用。</p></li><li><p>默认情况下，线程的取消类型是<code>PTHREAD_CANCEL_DEFERRED</code>，这意味着只有在线程进入取消点时才会真正取消。若要使取消立即生效，可以将线程的取消类型设置为<code>PTHREAD_CANCEL_ASYNCHRONOUS</code>。</p></li></ol><p>示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread_function</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在这里进行线程任务...</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 定期检查取消状态</span>        <span class="token function">pthread_testcancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里做一些工作...</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">pthread_t</span> thread_id<span class="token punctuation">;</span>    <span class="token keyword">int</span> rc<span class="token punctuation">;</span>    <span class="token comment">// 创建线程</span>    rc <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread_id<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread_function<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Unable to create thread, %d\n"</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 在某个时刻决定取消线程</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 假设等待一段时间后决定取消线程</span>    rc <span class="token operator">=</span> <span class="token function">pthread_cancel</span><span class="token punctuation">(</span>thread_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Unable to cancel thread, %d\n"</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread cancellation requested.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 等待被取消的线程终止</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行结果-6"><a href="#运行结果-6" class="headerlink" title="运行结果"></a>运行结果</h3><p>为了比较输出结果，请将环境设置中的并行核数调为1。本实验暂不支持性能评测。</p><blockquote><p>thread 1 returning<br>thread 1 exit code 1<br>thread 2 exiting<br>thread 2 exit code 2<br>thread 3 writing<br>thread 3 writing<br>thread 3 writing<br>thread 3 exit code -1</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">thr_fn1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread 1 returning\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">thr_fn2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread 2 exiting\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">thr_fn3</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        time<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread 3 writing\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>time <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>retval<span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thr_fn1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread 1 exit code %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">intptr_t</span><span class="token punctuation">)</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 修复类型转换</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thr_fn2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread 2 exit code %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">intptr_t</span><span class="token punctuation">)</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 修复类型转换</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thr_fn3<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//your code here</span>    <span class="token function">pthread_cancel</span><span class="token punctuation">(</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//end of your code</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 需要处理取消后的线程可能没有有效退出状态的情况</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>retval <span class="token operator">==</span> PTHREAD_CANCELED<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread 3 was canceled\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread 3 exit code %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">intptr_t</span><span class="token punctuation">)</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里仍需进行正确的类型转换</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程属性-线程连接和分离-2"><a href="#线程属性-线程连接和分离-2" class="headerlink" title="线程属性 - 线程连接和分离(2)"></a>线程属性 - 线程连接和分离(2)</h2><p>本节展示了线程连接和分离的基本知识。</p><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><ul><li><code>pthread_detach</code>将某个线程设成分离态</li></ul><p>一般情况下,线程终止后,其终止状态一直保留到其它线程调用pthread_join获取它的状态为止。但是线程也可以被置为detach状态,这样的线程一旦终止就立刻回收它占用的所有资源,而不保留终止状态。不能对一个已经处于detach状态的线程调用pthread_join,这样的调用将返回EINVAL。如果已经对一个线程调用了pthread_detach就不能再调用pthread_join了。</p><p>通常情况下，若创建一个线程不关心它的返回值,也不想使用pthread_join来回收资源(调用pthread_join的进程会阻塞)，就可以使用pthread_detach,将该线程的状态设置为分离态,使线程结束后,立即被系统回收。<br>主线程退出了，“分离线程”还是一样退出。只是“分离线程”的资源是有系统回收的。</p><h3 id="函数说明-7"><a href="#函数说明-7" class="headerlink" title="函数说明"></a>函数说明</h3><p>将某个线程设成分离态</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_detach</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> tid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">pthread_t</span> tid<span class="token operator">:</span>　　分离线程的tid返回值<span class="token operator">:</span>成功返回<span class="token number">0</span><span class="token punctuation">,</span>失败返回错误号。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>pthread_detach</code>是POSIX线程库中的一个函数，用于将一个已创建的线程从其创建者分离（detach）。</p><p>函数原型：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_detach</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> tid<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数解释：</p><ul><li><code>pthread_t tid</code>：这是要分离的线程的标识符。在创建线程时，pthread_create函数会返回这个tid，代表新创建的线程。</li></ul><p>函数功能：<br>当一个线程被分离后，其资源（如栈空间等）将在该线程终止时自动释放，而无需调用pthread_join函数等待其完成。这意味着分离线程执行完毕后，不会保留joinable状态，因此主线程或其他线程无法通过pthread_join来获取其返回值或确保它已经结束。</p><p>返回值：</p><ul><li>若成功分离线程，则返回0。</li><li>若出错，则返回非零错误编号，具体错误信息可通过errno获取。</li></ul><p>分离线程的主要用途是在不关心线程退出状态和返回值的情况下，减轻主线程对子线程生命周期管理的负担。</p><h3 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h3><pre class="line-numbers language-none"><code class="language-none">thread1 running...!thread1 running...!thread1 running...!thread1 running...!thread1 running...!thread1 running...!thread1 running...!thread1 running...!thread1 running...!Leave main thread!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>由于并行程序执行顺序的不确定性，你的结果可能和这个结果不一致。</p><p>在给出的代码中，<code>thread1</code>函数是一个无限循环的线程，因此实际上调用<code>pthread_detach</code>之后主线程无法得知<code>thread1</code>何时结束。这种情况下，分离线程的意义在于主线程结束后，即使未调用<code>pthread_join</code>，系统也会自动释放<code>thread1</code>所占用的资源。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">// 定义线程执行的函数</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 这是一个无限循环的线程</span>    <span class="token punctuation">&#123;</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 暂停100毫秒</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread1 running...!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 实际上由于是无限循环，下面这行代码可能永远不会被执行</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Leave thread1!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span> <span class="token comment">// 创建线程标识符</span>    <span class="token comment">// 创建并启动线程</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"pthread_create failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 分离线程，使其在完成后自动释放资源，无需等待主线程调用pthread_join</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pthread_detach</span><span class="token punctuation">(</span>tid<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"pthread_detach failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 主线程暂停1秒</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Leave main thread! (The detached thread 'thread1' will continue to run in the background.)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码中，增加了对<code>pthread_create</code>和<code>pthread_detach</code>错误处理的部分，使得程序在创建或分离线程失败时能够打印错误信息并退出。同时，主线程输出信息也说明了detach线程后的情况。</p><h2 id="比较线程标识号"><a href="#比较线程标识号" class="headerlink" title="比较线程标识号"></a>比较线程标识号</h2><p>本节介绍了比较两个线程的线程标识符是否相同的方法。</p><p>线程标识号的类型为pthread_t，是不透明类型。为了使程序更容易移植，Pthreads提供了对两个线程的线程标识号进行比较的函数。</p><h3 id="函数说明-8"><a href="#函数说明-8" class="headerlink" title="函数说明"></a>函数说明</h3><p>比较两个线程的线程标识符是否相同</p><p><code>pthread_equal</code>用于比较两个线程的标识符是否相同</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_equal</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> t1<span class="token punctuation">,</span> <span class="token class-name">pthread_t</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数解释：</p><ul><li><code>pthread_t t1</code>：第一个线程标识符。</li><li><code>pthread_t t2</code>：第二个线程标识符。</li></ul><p>该函数比较<code>t1</code>和<code>t2</code>两个线程标识符是否指向同一线程。如果两者指向同一个线程，则返回非零值（通常为1），否则返回0。</p><p>使用场景：<br>在多线程编程中，有时需要确定两个线程标识符是否对应于同一个线程实例。例如，在同步或通信操作中，可能需要检查当前线程是否与某个特定的已知线程相匹配。</p><p>示例代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">pthread_t</span> tid1<span class="token punctuation">,</span> tid2<span class="token punctuation">;</span><span class="token comment">// 假设tid1和tid2是从pthread_create得到的不同线程的标识符</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread_function1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建线程成功</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread_function2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建线程成功</span><span class="token punctuation">&#125;</span><span class="token comment">// 检查tid1和tid2是否代表同一个线程</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_equal</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span> tid2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tid1 and tid2 represent the same thread.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tid1 and tid2 represent different threads.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>pthread_equal(tid1, tid2)</code>将返回0，因为它们分别代表两个不同线程。</p><h3 id="运行结果-7"><a href="#运行结果-7" class="headerlink" title="运行结果"></a>运行结果</h3><pre class="line-numbers language-none"><code class="language-none">Thread ID: 1.Equal!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">pthread_t</span> thread_id<span class="token punctuation">;</span>    <span class="token comment">// 获取当前线程ID</span>    thread_id <span class="token operator">=</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread ID: %lu.\n"</span><span class="token punctuation">,</span> thread_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 检查两次获取的线程ID是否相同（理论上它们应该总是相同的）</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">pthread_equal</span><span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The Thread IDs are equal, as expected!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Unexpected: The Thread IDs are not equal!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程私有数据"><a href="#线程私有数据" class="headerlink" title="线程私有数据"></a>线程私有数据</h2><p>本节展示了线程私有数据的相关方法。</p><p><code>pthread_key_create</code>、<code>pthread_setspecific</code>、<code>pthread_getspecific</code>和<code>pthread_key_delete</code>这一系列函数主要用于管理线程特定的数据（Thread-Specific Data, TSD），也称为线程局部存储（Thread-Local Storage, TLS）</p><ul><li><code>pthread_key_create</code>创建一个键</li><li><code>pthread_setspecific</code>为一个键设置线程私有数据</li><li><code>pthread_getspecific</code>从一个键读取线程私有数据</li><li><code>pthread_key_delete</code>删除一个键</li></ul><p>在多线程的环境下，进程内的所有线程共享进程的数据空间。因此全局变量为所有线程共享。在程序设计中有时需要保存线程自己的全局变量，这种特殊的变量仅在线程内部有效。<br>线程私有数据采用了一键多值的技术，即一个键对应多个值。访问数据时都是通过键值来访问，好像是对一个变量进行访问，其实是在访问不同的数据。</p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>1、创建一个键<br>2、为一个键设置线程私有数据<br>3、从一个键读取线程私有数据void *pthread_getspecific(pthread_key_t key);<br>4、线程退出（退出时，会调用destructor释放分配的缓存，参数是key所关联的数据）<br>5、删除一个键</p><h3 id="函数说明-9"><a href="#函数说明-9" class="headerlink" title="函数说明"></a>函数说明</h3><p>创建一个键</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_key_create</span><span class="token punctuation">(</span><span class="token class-name">pthread_key_t</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>destructor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>pthread_key_create(pthread_key_t *key, void (*destructor)(void*))c</code></p><ul><li>第一个参数为指向一个键值的指针，第二个参数指明了一个destructor函数，<br>如果第二个参数不为空，那么当每个线程结束时，系统将调用这个函数来释放绑定在这个键上的内存块。<br>key一旦被创建，所有线程都可以访问它，但各线程可根据自己的需要往key中填入不同的值，这就相当于提供了一个同名而不同值的全局变量，一键多值。</li><li>创建一个线程私有数据键。参数<code>key</code>是一个指向pthread_key_t类型的指针，用于存储创建的键值；<code>destructor</code>是一个可选的清理函数，当关联此键的线程终止时，该函数会被调用来释放分配给这个键的私有数据。</li></ul><p>为一个键设置线程私有数据</p><pre class="line-numbers language-none"><code class="language-none">int pthread_setspecific(pthread_key_t key,const void *pointer));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>pthread_setspecific(pthread_key_t key, const void *value)</code></p><ul><li>为指定的键设置线程私有数据。每个线程都可以为同一个键设置不同的值，互不影响。参数<code>key</code>是通过<code>pthread_key_create</code>创建的键，<code>value</code>是要关联到此键的私有数据指针。</li></ul><p>从一个键读取线程私有数据</p><pre class="line-numbers language-none"><code class="language-none">void *pthread_getspecific(pthread_key_t key);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>void* pthread_getspecific(pthread_key_t key)</code></p><ul><li>根据指定的键获取当前线程关联的私有数据。返回与键关联的线程特定数据的指针。</li></ul><p>删除一个键</p><pre class="line-numbers language-none"><code class="language-none">int pthread_key_delete(pthread_key_t key);删除后，键所占用的内存将被释放。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>int pthread_key_delete(pthread_key_t key)</code></p><ul><li>删除已创建的线程私有数据键。一旦键被删除，所有线程与该键关联的私有数据都将失效，如果之前设置了清理函数，会在最后一个与该键关联的线程结束时执行。</li></ul><h3 id="举例说明："><a href="#举例说明：" class="headerlink" title="举例说明："></a>举例说明：</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">static</span> <span class="token class-name">pthread_key_t</span> thread_data_key<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">cleanup_thread_data</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread_function</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token operator">*</span> data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>data <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// 初始化私有数据</span>    <span class="token function">pthread_setspecific</span><span class="token punctuation">(</span>thread_data_key<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在线程执行过程中可以随时通过键访问自己的私有数据</span>    <span class="token keyword">int</span><span class="token operator">*</span> my_data <span class="token operator">=</span> <span class="token function">pthread_getspecific</span><span class="token punctuation">(</span>thread_data_key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread private data: %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>my_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_key_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread_data_key<span class="token punctuation">,</span> cleanup_thread_data<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"pthread_key_create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread_function<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 等待子线程结束</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 主线程也可以有自己的私有数据，与子线程互不影响</span>    <span class="token comment">// ...</span>    <span class="token comment">// 最后删除键</span>    <span class="token function">pthread_key_delete</span><span class="token punctuation">(</span>thread_data_key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码展示了如何创建、设置、获取以及删除线程私有数据。每个线程通过<code>pthread_setspecific</code>保存自己的私有数据，并且可以在任何时候通过<code>pthread_getspecific</code>来访问这些数据，而不会影响其他线程。当线程结束时，若定义了清理函数，会自动清理其私有数据。</p><h3 id="运行结果-8"><a href="#运行结果-8" class="headerlink" title="运行结果"></a>运行结果</h3><pre class="line-numbers language-none"><code class="language-none">main thread:1 is runningthread:2 is runningthread:2 return 1thread:3 is runningthread:3 return 2thread:1 return 0main thread exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token class-name">pthread_key_t</span> key1<span class="token punctuation">;</span><span class="token class-name">pthread_key_t</span> key2<span class="token punctuation">;</span><span class="token class-name">pthread_t</span> thid1<span class="token punctuation">;</span><span class="token class-name">pthread_t</span> thid2<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread:%lu is running\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> key_va <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">pthread_setspecific</span><span class="token punctuation">(</span>key1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>key_va<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>thid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加了对线程2的等待，确保其执行完毕后再返回</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread:%lu return %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">pthread_getspecific</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread:%lu is running\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> key_va <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">pthread_setspecific</span><span class="token punctuation">(</span>key2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>key_va<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread:%lu return %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">pthread_getspecific</span><span class="token punctuation">(</span>key2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 添加了返回语句以消除编译警告</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main thread:%lu is running\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_key_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_key_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_join</span><span class="token punctuation">(</span>thid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_key_delete</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_key_delete</span><span class="token punctuation">(</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main thread exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><p>本节展示了读写锁的相关方法。</p><h3 id="基本知识-1"><a href="#基本知识-1" class="headerlink" title="基本知识"></a>基本知识</h3><p>读写锁与互斥量类似，不过读写锁允许更高的并行性。互斥量要么是锁住状态，要么是不加锁状态，而且一次只有一个线程对其加锁。<br>读写锁可以有三种状态：读模式下加锁状态，写模式下加锁状态，不加锁状态。一次只有一个线程可以占有写模式的读写锁，但是多个线程可用同时占有读模式的读写锁。<br>读写锁也叫做共享-独占锁，当读写锁以读模式锁住时，它是以共享模式锁住的，当它以写模式锁住时，它是以独占模式锁住的。</p><ol><li>当读写锁是写加锁状态时，在这个锁被解锁之前，所有试图对这个锁加锁的线程都会被阻塞；</li><li>当读写锁在读加锁状态时，所有试图以读模式对它进行加锁的线程都可以得到访问权，但是以写模式对它进行枷锁的线程将阻塞；</li><li>当读写锁在读模式锁状态时，如果有另外线程试图以写模式加锁，读写锁通常会阻塞随后的读模式锁请求，这样可以避免读模式锁长期占用，而等待的写模式锁请求长期阻塞；</li></ol><ul><li><p><code>pthread_rwlock_init</code>创建锁</p></li><li><p><code>pthread_rwlock_destroy</code>销毁锁</p></li><li><p><code>pthread_rwlock_rdlock</code>获取一个读出锁</p></li><li><p><code>pthread_rwlock_wrlock</code>获取一个写入锁</p></li><li><p><code>pthread_rwlock_unlock</code>释放一个写入锁或者读出锁</p></li><li><p><code>pthread_rwlock_tryrdlock</code>非阻塞获得读锁</p></li><li><p><code>pthread_rwlock_trywrlock</code>非阻塞获得写锁</p></li></ul><p>在多线程编程中，读写锁（也称为读-写锁或共享-独占锁）是一种能够提供更细粒度控制的同步机制。它允许一个资源在同一时间被多个读者线程同时读取，但在任何时候只允许一个写者线程进行写入操作。这样可以提高系统并发性能，特别是在读多写少的情况下。</p><p>以下是使用读写锁的基本操作示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token class-name">pthread_rwlock_t</span> rwlock<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">initialize_rwlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">pthread_rwlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">read_lock_and_operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">pthread_rwlock_rdlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在这里执行读取操作</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Reading from a shared resource by thread %lu.\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">write_lock_and_operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">pthread_rwlock_wrlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在这里执行写入操作</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Writing to the shared resource by thread %lu.\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 更新共享资源...</span>    <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">destroy_rwlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">pthread_rwlock_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">initialize_rwlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建并启动多个读线程和写线程</span>    <span class="token comment">// 例如：</span>    <span class="token class-name">pthread_t</span> reader_thread<span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>reader_thread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>read_lock_and_operation<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">pthread_t</span> writer_thread<span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>writer_thread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>write_lock_and_operation<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>reader_thread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>writer_thread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">destroy_rwlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，<code>pthread_rwlock_tryrdlock</code> 和 <code>pthread_rwlock_trywrlock</code> 函数提供了非阻塞版本的读写锁获取操作，如果无法立即获取锁，则返回错误而非阻塞等待：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_rwlock_tryrdlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 成功获取读锁，执行读取操作</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 锁不可用，采取相应策略（如：稍后重试、切换至其他任务等）</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_rwlock_trywrlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 成功获取写锁，执行写入操作</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 锁不可用，采取相应策略</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过合理利用读写锁，可以有效避免不必要的线程阻塞，从而提升程序的并发性和整体性能。</p><h4 id="创建与销毁锁"><a href="#创建与销毁锁" class="headerlink" title="创建与销毁锁"></a>创建与销毁锁</h4><p><code>pthread_rwlock_init</code>和<code>pthread_rwlock_destroy</code>是POSIX线程库中的读写锁初始化和销毁函数。</p><ol><li><p><strong>pthread_rwlock_init</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_init</span><span class="token punctuation">(</span><span class="token class-name">pthread_rwlock_t</span> <span class="token operator">*</span>rwlock<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">pthread_rwlockattr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>功能：初始化一个读写锁变量。这个函数用于创建一个新的读写锁，使它可以被多个线程用来同步对共享资源的读写访问。</li><li>参数：<ul><li><code>pthread_rwlock_t *rwlock</code>：指向读写锁对象的指针，需要先声明并初始化为NULL。</li><li><code>const pthread_rwlockattr_t *attr</code>：指向读写锁属性对象的指针，可以设置锁的一些高级特性（如进程间共享等）。如果不需要特殊属性，通常传入NULL即可使用默认属性。</li></ul></li></ul></li><li><p><strong>pthread_rwlock_destroy</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_destroy</span><span class="token punctuation">(</span><span class="token class-name">pthread_rwlock_t</span> <span class="token operator">*</span>rwptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>功能：销毁已经初始化过的读写锁。在不再需要使用读写锁，并且所有线程都已解锁的情况下，调用此函数来释放与该锁关联的系统资源。</li><li>参数：<ul><li><code>pthread_rwlock_t *rwptr</code>：指向之前通过<code>pthread_rwlock_init</code>成功初始化过的读写锁对象的指针。</li></ul></li></ul></li></ol><p>正确使用这两个函数的方式如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">pthread_rwlock_t</span> my_rwlock<span class="token punctuation">;</span><span class="token comment">// 初始化读写锁</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_rwlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_rwlock<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"pthread_rwlock_init failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用读写锁进行同步...</span><span class="token comment">// ...</span><span class="token comment">// 在不再需要读写锁时销毁它</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_rwlock_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_rwlock<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"pthread_rwlock_destroy failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 处理错误或选择忽略（取决于程序逻辑）</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在销毁读写锁前，必须确保没有任何线程正持有该锁（无论是读锁还是写锁），否则<code>pthread_rwlock_destroy</code>会失败并返回错误。</p><h4 id="获取和释放锁"><a href="#获取和释放锁" class="headerlink" title="获取和释放锁"></a>获取和释放锁</h4><ol><li><p><strong>pthread_rwlock_rdlock</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_rdlock</span><span class="token punctuation">(</span><span class="token class-name">pthread_rwlock_t</span> <span class="token operator">*</span>rwptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>功能：对给定的读写锁（<code>rwptr</code>）进行读取锁定。当调用此函数时，如果当前没有其他线程持有写入锁，并且没有正在等待获取写入锁的线程，则当前线程可以获得读取锁并开始读取共享资源。如果有写入锁被持有或有线程在等待写入锁，那么该函数会阻塞直到可以获取读取锁。</li><li>返回值：成功返回0，出错返回非零错误代码。</li></ul></li><li><p><strong>pthread_rwlock_wrlock</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_wrlock</span><span class="token punctuation">(</span><span class="token class-name">pthread_rwlock_t</span> <span class="token operator">*</span>rwptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>功能：对给定的读写锁（<code>rwptr</code>）进行写入锁定。当调用此函数时，无论是否有其他线程持有读取锁或者写入锁，都会阻塞直到当前线程能够获得写入锁。只有在没有任何线程持有读取锁或写入锁的情况下，当前线程才能获取写入锁并开始修改共享资源。</li><li>返回值：成功返回0，出错返回非零错误代码。</li></ul></li><li><p><strong>pthread_rwlock_unlock</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span><span class="token class-name">pthread_rwlock_t</span> <span class="token operator">*</span>rwptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>功能：释放一个之前通过<code>pthread_rwlock_rdlock</code>或<code>pthread_rwlock_wrlock</code>获取的读出锁或写入锁。调用此函数后，其他等待相同锁的线程（无论是读取还是写入请求）可能会被唤醒并有机会获取锁。</li><li>返回值：成功返回0，出错返回非零错误代码。</li></ul></li></ol><p>示例使用：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">pthread_rwlock_t</span> rwlock<span class="token punctuation">;</span><span class="token keyword">int</span> shared_data<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">pthread_rwlock_rdlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取shared_data</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Reader: Data is %d\n"</span><span class="token punctuation">,</span> shared_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token keyword">int</span> new_value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">pthread_rwlock_wrlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 修改shared_data</span>    shared_data <span class="token operator">=</span> new_value<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Writer: Updated data to %d\n"</span><span class="token punctuation">,</span> shared_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">pthread_rwlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建和启动多个读线程与写线程</span>    <span class="token comment">// 销毁读写锁</span>    <span class="token function">pthread_rwlock_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="非阻塞获得读锁和写锁"><a href="#非阻塞获得读锁和写锁" class="headerlink" title="非阻塞获得读锁和写锁"></a>非阻塞获得读锁和写锁</h4><ol><li><p><strong>pthread_rwlock_tryrdlock</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_tryrdlock</span><span class="token punctuation">(</span><span class="token class-name">pthread_rwlock_t</span> <span class="token operator">*</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>功能：尝试获取给定的读写锁（<code>rwlock</code>）的读取锁，但不阻塞。如果当前没有其他线程持有写入锁，并且没有正在等待获取写入锁的线程，则立即返回并成功获取读取锁。否则，如果无法立即获取读取锁，则该函数会立即返回一个错误值。</li><li>返回值：若成功获取读取锁则返回0，若无法立即获取锁则返回一个非零错误代码（如EBUSY），表示资源已经被锁定。</li></ul></li><li><p><strong>pthread_rwlock_trywrlock</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_trywrlock</span><span class="token punctuation">(</span><span class="token class-name">pthread_rwlock_t</span> <span class="token operator">*</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>功能：尝试获取给定的读写锁（<code>rwlock</code>）的写入锁，同样不会阻塞。只有在没有任何线程持有读取锁或写入锁的情况下，该函数才能立即返回并成功获取写入锁。否则，如果无法立即获取写入锁，则该函数会立即返回一个错误值。</li><li>返回值：若成功获取写入锁则返回0，若无法立即获取锁则返回一个非零错误代码（如EBUSY），表示资源已经被锁定。</li></ul></li></ol><p>使用这两个函数可以在需要避免阻塞时尝试获取锁，例如在实时系统或者不能无限期等待锁的地方：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">pthread_rwlock_t</span> rwlock<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">non_blocking_reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_rwlock_tryrdlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 成功获取读锁，执行读取操作</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Reader: Data is %d\n"</span><span class="token punctuation">,</span> shared_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Reader: Could not acquire read lock, data not read.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行其他操作或稍后重试</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">non_blocking_writer</span><span class="token punctuation">(</span><span class="token keyword">int</span> new_value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_rwlock_trywrlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 成功获取写锁，执行写入操作</span>        shared_data <span class="token operator">=</span> new_value<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Writer: Updated data to %d\n"</span><span class="token punctuation">,</span> shared_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Writer: Could not acquire write lock, data not updated.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行其他操作或稍后重试</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行结果-9"><a href="#运行结果-9" class="headerlink" title="运行结果"></a>运行结果</h3><pre class="line-numbers language-none"><code class="language-none">reader 1 is reading data.reader 2 is reading data.reader 3 is reading data.writer 5 is writing data.writer 4 is writing data.reader 1 reads data over.reader 2 reads data over.reader 3 reads data over.writer 5 writes data over.writer 4 writes data over.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>        <span class="token macro-name">READER_MAX</span>    <span class="token expression"><span class="token number">3</span>        </span><span class="token comment">/*最多允许多少人一起读取数据*/</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>        <span class="token macro-name">WRITER_MAX</span>    <span class="token expression"><span class="token number">2</span>        </span><span class="token comment">/*最多允许多少人写数据*/</span></span><span class="token class-name">pthread_rwlock_t</span>    rw_lock<span class="token punctuation">;</span>        <span class="token comment">/*读写锁*/</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">reader_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token comment">//your code here</span>t <span class="token operator">=</span> <span class="token function">pthread_rwlock_tryrdlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//end of your code</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"reader %u can't read data.\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"reader %u is reading data.\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"reader %u reads data over.\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">writer_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token comment">//your code here</span>t <span class="token operator">=</span> <span class="token function">pthread_rwlock_tryrdlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//end of your code</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"writer %u can't write data.\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"writer %u is writing data.\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"writer %u writes data over.\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">pthread_t</span> reader<span class="token punctuation">,</span> writer<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token function">pthread_rwlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw_lock<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> READER_MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>reader<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> reader_thread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> WRITER_MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>writer<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> writer_thread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一次初始化"><a href="#一次初始化" class="headerlink" title="一次初始化"></a>一次初始化</h2><ul><li><code>pthread_once</code>一次初始化</li></ul><p>在多线程环境中，有些事仅需要执行一次。通常当初始化应用程序时，可以比较容易地将其放在main函数中。但当你写一个库时，就不能在main里面初始化了，你可以用静态初始化，但使用一次初始化（pthread_once）会比较容易些。</p><p>在多线程编程环境下，尽管pthread_once()调用会出现在多个线程中，init_routine()函数仅执行一次，究竟在哪个线程中执行是不定的，是由内核调度来决定。</p><p><code>pthread_once</code>是POSIX线程库中的一个函数，用于确保某个初始化函数在整个程序生命周期内只被执行一次。这对于那些需要单次初始化且初始化过程必须在多线程环境下安全执行的情况非常有用。</p><p>函数原型：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_once</span><span class="token punctuation">(</span><span class="token class-name">pthread_once_t</span> <span class="token operator">*</span>once_control<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>init_routine<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数解析：</p><ul><li><code>pthread_once_t *once_control</code>：指向一个pthread_once_t类型的变量的指针。这个变量是用来跟踪初始化是否已经完成的状态标志。</li><li><code>void (*init_routine)(void)</code>：这是一个指向无参数、无返回值函数的指针，即初始化函数。当<code>pthread_once</code>检测到初始化尚未执行时，它将调用这个函数进行初始化。</li></ul><p>功能描述：<br><code>pthread_once</code>函数会检查<code>once_control</code>指向的控制变量状态，如果初始化尚未执行，则调用<code>init_routine</code>函数进行初始化，并设置控制变量为已初始化状态。此函数保证了在多线程环境中即使多个线程同时调用<code>pthread_once</code>，初始化函数也只会被执行一次。</p><p>示例使用：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">static</span> <span class="token class-name">pthread_once_t</span> once_control <span class="token operator">=</span> PTHREAD_ONCE_INIT<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> shared_resource<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initialize_shared_resource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里进行一次性初始化操作</span>    shared_resource <span class="token operator">=</span> <span class="token function">calculate_initial_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">access_shared_resource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">pthread_once</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>once_control<span class="token punctuation">,</span> initialize_shared_resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 现在可以安全地访问shared_resource了</span>    <span class="token function">use_shared_resource</span><span class="token punctuation">(</span>shared_resource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>initialize_shared_resource</code>函数只有在第一次调用<code>access_shared_resource</code>函数并传递给<code>pthread_once</code>时才会被执行。后续对<code>access_shared_resource</code>的调用将直接跳过初始化阶段，因为<code>once_control</code>已经被标记为已初始化状态。</p><h3 id="运行结果-10"><a href="#运行结果-10" class="headerlink" title="运行结果"></a>运行结果</h3><pre class="line-numbers language-none"><code class="language-none">thread 1 entersthread 2 entersonce_run in thread 1thread 1 returnsthread 2 returns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token class-name">pthread_once_t</span> once <span class="token operator">=</span> PTHREAD_ONCE_INIT<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">once_run</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"once_run in thread %u\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">child1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> arg<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token class-name">pthread_t</span> tid <span class="token operator">=</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread %u enters\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//your code here</span>    <span class="token function">pthread_once</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>once<span class="token punctuation">,</span>once_run<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//end of your code</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread %u returns\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">child2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> arg<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token class-name">pthread_t</span> tid <span class="token operator">=</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread %u enters\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//your code here</span>    <span class="token function">pthread_once</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>once<span class="token punctuation">,</span>once_run<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//end of your code</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread %u returns\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token class-name">pthread_t</span> tid1<span class="token punctuation">,</span>tid2<span class="token punctuation">;</span>      <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>child1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>child2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="发送sig信号"><a href="#发送sig信号" class="headerlink" title="发送sig信号"></a>发送sig信号</h2><p>本节展示了发送sig信号的方法。</p><h3 id="基本知识-2"><a href="#基本知识-2" class="headerlink" title="基本知识"></a>基本知识</h3><ul><li><code>pthread_kill</code>发送sig信号</li></ul><p><code>pthread_kill</code>并不是结束进程的意思，而是向指定ID的线程发送一个信号，只是大部分信号的默认动作是终止进程的运行。<br>如果线程不处理该信号，则按照信号默认的行为作用于整个进程。信号值0为保留信号，作用是根据函数的返回值判断线程是不是还活着。<br><code>pthread_kill</code>的返回值：成功（0） 线程不存在（ESRCH） 信号不合法（EINVAL）</p><h3 id="函数说明-10"><a href="#函数说明-10" class="headerlink" title="函数说明"></a>函数说明</h3><p><code>pthread_kill</code>，用于向指定的线程发送信号。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_kill</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> thread<span class="token punctuation">,</span> <span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数解析：</p><ul><li><code>pthread_t thread</code>：这是目标线程的标识符，可以通过调用<code>pthread_create</code>函数创建线程时返回的值获取。</li><li><code>int sig</code>：要发送给线程的信号。这个参数可以是POSIX定义的任何有效信号（例如SIGTERM、SIGINT等），或者自定义信号（如1~31之间的数字）。</li></ul><p>功能描述：<br><code>pthread_kill</code>函数允许主线程或者其他线程向指定的线程发送一个信号。当目标线程接收到该信号后，它会根据预先注册的信号处理函数（通过<code>signal</code>或<code>sigaction</code>设置）来处理这个信号，或者是默认的行为（比如对于SIGTERM，通常会导致进程&#x2F;线程终止）。</p><p>示例使用：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">signal_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Signal %d received in the thread\n"</span><span class="token punctuation">,</span> signum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread_function</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">signal</span><span class="token punctuation">(</span>SIGUSR1<span class="token punctuation">,</span> signal_handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注册信号处理器</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread_function<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"pthread_create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待线程开始运行</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pthread_kill</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> SIGUSR1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 向线程发送SIGUSR1信号</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"pthread_kill"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待线程结束</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，我们创建了一个新的线程，并在其中注册了SIGUSR1信号的处理函数。然后，在主线程中使用<code>pthread_kill</code>向子线程发送SIGUSR1信号，触发其内部的信号处理函数执行。</p><h3 id="运行结果-11"><a href="#运行结果-11" class="headerlink" title="运行结果"></a>运行结果</h3><pre class="line-numbers language-none"><code class="language-none">ID 0x1 thread exits.ID 0x1 thread exits.ID 0x2 thread stays alive now.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ID 0x%x thread exits.\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ID 0x%x thread exits。\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test_pthread</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> tid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> pthread_kill_err<span class="token punctuation">;</span><span class="token comment">//your code here</span>    pthread_kill_err <span class="token operator">=</span> <span class="token function">pthread_kill</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//end of your code</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pthread_kill_err <span class="token operator">==</span> ESRCH<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ID 0x%x thread exits.\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pthread_kill_err <span class="token operator">==</span> EINVAL<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"invalid signal\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ID 0x%x thread stays alive now.\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token class-name">pthread_t</span> tid1<span class="token punctuation">,</span>tid2<span class="token punctuation">;</span>        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>func1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>func2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test_pthread</span><span class="token punctuation">(</span>tid1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">test_pthread</span><span class="token punctuation">(</span>tid2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MPI</title>
      <link href="/posts/e16d.html"/>
      <url>/posts/e16d.html</url>
      
        <content type="html"><![CDATA[<h1 id="MPI"><a href="#MPI" class="headerlink" title="MPI"></a>MPI</h1><p>MPI（Message Passing Interface，消息传递接口）</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>MPI_INT：整数类型，对应C语言中的int类型。</li><li>MPI_FLOAT：单精度浮点数类型，对应C语言中的float类型。</li><li>MPI_DOUBLE：双精度浮点数类型，对应C语言中的double类型。</li><li>MPI_CHAR：字符类型，对应C语言中的char类型。</li><li>MPI_LOGIC：逻辑类型，对应C语言中的_Bool类型（在stdbool.h头文件中定义）</li></ul><h2 id="MPI-Op"><a href="#MPI-Op" class="headerlink" title="MPI_Op"></a>MPI_Op</h2><p>MPI_Op是一个枚举类型，它定义了各种操作符，这些操作符可以用于执行元素级别的操作。以下是一些常用的操作符：</p><ul><li>MPI_OP_NULL：用于初始化操作对象。</li><li>MPI_MAX：用于找出数组中的最大值。</li><li>MPI_MIN：用于找出数组中的最小值。</li><li>MPI_SUM：用于计算数组中所有元素的和。</li><li>MPI_PROD：用于计算数组中所有元素的乘积。</li><li>MPI_LAND：用于执行元素级别的“与”操作。</li><li>MPI_BAND：用于执行元素级别的“或非”操作。</li></ul><h2 id="第一个MPI程序"><a href="#第一个MPI程序" class="headerlink" title="第一个MPI程序"></a>第一个MPI程序</h2><p>首先，我们应该先包含进一个头文件<code>&lt;mpi.h&gt;</code></p><p>MPI程序和普通的C程序的区别在于有一个开始的函数和结束的函数来标识MPI部分，再在这个部分进行你想要进行的操作</p><h3 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h3><h4 id="MPI-Init"><a href="#MPI-Init" class="headerlink" title="MPI_Init( )"></a>MPI_Init( )</h4><p>MPI_Init( )：进入MPI环境并完成所有的初始化工作，标志并行代码的开始</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>int MPI_Init(int *argc, char **argv)</code> ，用于初始化MPI环境</p><p>参数说明：</p><ul><li><code>argc</code>：指向整数的指针，表示命令行参数的数量。</li><li><code>argv</code>：指向字符指针的指针，表示命令行参数的值。</li></ul><p>返回值：</p><ul><li>函数执行成功时返回0。</li><li>如果发生错误，则返回非零错误代码。</li></ul><h4 id="MPI-Finalize"><a href="#MPI-Finalize" class="headerlink" title="MPI_Finalize( )"></a>MPI_Finalize( )</h4><p>MPI_Finalize( )：从MPI环境中退出，标志并行代码的结束</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>int MPI_Finalize(void)</code> ，用于结束MPI环境。</p><p>返回值：</p><ul><li>函数执行成功时返回0。</li><li>如果发生错误，则返回非零错误代码。</li></ul><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//your code here</span>    <span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//end of your code </span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取进程数量"><a href="#获取进程数量" class="headerlink" title="获取进程数量"></a>获取进程数量</h2><p>在MPI编程中，我们常常需要获取指定通信域的进程个数，以确定程序的规模。</p><p>一组可以相互发送消息的进程集合叫做通信子，通常由<code>MPI_Init()</code>在用户启动程序时，定义由用户启动的所有进程所组成的通信子，缺省值为 <em>MPI_COMM_WORLD</em> 。这个参数是MPI通信操作函数中必不可少的参数，用于限定参加通信的进程的范围。</p><h3 id="函数说明-1"><a href="#函数说明-1" class="headerlink" title="函数说明"></a>函数说明</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_Comm comm<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>rank<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>int MPI_Comm_size(MPI_Comm comm, int *rank)</code> ，获取指定通信域的进程个数。</p><p>参数说明：</p><ul><li><code>comm</code>：通信器对象，表示一组进程之间的通信关系。</li><li><code>rank</code>：指向整数的指针，用于存储进程数量。</li></ul><p>返回值：</p><ul><li>函数执行成功时返回0。</li><li>如果发生错误，则返回非零错误代码。</li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> world_size<span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>world_size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取MPI_COMM_WORLD通信器中的进程数量</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Number of processes: %d\n"</span><span class="token punctuation">,</span> world_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，<code>MPI_Comm_size(MPI_COMM_WORLD, &amp;world_size)</code> 将获取默认通信器（<code>MPI_COMM_WORLD</code>，通常包含所有参与执行的应用程序进程）中的进程数量，并将其存储在 <code>world_size</code> 变量中。</p><h3 id="实验说明"><a href="#实验说明" class="headerlink" title="实验说明"></a>实验说明</h3><p>使用函数MPI_Comm_size获取通信域中的进程个数并打印出来。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//your code here</span><span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//end of your code</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!I'm rank %d of %d\n"</span><span class="token punctuation">,</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取进程id"><a href="#获取进程id" class="headerlink" title="获取进程id"></a>获取进程id</h2><p>同样，我们也常常需要输出当前进程的id，以此来判断具体哪个进程完成了对应的任务。</p><h3 id="函数说明-2"><a href="#函数说明-2" class="headerlink" title="函数说明"></a>函数说明</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_Comm comm<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>rank<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>int MPI_Comm_rank(MPI_Comm comm, int *rank)</code> ，用于获取当前进程在指定通信器中的编号。</p><p>参数说明：</p><ul><li><code>comm</code>：通信器对象，表示一组进程之间的通信关系。</li><li><code>rank</code>：指向整数的指针，用于存储当前进程的编号。</li></ul><p>返回值：</p><ul><li>函数执行成功时返回0。</li><li>如果发生错误，则返回非零错误代码。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> world_rank<span class="token punctuation">;</span>    <span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>world_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello from rank %d\n"</span><span class="token punctuation">,</span> world_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实验说明-1"><a href="#实验说明-1" class="headerlink" title="实验说明"></a>实验说明</h3><p>在每个进程中，使用函数MPI_Comm_rank来获取当前进程的id并打印出来。</p><p>输出结果：由于并行程序执行顺序的不确定性，你的结果的顺序可能和这个结果不一致。</p><p>0</p><p>1</p><p>3</p><p>2</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//your code here</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//end of your code</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!I'm rank %d of %d\n"</span><span class="token punctuation">,</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h2><p>在并行编程中，消息传递占了很大的比重。良好的消息传递是正常完成进程&#x2F;节点之间操作的基本条件</p><p>在这里先介绍的最基本发送&#x2F;接收函数</p><p>最基本的发送 &#x2F; 接收函数都是以缓冲区作为端点，通过参数配置来完成指定操作</p><h3 id="函数说明-3"><a href="#函数说明-3" class="headerlink" title="函数说明"></a>函数说明</h3><h4 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h4><p>发送缓冲区中的信息到目标进程</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> msg_buf_p<span class="token punctuation">,</span>  <span class="token keyword">int</span> msg_size<span class="token punctuation">,</span>  MPI_Datatype msg_type<span class="token punctuation">,</span> <span class="token keyword">int</span> dest<span class="token punctuation">,</span>  <span class="token keyword">int</span> tag<span class="token punctuation">,</span>   MPI_Comm communicator<span class="token punctuation">)</span>   缓冲区的起始地址    缓冲区大小  发送信息的数据类型   目标进程的id 消息标签  通信子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>MPI_Send(void* msg_buf_p, int msg_size, MPI_Datatype msg_type, int dest, int tag, MPI_Comm communicator)</code> ，用于将数据从源进程发送到目标进程。</p><p>参数说明：</p><ul><li><code>msg_buf_p</code>：指向要发送数据的缓冲区的指针。</li><li><code>msg_size</code>：要发送的数据的大小（以字节为单位）。</li><li><code>msg_type</code>：数据的类型。</li><li><code>dest</code>：目标进程的标识符。</li><li><code>tag</code>：一个整数标签，用于区分不同的消息。</li><li><code>communicator</code>：通信器对象，表示一组进程之间的通信关系。</li></ul><p>返回值：</p><ul><li>函数执行成功时返回0。</li><li>如果发生错误，则返回非零错误代码。</li></ul><h4 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> msg_buf_p<span class="token punctuation">,</span> <span class="token keyword">int</span> buf_size<span class="token punctuation">,</span> MPI_Datatype msg_type<span class="token punctuation">,</span> <span class="token keyword">int</span> source<span class="token punctuation">,</span> <span class="token keyword">int</span> tag<span class="token punctuation">,</span> MPI_Comm communicator， MPI_Status <span class="token operator">*</span>status_p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用于在并行计算环境中接收来自特定源进程的数据，并将其存储在指定的接收缓冲区中。</p><ul><li><code>void* msg_buf_p</code>: 这是指向接收缓冲区的指针。该缓冲区将存储从源进程接收到的数据。</li><li><code>int buf_size</code>: 这是接收缓冲区的大小（以字节为单位）。它应该与发送缓冲区的大小相匹配。</li><li><code>MPI_Datatype msg_type</code>: 这是指定接收缓冲区中数据类型的MPI数据类型对象。</li><li><code>int source</code>: 这是发送数据的源进程的标识符。MPI库将只从这个进程接收数据。</li><li><code>int tag</code>: 这是用于区分不同消息的整数标签。如果两个进程同时发送数据，它们可以使用不同的标签来区分它们的消息。</li><li><code>MPI_Comm communicator</code>: 这是通信器对象，它定义了进程组和通信模式。在这个例子中，通信器对象表示一个并行计算环境。</li><li><code>MPI_Status *status_p</code>: 这是指向MPI状态对象的指针。MPI状态对象包含了关于接收操作的信息，如是否成功接收到数据、接收时间等。</li></ul><h3 id="实验说明-2"><a href="#实验说明-2" class="headerlink" title="实验说明"></a>实验说明</h3><p>把id为0的进程当作根进程，然后在除此之外的进程中使用函数MPI_Send发送一句”hello world!”到根进程中，然后在根进程中把这些信息打印出来。</p><p>输出结果：一系列的”hello world!”</p><blockquote><p>字符串的名字就是字符串的首地址。在C语言中，字符串是由字符数组表示的，每个字符都有一个唯一的地址。所以，字符串的名字实际上就是指向字符串首字符的指针。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">,</span> source<span class="token punctuation">;</span>MPI_Status status<span class="token punctuation">;</span><span class="token keyword">char</span> message<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>myid <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//your code here</span>    <span class="token function">MPI_Send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> MPI_CHAR<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//end of your code</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         <span class="token comment">//myid == 0</span><span class="token keyword">for</span><span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> source<span class="token operator">&lt;</span>numprocs<span class="token punctuation">;</span> source<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//your code here</span><span class="token function">MPI_Recv</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> MPI_CHAR<span class="token punctuation">,</span> source<span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//end of your code</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="规约（reduce）"><a href="#规约（reduce）" class="headerlink" title="规约（reduce）"></a>规约（reduce）</h2><p>在现实生活中，我们常常需要对于数据做同一种操作，并将结果返回到指定的进程中，这个过程称为集合通信。例如，将数据分散到各个进程中，先在各个进程内进行求和，再在全局完成求和-平均这个操作，这个过程是一个规约的过程。</p><p>一般来说，集合通信包括通信、同步和计算三个功能。不过，目前我们暂时不需要关注整个过程，而是先使用一个规约函数去体验一下集合通信。</p><h3 id="函数说明-4"><a href="#函数说明-4" class="headerlink" title="函数说明"></a>函数说明</h3><blockquote><p>规约函数，所有进程将待处理数据通过输入的操作子operator计算为最终结果并将它存入目标进程中。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Reduce</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> input_data_p<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> output_data_p<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> MPI_Datatype datatype<span class="token punctuation">,</span> MPI_Op operator<span class="token punctuation">,</span> <span class="token keyword">int</span> dest_process<span class="token punctuation">,</span> MPI_Comm comm<span class="token punctuation">)</span>进程的待处理数据存放的地址； 存放最终结果的目标进程的地址；缓冲区中的数据个数；数据类型；操作子（加减）；目标进程的编号；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>int MPI_Reduce(void * input_data_p, void * output_data_p, int count, MPI_Datatype datatype, MPI_Op operator, int dest_process, MPI_Comm comm)</code> ，用于将数据从源进程收集到目标进程。</p><p>参数说明：</p><ul><li><code>input_data_p</code>：指向输入数据的指针。</li><li><code>output_data_p</code>：指向输出数据的指针。</li><li><code>count</code>：要处理的元素数量。</li><li><code>datatype</code>：数据类型。</li><li><code>operator</code>：MPI操作符，用于指定如何组合输入数据以生成输出数据。</li><li><code>dest_process</code>：目标进程的标识符。</li><li><code>comm</code>：通信器对象，表示一组进程之间的通信关系。</li></ul><p>返回值：</p><ul><li>函数执行成功时返回0。</li><li>如果发生错误，则返回非零错误代码。</li></ul></blockquote><blockquote><p><code>MPI_Reduce()</code>函数是Message Passing Interface (MPI) 库中用于并行计算的一个重要函数，主要用于在一组进程间对数据进行规约操作（如求和、最大值、最小值等）。以下是该函数的详细解析：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">MPI_Reduce</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>input_data_p<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>output_data_p<span class="token punctuation">,</span>             <span class="token keyword">int</span> count<span class="token punctuation">,</span> MPI_Datatype datatype<span class="token punctuation">,</span>             MPI_Op op<span class="token punctuation">,</span> <span class="token keyword">int</span> dest_process<span class="token punctuation">,</span>             MPI_Comm comm<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>参数解释：</strong></p><ul><li><p><code>void *input_data_p</code>: 指向参与规约操作的输入缓冲区的指针。每个进程提供一块相同大小的数据区域，这些数据将按照指定的操作符被规约。</p></li><li><p><code>void *output_data_p</code>: 指向规约结果存储位置的指针。只有指定的目标进程（dest_process）会接收到最终的规约结果。</p></li><li><p><code>int count</code>: 表示要处理的数据元素个数。例如，如果datatype是MPI_INT且count为10，则表示有10个整数参与规约。</p></li><li><p><code>MPI_Datatype datatype</code>: 指定参与规约的数据类型，可以是MPI预定义的类型，如MPI_INT、MPI_FLOAT、MPI_DOUBLE等，也可以是用户自定义的复合数据类型。</p></li><li><p><code>MPI_Op op</code>: 指定要执行的规约操作，例如MPI_SUM（求和）、MPI_MAX（求最大值）、MPI_MIN（求最小值）等。也可以通过MPI_Op_create自定义规约操作。</p></li><li><p><code>int dest_process</code>: 规约结果存放的目标进程的 rank（标识符）。所有进程都将它们的局部结果发送到这个目标进程，然后由目标进程执行最后的规约操作得到全局结果。</p></li><li><p><code>MPI_Comm comm</code>: 指定通信器，通常是一个进程组（communicator），如MPI_COMM_WORLD，它包含了参与规约的所有进程。</p></li></ul></li></ul><p>函数返回一个整数值，若成功则返回MPI_SUCCESS，否则返回错误代码。</p><p>示例用法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> my_rank<span class="token punctuation">,</span> size<span class="token punctuation">;</span>    <span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>my_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> local_sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token comment">// 假设我们已经填充了本地数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        local_sum <span class="token operator">+=</span> some_local_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">double</span> global_sum<span class="token punctuation">;</span>    <span class="token function">MPI_Reduce</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>local_sum<span class="token punctuation">,</span> <span class="token operator">&amp;</span>global_sum<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_DOUBLE<span class="token punctuation">,</span> MPI_SUM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>my_rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The global sum is: %f\n"</span><span class="token punctuation">,</span> global_sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，所有进程都会计算其本地数据之和，然后通过<code>MPI_Reduce</code>函数将各自的局部和规约成一个全局总和，结果存储在rank为0的进程中。</p></blockquote><blockquote><p>在上面的示例中，<code>count</code>设置为1表示每个进程中参与规约操作的数据元素个数为1。这意味着我们正在对单个double类型的数值进行规约。</p><p>然而，在实际应用中，<code>count</code>可以根据需要设置成任意大于0的整数。例如，如果每个进程有一段包含多个相同类型数据（如一个double数组）的缓冲区，并希望对这些数据进行规约，那么<code>count</code>应设为该数组的元素个数。</p><p>假设每个进程都有一个长度为100的double数组，想要求和：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> local_data<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 初始化local_data...</span><span class="token keyword">double</span> global_sum<span class="token punctuation">;</span><span class="token function">MPI_Reduce</span><span class="token punctuation">(</span>local_data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>global_sum<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> MPI_DOUBLE<span class="token punctuation">,</span> MPI_SUM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>count</code>被设置为100，表示每个进程将它所拥有的100个double元素进行规约。最终结果是一个全局的总和，存储在rank为0的进程中的<code>global_sum</code>变量中。</p></blockquote><h3 id="实验说明-3"><a href="#实验说明-3" class="headerlink" title="实验说明"></a>实验说明</h3><p>使用函数MPI_Reduce来完成加法规约到根进程的操作，并在根进程打印出总和和平均值。</p><p>输出结果：由于这里是测试用例，所以每个进程的数值都是取3.0。所以，输出的平均值应该是3。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">;</span><span class="token keyword">double</span> local_num <span class="token operator">=</span> <span class="token number">3.0</span><span class="token punctuation">;</span> <span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> global_num<span class="token punctuation">;</span>        <span class="token comment">//your code here</span>    <span class="token function">MPI_Reduce</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>local_num<span class="token punctuation">,</span> <span class="token operator">&amp;</span>global_num<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_DOUBLE<span class="token punctuation">,</span> MPI_SUM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//end of your code</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>myid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Total sum = %f, avg = %f\n"</span><span class="token punctuation">,</span> global_num<span class="token punctuation">,</span> global_num <span class="token operator">/</span> numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="广播（Bcast）"><a href="#广播（Bcast）" class="headerlink" title="广播（Bcast）"></a>广播（Bcast）</h2><p>在一个集合通信中，如果属于一个进程的数据被发送到通信子中的所有进程，这样的集合通信叫做广播。</p><h3 id="函数说明-5"><a href="#函数说明-5" class="headerlink" title="函数说明"></a>函数说明</h3><p>广播函数，从一个id值为source的进程将一条消息广播发送到通信子内的所有进程,包括它本身在内。</p><pre class="line-numbers language-none"><code class="language-none">int MPI_Bcast(void* buffer, int count, MPI_Datatype datatype, int source, MPI_Comm comm)缓冲区起始地址； 缓冲区数据个数； 数据类型； 发送信息的进程id； 通信子； <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>int MPI_Bcast(void* buffer, int count, MPI_Datatype datatype, int source, MPI_Comm comm)</code> ，用于在并行计算中广播数据。</p><p>参数说明：</p><ul><li><code>buffer</code>：指向要广播的缓冲区的指针。</li><li><code>count</code>：要广播的元素数量。</li><li><code>datatype</code>：缓冲区中元素的数据类型。</li><li><code>source</code>：广播数据的源进程的标识符。如果为0，则表示使用默认的源进程。</li><li><code>comm</code>：通信器对象，表示一组进程之间的通信关系。</li></ul><p>返回值：</p><ul><li>函数执行成功时返回0。</li><li>如果发生错误，则返回非零错误代码。</li></ul><blockquote><p><code>MPI_Bcast</code>，用于在并行计算环境中的所有进程间进行广播操作。该函数将源进程（由参数<code>source</code>指定）的数据广播到 communicator (<code>comm</code>) 中的其他所有进程中。</p><p>函数原型：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Bcast</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> MPI_Datatype datatype<span class="token punctuation">,</span> <span class="token keyword">int</span> source<span class="token punctuation">,</span> MPI_Comm comm<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数解析：</p><ul><li><p><code>void* buffer</code>: 指向要发送或接收数据的缓冲区的指针。在非源进程中，这个缓冲区会被来自<code>source</code>进程的数据覆盖；在源进程中，它包含要广播的数据。</p></li><li><p><code>int count</code>: 要发送或接收的数据元素个数。例如，如果数据类型为<code>MPI_INT</code>，则<code>count</code>表示整数的数量。</p></li><li><p><code>MPI_Datatype datatype</code>: 数据类型的标识符，可以是预定义的基本类型如<code>MPI_INT</code>、<code>MPI_DOUBLE</code>等，也可以是用户自定义的复合类型。</p></li><li><p><code>int source</code>: 广播源进程的rank（编号）。只有这个进程提供数据，其余所有进程都会接收到同样的数据。</p></li><li><p><code>MPI_Comm comm</code>: 通信器，它定义了参与此次广播的所有进程集合。通常使用<code>MPI_COMM_WORLD</code>，即包含了所有参与计算的进程。</p></li></ul><p>函数返回值：<br><code>MPI_Bcast</code>函数返回一个<code>int</code>型数值，如果成功完成，则返回<code>MPI_SUCCESS</code>，否则返回错误代码。</p><p>功能描述：<br><code>MPI_Bcast</code>函数使得所有进程中的<code>buffer</code>区域内容相同，其内容来源于<code>source</code>进程的相应内存区域。这样，在并行程序中，一个进程可以通过广播的方式快速地将其数据同步给其他所有进程。</p></blockquote><h3 id="实验说明-4"><a href="#实验说明-4" class="headerlink" title="实验说明"></a>实验说明</h3><p>使用函数MPI_Bcast在根进程中发送一个数组到其他进程，并在其他进程中打印出来。</p><p>输出结果：<br>In process 1, arr[0]&#x3D;1 arr[1]&#x3D;2 arr[2]&#x3D;3 arr[3]&#x3D;4 arr[4]&#x3D;5<br>In process 3, arr[0]&#x3D;1 arr[1]&#x3D;2 arr[2]&#x3D;3 arr[3]&#x3D;4 arr[4]&#x3D;5<br>…<br>In process n, arr[0]&#x3D;1 arr[1]&#x3D;2 arr[2]&#x3D;3 arr[3]&#x3D;4 arr[4]&#x3D;5<br>…</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">;</span><span class="token keyword">int</span> source <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>myid <span class="token operator">==</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//your code here</span>    <span class="token function">MPI_Bcast</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> source<span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//end of your code</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>myid <span class="token operator">!=</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"In process %d, "</span><span class="token punctuation">,</span> myid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr[%d]=%d\t"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="收集（gather）"><a href="#收集（gather）" class="headerlink" title="收集（gather）"></a>收集（gather）</h2><p>有时候我们希望在一个进程中从所有进程获取信息，例如将所有进程中的一个数组都收集到根进程中作进一步的处理，这样的集合通信我们叫做收集。</p><h3 id="函数说明-6"><a href="#函数说明-6" class="headerlink" title="函数说明"></a>函数说明</h3><p>收集函数，根进程（目标进程）从所有进程（包括它自己）收集发送缓冲区的数据，再根据发送这些数据的进程id将它们依次存放到自已的缓冲区中</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Gather</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> sendbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> sendcount<span class="token punctuation">,</span> MPI_Datatype sendtype<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> recvbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> recvcount<span class="token punctuation">,</span> MPI_Datatype recvtype<span class="token punctuation">,</span> <span class="token keyword">int</span> root<span class="token punctuation">,</span> MPI_Comm comm<span class="token punctuation">)</span> 发送缓冲区的起始地址；发送的数据个数；数据类型；接收缓冲区的起始地址；待接收的元素个数；接收的数据类型；接收进程id ；通信子 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>int MPI_Gather(void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm)</code> ，用于将一个进程的局部数据收集到根进程中。</p><p>参数说明：</p><ul><li><code>sendbuf</code>：指向发送缓冲区的指针，该缓冲区包含要发送的数据。</li><li><code>sendcount</code>：要发送的元素数量。</li><li><code>sendtype</code>：发送缓冲区中元素的数据类型。</li><li><code>recvbuf</code>：指向接收缓冲区的指针，该缓冲区将存储接收到的数据。</li><li><code>recvcount</code>：每个进程应接收的元素数量。</li><li><code>recvtype</code>：接收缓冲区中元素的数据类型。</li><li><code>root</code>：根进程的标识符，即数据分发的起点。</li><li><code>comm</code>：通信器对象，表示一组进程之间的通信关系。</li></ul><p>返回值：</p><ul><li>函数执行成功时返回0。</li><li>如果发生错误，则返回非零错误代码。</li></ul><h3 id="实验说明："><a href="#实验说明：" class="headerlink" title="实验说明："></a>实验说明：</h3><p>使用函数MPI_Gather在根进程中从所有进程接收一个数组，并在根进程中打印出来。</p><p>输出结果：<br>Now is process 1’s data: arr[0]&#x3D;1 arr[1]&#x3D;2 arr[2]&#x3D;3 arr[3]&#x3D;4 arr[4]&#x3D;5<br>Now is process 4’s data: arr[0]&#x3D;1 arr[1]&#x3D;2 arr[2]&#x3D;3 arr[3]&#x3D;4 arr[4]&#x3D;5<br>Now is process 2’s data: arr[0]&#x3D;1 arr[1]&#x3D;2 arr[2]&#x3D;3 arr[3]&#x3D;4 arr[4]&#x3D;5<br>…<br>Now is process n’s data: arr[0]&#x3D;1 arr[1]&#x3D;2 arr[2]&#x3D;3 arr[3]&#x3D;4 arr[4]&#x3D;5</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">;</span><span class="token keyword">int</span> dest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>rbuf<span class="token punctuation">;</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>myid <span class="token operator">==</span> dest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    rbuf<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>numprocs<span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//your code here</span><span class="token function">MPI_Gather</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> rbuf<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//end of your code</span><span class="token keyword">if</span><span class="token punctuation">(</span>myid <span class="token operator">==</span> dest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>dest<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numprocs<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now is process %d's data: "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"array[%d]=%d\t"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> rbuf<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="散发（scatter）"><a href="#散发（scatter）" class="headerlink" title="散发（scatter）"></a>散发（scatter）</h2><p>在前面我们学习了收集（gather）操作，那么与之相对应也有一个相反的集合通信操作，即根进程向所有进程发送缓冲区的数据，称为散发。</p><p>需要特别说明的是，散发操作和广播操作的区别在于发送到各个进程的信息可以是不同的。</p><h3 id="函数说明-7"><a href="#函数说明-7" class="headerlink" title="函数说明"></a>函数说明</h3><blockquote><p>MPI_SCATTER是MPI_GATHER的逆操作，另外一种解释是根进程通过MPI_Send发送一条消息,这条消息被分成n等份,第i份发送给组中的第i个处理器, 然后每个处理器如上所述接收相应的消息。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Scatter</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> sendbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> sendcount<span class="token punctuation">,</span> MPI_Datatype sendtype<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> recvbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> recvcount<span class="token punctuation">,</span> MPI_Datatype recvtype<span class="token punctuation">,</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> MPI_Comm comm<span class="token punctuation">)</span> 发送缓冲区的起始地址；发送的数据个数；数据类型；接收缓冲区的起始地址；待接收的元素个数；数据类型；发送进程id；通信子 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>int MPI_Scatter(void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype,int root, MPI_Comm comm)</code> ，用于在并行计算中将数据从根进程分散到其他所有进程。</p><p>参数说明：</p><ul><li><code>sendbuf</code>：指向发送缓冲区的指针，该缓冲区包含要发送的数据。</li><li><code>sendcount</code>：要发送的元素数量。</li><li><code>sendtype</code>：发送缓冲区中元素的数据类型。</li><li><code>recvbuf</code>：指向接收缓冲区的指针，该缓冲区将存储接收到的数据。</li><li><code>recvcount</code>：每个进程应接收的元素数量。</li><li><code>recvtype</code>：接收缓冲区中元素的数据类型。</li><li><code>root</code>：根进程的标识符，即数据分发的起点。</li><li><code>comm</code>：通信器对象，表示一组进程之间的通信关系。</li></ul><p>返回值：</p><ul><li>函数执行成功时返回0。</li><li>如果发生错误，则返回非零错误代码。</li></ul><p>使用示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rank<span class="token punctuation">,</span> size<span class="token punctuation">;</span>    <span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rank<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sendbuf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> recvbuf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 根进程初始化发送缓冲区</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sendbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 使用MPI_Scatter进行数据分发</span>    <span class="token function">MPI_Scatter</span><span class="token punctuation">(</span>sendbuf<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> recvbuf<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Process %d received data: "</span><span class="token punctuation">,</span> rank<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> recvbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述示例演示了如何使用<code>MPI_Scatter</code>函数将数据从根进程分散到其他所有进程。根进程初始化发送缓冲区，然后调用<code>MPI_Scatter</code>函数进行数据分发。其他进程接收到数据后，将其打印出来。</p></blockquote><h3 id="实验说明：-1"><a href="#实验说明：-1" class="headerlink" title="实验说明："></a>实验说明：</h3><p>使用函数MPI_Scatter在根进程中向所有进程发送对应数组，并在对应进程中打印出来。</p><p>输出结果：<br>Now is process 1: arr[0]&#x3D;5 arr[1]&#x3D;6 arr[2]&#x3D;7 arr[3]&#x3D;8 arr[4]&#x3D;9<br>Now is process 4: arr[0]&#x3D;20 arr[1]&#x3D;21 arr[2]&#x3D;22 arr[3]&#x3D;23 arr[4]&#x3D;24<br>Now is process 2: arr[0]&#x3D;10 arr[1]&#x3D;11 arr[2]&#x3D;12 arr[3]&#x3D;13 arr[4]&#x3D;14<br>…<br>Now is process n: arr[0]&#x3D;5<em>n arr[1]&#x3D;5</em>n+1 arr[2]&#x3D;5<em>n+2 arr[3]&#x3D;5</em>n+3 arr[4]&#x3D;5*n+4<br>…</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">;</span><span class="token keyword">int</span> source <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>sbuf<span class="token punctuation">;</span><span class="token keyword">int</span> rbuf<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>myid <span class="token operator">==</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sbuf<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>numprocs<span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numprocs<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// your code here</span>    <span class="token function">MPI_Scatter</span><span class="token punctuation">(</span>sbuf<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> rbuf<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> source<span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// end of your code</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now is process %d: "</span><span class="token punctuation">,</span> myid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"array[%d]=%d\t"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> rbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Reduce和Gatherr的区别"><a href="#Reduce和Gatherr的区别" class="headerlink" title="Reduce和Gatherr的区别"></a>Reduce和Gatherr的区别</h2><p><code>MPI_Reduce</code> 和 <code>MPI_Gather</code> 是 MPI（Message Passing Interface）中用于并行计算中的两种不同的集合通信操作。它们的主要区别在于数据的处理方式和目的：</p><ol><li><p><strong>MPI_Reduce</strong>：</p><ul><li>功能：<code>MPI_Reduce</code>函数是用来执行一个全局的规约操作，例如求和、最大值、最小值等，将所有进程中的独立数据集合到一个进程中去，并且在这个过程中应用了一个指定的操作符对这些数据进行归约。</li><li>用法：每个进程提供一块本地数据，然后通过调用<code>MPI_Reduce</code>函数，系统会根据提供的操作符（如<code>MPI_SUM</code>、<code>MPI_MAX</code>等）在所有进程中对该类型的数据进行归约运算，最终结果只存在于调用者指定的一个进程中（通常称为根进程，由参数决定）。</li><li>示例：如果每个进程有一个整数变量，使用<code>MPI_Reduce</code>可以将所有进程的整数加起来得到总的和。</li></ul></li><li><p><strong>MPI_Gather</strong>：</p><ul><li>功能：<code>MPI_Gather</code>函数则是用来从所有参与通信的进程中收集相同数量的数据，并将这些数据按照进程的秩顺序排列后，合并到根进程的一个连续内存区域中。</li><li>用法：每个进程都有一个本地数据缓冲区，调用<code>MPI_Gather</code>后，所有进程的数据都会被收集到根进程的一个大缓冲区中，形成一个数组，其中数组的第i个元素来自于秩为i的进程的本地数据。</li><li>示例：如果有10个进程，每个进程有一个长度为10的浮点数数组，使用<code>MPI_Gather</code>可以在根进程处创建一个新的大小为10x10的二维数组，其中每一列来自一个进程的原始数组。</li></ul></li></ol><p>总结来说，<code>MPI_Reduce</code>是做数据的聚合和操作，目标是得到单个进程上的唯一结果；而<code>MPI_Gather</code>则更像是数据的汇总，不涉及数据之间的操作，目标是将各个进程的数据拼接到一起形成一个完整的集合。</p><h2 id="Bcast和Scatter的区别"><a href="#Bcast和Scatter的区别" class="headerlink" title="Bcast和Scatter的区别"></a>Bcast和Scatter的区别</h2><p><code>MPI_Bcast</code>（Broadcast）和<code>MPI_Scatter</code>（Scatter）是Message Passing Interface (MPI) 中用于并行计算的两种集合通信操作，它们的主要区别在于数据分发的方式和目的：</p><ol><li><p><strong>MPI_Bcast</strong>：</p><ul><li>功能：<code>MPI_Bcast</code>函数执行的是广播操作，即从一个指定的进程（称为“根进程”）将相同的数据发送给 communicator 内的所有其他进程。</li><li>用法：在调用<code>MPI_Bcast</code>时，所有进程都会提供一个缓冲区，但只有根进程的缓冲区中的数据会被广播。执行后，所有参与通信的进程中缓冲区的内容都会被更新为根进程缓冲区中广播出去的数据。</li><li>示例场景：例如，如果根进程有一个全局参数需要所有的其他进程知道，那么就可以使用<code>MPI_Bcast</code>来快速地让所有进程获取到相同的参数值。</li></ul></li><li><p><strong>MPI_Scatter</strong>：</p><ul><li>功能：<code>MPI_Scatter</code>函数则负责将根进程的一个大数组分割成多个子块，并将这些子块分别发送给 communicator 内的不同进程。</li><li>用法：每个进程都提供一个接收缓冲区，但内容大小通常小于或等于根进程的发送缓冲区。执行后，各个进程接收到的数据来自原始大数组的不同部分，而不是完全相同的数据。</li><li>示例场景：比如，在分布式矩阵乘法中，根进程拥有一个大的矩阵A，它可能需要将矩阵A的各行分散给不同的进程进行局部计算，这时可以使用<code>MPI_Scatter</code>将矩阵A拆分成多份并分发给各个进程。</li></ul></li></ol><p>总结来说，<code>MPI_Bcast</code>用于向所有进程发送相同的数据副本，而<code>MPI_Scatter</code>则是将数据分解后分配给各个进程，每个进程得到的数据不同，通常是原始数据的一个子集。</p><h2 id="计算运行时间"><a href="#计算运行时间" class="headerlink" title="计算运行时间"></a>计算运行时间</h2><p>可以使用MPI_Wtime函数在并行代码中计算运行时间，用MPI_Wtick来查看精度。</p><h3 id="函数说明-8"><a href="#函数说明-8" class="headerlink" title="函数说明"></a>函数说明</h3><p>MPI_WTIME：<code>返回</code>一个用浮点数表示的秒数, 它表示从过去某一时刻到调用时刻所经历的时间</p><p>MPI_WTICK：<code>返回</code>MPI_WTIME的精度，单位是秒，可以认为是一个时钟滴答所占用的时间</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> <span class="token function">MPI_Wtime</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token keyword">double</span> <span class="token function">MPI_Wtick</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>double MPI_Wtime(void)</code> 是一个用于获取当前进程的墙钟时间的函数。它返回一个双精度浮点数，表示从某个固定时间点（通常是程序启动时）到现在所经过的时间，单位为秒。这个函数通常用于性能分析和调试。</p><p><code>double MPI_Wtick(void)</code> 是一个用于获取当前进程的墙钟时间间隔的函数。它返回一个双精度浮点数，表示从上一次调用 <code>MPI_Wtime()</code> 函数到现在所经过的时间间隔，单位为秒。这个函数通常用于性能分析和调试。</p><h3 id="实验说明-5"><a href="#实验说明-5" class="headerlink" title="实验说明"></a>实验说明</h3><p>使用函数MPI_Wtime计算并行代码的运行时间，并且在两次计算时间的函数之间用函数MPI_WTICK打印出精度</p><p>输出结果：</p><p>The precision is: 1e-06<br>Hello World!I’m rank … of …, running … seconds</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">;</span><span class="token keyword">double</span> start<span class="token punctuation">,</span> finish<span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//your code here</span>start <span class="token operator">=</span> <span class="token function">MPI_Wtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The precision is: %f\n"</span><span class="token punctuation">,</span> <span class="token function">MPI_Wtick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>finish <span class="token operator">=</span> <span class="token function">MPI_Wtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//your code here</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!I'm rank %d of %d, running %f seconds.\n"</span><span class="token punctuation">,</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">,</span> finish<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>例如，希望保证所有进程中并行代码在某个地方同时开始运行，或者在某个函数调用结束之前不能返回。</p><p>这时候我们就需要使用到MPI_Barrier函数。</p><h3 id="函数说明："><a href="#函数说明：" class="headerlink" title="函数说明："></a>函数说明：</h3><p>阻止调用直到communicator中所有进程已经完成调用，就是说，任意一次进程的调用只能在所有communicator中的成员已经开始调用之后进行。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Barrier</span><span class="token punctuation">(</span>MPI_Comm comm<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>MPI_Barrier(MPI_Comm comm)</code> 是一个用于同步进程的函数。它接受一个参数：</p><ol><li><code>MPI_Comm comm</code>：一个通信器对象，表示要同步的进程组。</li></ol><p>该函数返回一个整数，表示操作的结果。如果操作成功，返回值为 <code>MPI_SUCCESS</code>；否则，返回一个非零的错误代码。</p><h3 id="实验说明：-2"><a href="#实验说明：-2" class="headerlink" title="实验说明："></a>实验说明：</h3><p>在计算运行时间的信息之前调用MPI_Barrier函数完成同步。</p><p>输出结果：</p><p>The precision is: 1e-06<br>Hello World!I’m rank … of …, running … seconds.</p><p>在此示例程序中，可能是否调用函数不影响最终输出，但这并不意味着效果相同。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">;</span><span class="token keyword">double</span> start<span class="token punctuation">,</span> finish<span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//your code here</span><span class="token function">MPI_Barrier</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//end of your code</span>start <span class="token operator">=</span> <span class="token function">MPI_Wtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The precision is: %f\n"</span><span class="token punctuation">,</span> <span class="token function">MPI_Wtick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>finish <span class="token operator">=</span> <span class="token function">MPI_Wtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!I'm rank %d of %d, running %f seconds.\n"</span><span class="token punctuation">,</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">,</span> finish<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组的管理"><a href="#组的管理" class="headerlink" title="组的管理"></a>组的管理</h2><h3 id="创建（1）"><a href="#创建（1）" class="headerlink" title="创建（1）"></a>创建（1）</h3><p>组是一个进程的有序集合，在实现中可以看作是进程标识符的一个有序集。组内的每个进程与一个整数rank相联系，序列号从0开始并且是连续的。我们可以在通信组中使用组，来描述通信空间中的参与者并对这些参与者进行分级（这样在通信空间中为它们赋予了唯一的名字）</p><p>由此可见，组是我们对进程集合更高一级的抽象，我们可以在组的基础上对各个进程进行更进一步的操作，例如通过虚拟拓扑来辅助并行操作的实现。</p><p>在这里我们先介绍两个特殊的预定义组，MPI_GROUP_EMPTY和MPI_GROUP_NULL。<br>需要特别说明的是，前者是一个空组的有效句柄，可以在组操作中作为一个参数使用；而后者是一个无效句柄，在组释放时会被返回。</p><h4 id="函数说明-9"><a href="#函数说明-9" class="headerlink" title="函数说明"></a>函数说明</h4><blockquote><p>MPI_Comm_group用来建立一个通信组对应的新进程组</p><p>MPI_Group_rank查询调用进程在进程组里的rank</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Comm_group</span><span class="token punctuation">(</span>MPI_Comm comm<span class="token punctuation">,</span> MPI_Group <span class="token operator">*</span>group<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">MPI_Group_rank</span><span class="token punctuation">(</span>MPI_Group group<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>rank<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>MPI_Comm_group(MPI_Comm comm, MPI_Group *group)</code> 是一个用于获取进程组的函数。它接受两个参数：</p><ol><li><code>MPI_Comm comm</code>：一个通信器对象，表示要查询的进程组所属的通信器。</li><li><code>MPI_Group *group</code>：一个指向 <code>MPI_Group</code> 类型的指针，用于存储查询到的进程组。</li></ol><p>该函数返回一个整数，表示操作的结果。如果操作成功，返回值为 <code>MPI_SUCCESS</code>；否则，返回一个非零的错误代码。</p><p><code>MPI_Group_rank(MPI_Group group, int *rank)</code> 是一个用于获取进程组中某个进程的排名的函数。它接受两个参数：</p><ol><li><code>MPI_Group group</code>：一个进程组对象，表示要查询的进程组。</li><li><code>int *rank</code>：一个指向整数类型的指针，用于存储查询到的进程排名。</li></ol><p>该函数返回一个整数，表示操作的结果。如果操作成功，返回值为 <code>MPI_SUCCESS</code>；否则，返回一个非零的错误代码。</p></blockquote><h4 id="实验说明-6"><a href="#实验说明-6" class="headerlink" title="实验说明"></a>实验说明</h4><p>建立一个与初始通信子MPI_COMM_WORLD相联系的组，打印出当前进程在进程组的rank。</p><p>输出结果:<br>rank： 1<br>rank： 0<br>…<br>rank： n</p><p>顺序不唯一</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">;</span>MPI_Group group_world<span class="token punctuation">;</span><span class="token keyword">int</span> rank_of_group<span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// your code here</span><span class="token function">MPI_Comm_group</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>group_world<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Group_rank</span><span class="token punctuation">(</span>group_world<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rank_of_group<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// end of your code</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"rank: %d\n"</span><span class="token punctuation">,</span> rank_of_group<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建（2）"><a href="#创建（2）" class="headerlink" title="创建（2）"></a>创建（2）</h3><p>上一节我们知道，可以用MPI_Comm_group函数来获得与通信组MPI_COMM_WORLD相关联的组句柄。<br>那么我们可以用这个组句柄做什么呢？</p><p>首先，我们可以通过这个最原始的组句柄来创建更多的、满足我们需要的组。</p><p>在这里需要特别说明的是，MPI没提供凭空构造一个组的的机制，而只能从其它以前定义的组中构造。最基本的组是与初始通信子MPI_COMM_WORLD相联系的组（可通过函数MPI_COMM_GROUP获得〕，其它的组在该组基础上定义。</p><h4 id="函数说明-10"><a href="#函数说明-10" class="headerlink" title="函数说明"></a>函数说明</h4><blockquote><p>基于已经存在的进程组创建一个新的组，并指明被包含(included)其中的成员进程。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Group_incl</span><span class="token punctuation">(</span>MPI_Group old_group<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>members<span class="token punctuation">,</span> MPI_Group <span class="token operator">*</span>new_group<span class="token punctuation">)</span>旧进程组要包含在新进程组的进程数量  要放入新进程组的进程的编号数组 指针指向新进程组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个函数用于创建一个新的进程组，该组包含旧进程组中指定的成员。</p><p>参数解析：</p><ul><li><code>old_group</code>：一个MPI_Group类型的变量，表示要复制的旧进程组。</li><li><code>count</code>：一个整数，表示要包含在新的进程组中的进程数量。</li><li><code>members</code>：一个整数数组，包含了要包含在新进程组中的进程的标识符。</li><li><code>new_group</code>：一个MPI_Group类型的指针，指向新创建的进程组。</li></ul><p>函数执行后，<code>new_group</code>将指向一个新创建的进程组，该进程组包含了<code>old_group</code>中指定的成员。</p></blockquote><h4 id="实验说明-7"><a href="#实验说明-7" class="headerlink" title="实验说明"></a>实验说明</h4><p>基于与初始通信子MPI_COMM_WORLD相联系的组创建一个新的组，这个新的组的成员是通信者MPI_COMM_WORLD的奇数编号的进程。</p><p>输出结果格式应如下：<br>In process n: odd rank is x<br>…</p><p>需要特别说明的是，如果在偶数编号的进程中，也就是不属于这个组的进程中输出这个值，MPI_Group_rank会返回MPI_UNDEFINED作为group_rank的值，表示它不是 worker_group的成员，在MPICH里是-32766。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">,</span> odd_rank<span class="token punctuation">;</span>MPI_Group group_world<span class="token punctuation">,</span> odd_group<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> members<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_group</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>group_world<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numprocs<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>members<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// your code here</span><span class="token function">MPI_Group_incl</span><span class="token punctuation">(</span>group_world<span class="token punctuation">,</span> numprocs<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> members<span class="token punctuation">,</span> <span class="token operator">&amp;</span>odd_group<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// end of your code</span><span class="token function">MPI_Group_rank</span><span class="token punctuation">(</span>odd_group<span class="token punctuation">,</span> <span class="token operator">&amp;</span>odd_rank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"In process %d: odd rank is %d\n"</span><span class="token punctuation">,</span> myid<span class="token punctuation">,</span> odd_rank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建（3）"><a href="#创建（3）" class="headerlink" title="创建（3）"></a>创建（3）</h3><p>同样，我们在基于旧进程组创建一个新的组的时候，可能希望排除一些成员进程。</p><p>当然，我们可以通过选择出剩下的成员进程的方法来达成我们的目的，但是MPI提供了更好的办法去实现它。</p><h4 id="函数说明-11"><a href="#函数说明-11" class="headerlink" title="函数说明"></a>函数说明</h4><blockquote><p>基于已经存在的进程组创建一个新的组，并指明不被包含(excluded)其中的成员进程。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Group_excl</span><span class="token punctuation">(</span>MPI_Group old_group<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>nonmembers<span class="token punctuation">,</span> MPI_Group <span class="token operator">*</span>new_group<span class="token punctuation">)</span>旧进程组；要包含在新的进程组中的进程数量；不需要放入新进程组的进程的编号；新进程组的指针；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个函数用于创建一个新的进程组，该组包含旧进程组中指定的成员，但不包含非成员列表中的进程。</p><p>参数解析：</p><ul><li><code>old_group</code>：一个MPI_Group类型的变量，表示要复制的旧进程组。</li><li><code>count</code>：一个整数，表示要包含在新的进程组中的进程数量。</li><li><code>nonmembers</code>：一个整数数组，包含了不包含在新进程组中的进程的标识符。</li><li><code>new_group</code>：一个MPI_Group类型的指针，指向新创建的进程组。</li></ul><p>函数执行后，<code>new_group</code>将指向一个新创建的进程组，该进程组包含了<code>old_group</code>中指定的成员，但不包含<code>nonmembers</code>列表中的进程。</p></blockquote><h4 id="实验说明-8"><a href="#实验说明-8" class="headerlink" title="实验说明"></a>实验说明</h4><p>基于与初始通信子MPI_COMM_WORLD相联系的组创建一个新的组，这个新的组的成员是通信者MPI_COMM_WORLD的偶数编号的进程。</p><p>输出结果格式应如下：<br>In process n: even rank is x<br>…</p><p>需要特别说明的是，如果在奇数编号的进程中，也就是不属于这个组的进程中输出这个值，MPI_Group_rank会返回MPI_UNDEFINED作为group_rank的值，表示它不是 worker_group的成员，在MPICH里这个值是-32766。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">,</span> even_rank<span class="token punctuation">;</span>MPI_Group group_world<span class="token punctuation">,</span> even_group<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> nonmembers<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_group</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>group_world<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numprocs<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>nonmembers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// your code here</span><span class="token function">MPI_Group_excl</span><span class="token punctuation">(</span>group_world<span class="token punctuation">,</span> numprocs<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> nonmembers<span class="token punctuation">,</span> <span class="token operator">&amp;</span>even_group<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// end of your code</span><span class="token function">MPI_Group_rank</span><span class="token punctuation">(</span>even_group<span class="token punctuation">,</span> <span class="token operator">&amp;</span>even_rank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"In process %d: even rank is %d\n"</span><span class="token punctuation">,</span> myid<span class="token punctuation">,</span> even_rank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="相对编号"><a href="#相对编号" class="headerlink" title="相对编号"></a>相对编号</h3><p>在创建组之后，可能会有这个疑惑：如果知道了在组MPI_COMM_WORLD中某些进程的编号，如何根据这些编号来操作在不同组的同一进程来完成不同的任务呢？</p><p>MPI提供了这样的函数以应付这种常见的情景。</p><h4 id="函数说明-12"><a href="#函数说明-12" class="headerlink" title="函数说明"></a>函数说明</h4><p>检测两个不同组中相同进程的相对编号。如果属于进程组1的某个进程可以在ranks1中找到，而这个进程不属于进程组2，则在ranks2中对应ranks1的位置返回值为MPI_UNDEFINED。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Group_translate_ranks</span><span class="token punctuation">(</span>MPI_Group group1<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>ranks1<span class="token punctuation">,</span> MPI_Group group2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>ranks2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>MPI_Group_translate_ranks</code>函数用于将一个进程组中的进程排名映射到另一个进程组中的进程排名。它接受以下参数：</p><ul><li><code>group1</code>：第一个进程组，类型为<code>MPI_Group</code>。</li><li><code>count</code>：要转换的进程数量，类型为整数。</li><li><code>ranks1</code>：指向包含要转换的进程排名的数组的指针，类型为整数指针。</li><li><code>group2</code>：第二个进程组，类型为<code>MPI_Group</code>。</li><li><code>ranks2</code>：指向存储转换后的进程排名的数组的指针，类型为整数指针。</li></ul><p>该函数返回一个<code>int</code>类型的值，表示操作的结果。如果操作成功，返回值为<code>MPI_SUCCESS</code>；否则，返回一个非零的错误代码。</p><h4 id="实验说明-9"><a href="#实验说明-9" class="headerlink" title="实验说明"></a>实验说明</h4><p>建立两个进程组，打印出进程组2中对应进程组1的进程的编号。</p><p>输出结果格式：<br>The rank in group2 is: -32766<br>The rank in group2 is: 0<br>…</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">;</span>MPI_Group group_world<span class="token punctuation">,</span> group1<span class="token punctuation">,</span> group2<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> ranks1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ranks2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ranks_output<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_group</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>group_world<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numprocs<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ranks1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token punctuation">;</span>ranks2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">MPI_Group_incl</span><span class="token punctuation">(</span>group_world<span class="token punctuation">,</span> numprocs<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ranks1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>group1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Group_incl</span><span class="token punctuation">(</span>group_world<span class="token punctuation">,</span> numprocs<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ranks2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>group2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// your code here</span><span class="token function">MPI_Group_translate_ranks</span><span class="token punctuation">(</span>group1<span class="token punctuation">,</span> numprocs<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ranks1<span class="token punctuation">,</span> group2<span class="token punctuation">,</span> ranks_output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// end of your code</span><span class="token keyword">if</span> <span class="token punctuation">(</span>myid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numprocs<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The rank in group2 is: %d\n"</span><span class="token punctuation">,</span> ranks_output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h3><p>既然有了组的构造，那么与之对应也存在组的析构。</p><h4 id="函数说明-13"><a href="#函数说明-13" class="headerlink" title="函数说明"></a>函数说明</h4><blockquote><p>调用函数会标记一个被释放的组对象，组句柄被调用置为MPI_GROUP_NULL。任何正在使用此组的操作将正常完成。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Group_free</span><span class="token punctuation">(</span>MPI_Group <span class="token operator">*</span>group<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>int MPI_Group_free(MPI_Group *group)</code> 是一个MPI（Message Passing Interface，消息传递接口）函数，用于释放一个已经创建的进程组。</p><p>参数：</p><ul><li><code>group</code>：指向要释放的进程组的指针。</li></ul><p>返回值：</p><ul><li>函数执行成功时返回0。</li><li>如果发生错误，则返回非零错误代码。</li></ul></blockquote><h4 id="实验说明-10"><a href="#实验说明-10" class="headerlink" title="实验说明"></a>实验说明</h4><p>建立一个进程组，打印出它的size，然后释放它。</p><p>输出结果格式应如下：<br>Now the size is n<br>Now the group is freed.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">;</span>MPI_Group group_world<span class="token punctuation">;</span><span class="token keyword">int</span> size0<span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_group</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>group_world<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Group_size</span><span class="token punctuation">(</span>group_world<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>myid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now the size is %d\n"</span><span class="token punctuation">,</span> size0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// your code here</span><span class="token function">MPI_Group_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>group_world<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// end of your code</span><span class="token keyword">if</span><span class="token punctuation">(</span>myid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>group_world <span class="token operator">==</span> MPI_GROUP_NULL<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now the group is freed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>有时候我们想要对两个进程组做最基本的判断，例如成员是否相同，次序是否一致等等。</p><p>MPI同样提供了这样的函数来完成这个功能。</p><h4 id="函数说明-14"><a href="#函数说明-14" class="headerlink" title="函数说明"></a>函数说明</h4><p>如果在两个组中成员和次序完全相等，返回MPI_IDENT。例如在group1和group2是同一句柄时就会发生这种情况。如果组成员相同而次序不同则返回MPI_SIMILAR，否则返回MPI_UNEQUAL</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Group_compare</span><span class="token punctuation">(</span>MPI_Group group1<span class="token punctuation">,</span> MPI_Group group2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>result<span class="token punctuation">)</span>MPI_Group group1： 要比较的组<span class="token number">1</span>；MPI_Group group2： 要比较的组<span class="token number">2</span>；<span class="token keyword">int</span> <span class="token operator">*</span>result：结果；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>int MPI_Group_compare(MPI_Group group1, MPI_Group group2, int *result)</code> 是一个MPI（Message Passing Interface，消息传递接口）函数，用于比较两个进程组是否相等。</p><p>参数：</p><ul><li><code>group1</code>：指向第一个要比较的进程组的指针。</li><li><code>group2</code>：指向第二个要比较的进程组的指针。</li><li><code>result</code>：指向一个整数的指针，用于存储比较结果。如果 <code>group1</code> 和 <code>group2</code> 相等，则 <code>*result</code> 的值为0；如果 <code>group1</code> 包含 <code>group2</code> 的所有进程，则 <code>*result</code> 的值为正数；如果 <code>group2</code> 包含 <code>group1</code> 的所有进程，则 <code>*result</code> 的值为负数；如果 <code>group1</code> 和 <code>group2</code> 没有共同的进程，则 <code>*result</code> 的值为正数且大于等于 <code>group1</code> 的大小。</li></ul><p>返回值：</p><ul><li>函数执行成功时返回0。</li><li>如果发生错误，则返回非零错误代码。</li></ul><h4 id="实验说明-11"><a href="#实验说明-11" class="headerlink" title="实验说明"></a>实验说明</h4><p>创建一个新的组，通过调整输出两个不同的结果。</p><p>输出结果格式应如下：<br>Now the groups are identical.<br>Now the groups are unequal.<br>…</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">;</span>MPI_Group group_world<span class="token punctuation">,</span> new_group_world<span class="token punctuation">;</span><span class="token keyword">int</span> members<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> result<span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_group</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>group_world<span class="token punctuation">)</span><span class="token punctuation">;</span>members<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token function">MPI_Group_incl</span><span class="token punctuation">(</span>group_world<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> members<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_group_world<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>myid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// your code here</span><span class="token function">MPI_Group_compare</span><span class="token punctuation">(</span>group_world<span class="token punctuation">,</span> group_world<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// end of your code</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> MPI_IDENT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now the groups are identical.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> MPI_SIMILAR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now the groups are similar.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now the groups are unequal.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// your code here</span><span class="token function">MPI_Group_compare</span><span class="token punctuation">(</span>group_world<span class="token punctuation">,</span> new_group_world<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// end of your code</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> MPI_IDENT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now the groups are identical.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> MPI_SIMILAR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now the groups are similar.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now the groups are unequal.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通信子的管理"><a href="#通信子的管理" class="headerlink" title="通信子的管理"></a>通信子的管理</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>在实际开发中，我们往往需要很多不同的通信子来满足需求，这时候就需要创建新的通信子。</p><h4 id="函数说明-15"><a href="#函数说明-15" class="headerlink" title="函数说明"></a>函数说明</h4><p>用由group所定义的通信组及一个新的上下文创建了一个新的通信子newcomm。对于不在group中的进程，函数返回MPI_COMM_NULL。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Comm_create</span><span class="token punctuation">(</span>MPI_Comm comm<span class="token punctuation">,</span> MPI_Group group<span class="token punctuation">,</span> MPI_Comm <span class="token operator">*</span>newcomm<span class="token punctuation">)</span>MPI_Comm comm ： 旧的通信子；MPI_Group group ： 与comm相关联的组或其子集；MPI_Comm <span class="token operator">*</span>newcomm ： 新的通信子；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>int MPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm)</code> 是一个MPI（Message Passing Interface，消息传递接口）函数，用于创建一个新的通信器。</p><p>参数：</p><ul><li><code>comm</code>：指向现有通信器的指针</li><li><code>group</code>：指向要包含在新通信器中的进程组的指针</li><li><code>newcomm</code>：指向新创建的通信器的指针</li></ul><p>返回值：</p><ul><li>函数执行成功时返回0</li><li>如果发生错误，则返回非零错误代码</li></ul><h4 id="实验说明-12"><a href="#实验说明-12" class="headerlink" title="实验说明"></a>实验说明</h4><p>复制一个新的通信子，并以此为基础创建一个新的通信子。由于示例是用奇数编号的进程来创建通信子的，所以只在奇数进程中输出结果。</p><p>输出结果格式应如下：<br>The new comm’s size is 2.<br>The new comm’s size is 2.<br>…</p><p>注意，如果没有添加创建函数的代码，天河可能会由于超时返回长时间没有响应的提示信息。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">,</span> new_numprocs<span class="token punctuation">;</span>MPI_Group group_world<span class="token punctuation">,</span> odd_group<span class="token punctuation">;</span>MPI_Comm new_comm<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> members<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_group</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>group_world<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numprocs<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>members<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">MPI_Group_incl</span><span class="token punctuation">(</span>group_world<span class="token punctuation">,</span> numprocs<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> members<span class="token punctuation">,</span> <span class="token operator">&amp;</span>odd_group<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// your code here</span><span class="token function">MPI_Comm_create</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> odd_group<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_comm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// end of your code</span><span class="token keyword">if</span> <span class="token punctuation">(</span>myid <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>new_comm<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The new comm's size is %d.\n"</span><span class="token punctuation">,</span> new_numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>在之前的学习中，我们经常使用系统帮助我们创建的初始组内通信子MPI_COMM_WORLD作为通信子的输入。</p><p>其实，还有两个系统默认创建的通信子，一个是COMM_SELF，另一个是COMM_NULL。<br>COMM_SELF仅仅包含了当前进程，而COMM_NULL则什么进程都没有包含。</p><p>在通信子的创建中，需要特别注意的是MPI中有一个”鸡生蛋, 蛋生鸡”的特点，即所有MPI通信子的创建都是由基础通信子，即MPI_COMM_WORLD（是在MPI的外部被定义的），创建的。而这些被创建的通信子又可以作为新的通信子创建的基础。</p><p>这个模型是经过讨论后确定的，目的是为了提高用MPI写程序的安全性。</p><h4 id="函数说明-16"><a href="#函数说明-16" class="headerlink" title="函数说明"></a>函数说明</h4><p>复制已存在的通信子comm。</p><pre class="line-numbers language-none"><code class="language-none">int MPI_Comm_dup(MPI_Comm comm,MPI_Comm *newcomm)MPI_Comm comm ： 旧的通信子；MPI_Comm *newcomm ： 新的通信子；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>int MPI_Comm_dup(MPI_Comm comm, MPI</code>int MPI_Comm_dup(MPI_Comm comm, MPI_Comm *newcomm)&#96; 是一个MPI（Message Passing Interface，消息传递接口）函数，用于复制一个现有的通信器。</p><p>参数：</p><ul><li><code>comm</code>：指向要复制的现有通信器的指针。</li><li><code>newcomm</code>：指向新创建的通信器的指针。</li></ul><p>返回值：</p><ul><li>函数执行成功时返回0。</li><li>如果发生错误，则返回非零错误代码。</li></ul><h4 id="实验说明-13"><a href="#实验说明-13" class="headerlink" title="实验说明"></a>实验说明</h4><p>复制一个新的通信子，需要特别说明的是，结果显示MPI_IDENT表示上下文(context)和组(group)都相同，MPI_CONGRUENT表示上下文不同(different)但组完全相同(identical)，MPI_SIMILAR表示上下文不同，组的成员相同但次序不同(similar)，否则就是MPI_UNEQUAL。</p><p>输出结果格式应如下：<br>The comms are congruent.<br>…</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">;</span>MPI_Comm new_comm<span class="token punctuation">;</span> <span class="token keyword">int</span> result<span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// your code here</span><span class="token function">MPI_Comm_dup</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_comm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// end of your code</span><span class="token function">MPI_Comm_compare</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> new_comm<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>myid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token operator">==</span> MPI_IDENT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The comms are identical.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token operator">==</span> MPI_CONGRUENT <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The comms are congruent.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token operator">==</span> MPI_SIMILAR <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The comms are similar.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token operator">==</span> MPI_UNEQUAL <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The comms are unequal.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="释放-1"><a href="#释放-1" class="headerlink" title="释放"></a>释放</h3><p>同样，通信子也存在析构的操作。</p><h4 id="函数说明：-1"><a href="#函数说明：-1" class="headerlink" title="函数说明："></a>函数说明：</h4><pre class="line-numbers language-none"><code class="language-none">int MPI_Comm_free(MPI_Comm *comm)MPI_Comm *comm ： 通信子；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用由group所定义的通信组及一个新的上下文创建了一个新的通信子newcomm。对于不在group中的进程，函数返回MPI_COMM_NULL。</p><p><code>int MPI_Comm_free(MPI_Comm *comm)</code> <code>int MPI_Comm_free(MPI_Comm *comm)</code> 是一个MPI（Message Passing Interface，消息传递接口）函数，用于释放一个已经创建的通信器。</p><p>参数：</p><ul><li><code>comm</code>：指向要释放的通信器的指针。</li></ul><p>返回值：</p><ul><li>函数执行成功时返回0。</li><li>如果发生错误，则返回非零错误代码。</li></ul><h4 id="实验说明-14"><a href="#实验说明-14" class="headerlink" title="实验说明"></a>实验说明</h4><p>这是一个标志通信对象撤消的集合操作。值得注意的是，这个函数操作只是将句柄置为MPI_COMM_NULL，任何使用此通信子的挂起操作都会正常完成；仅当没有对此对象的活动引用时，它才会被实际撤消。</p><p>输出结果格式应如下：<br>The comm is freed.<br>…</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">;</span>MPI_Comm new_comm<span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_dup</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_comm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// your code here</span><span class="token function">MPI_Comm_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>new_comm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// end of your code</span><span class="token keyword">if</span><span class="token punctuation">(</span>myid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>new_comm <span class="token operator">==</span> MPI_COMM_NULL<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now the comm is freed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="划分"><a href="#划分" class="headerlink" title="划分"></a>划分</h3><p>有时候我们希望根据拓扑来创建不同的域，例如创建一个二维数组，显然一个个创建是很不方便的，这时候我们需要用到一个新的函数来进行划分。</p><h4 id="函数说明-17"><a href="#函数说明-17" class="headerlink" title="函数说明"></a>函数说明</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Comm_split</span><span class="token punctuation">(</span>MPI_Comm comm<span class="token punctuation">,</span> <span class="token keyword">int</span> color<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> MPI_Comm <span class="token operator">*</span>newcomm<span class="token punctuation">)</span>MPI_Comm comm ： 旧的通信子，也就是被划分的域；<span class="token keyword">int</span> color ： 子域的标识，也就是被划分出来的每个子域都对应一个color，每一个子域包含具有同样color的所有进程；<span class="token keyword">int</span> key ： 在每一个子域内<span class="token punctuation">,</span> 进程按照key所定义的值的次序进行排列。MPI_Comm <span class="token operator">*</span>newcomm ： 新的通信子；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数将与comm相关的域划分为若干不相连的子域，根据color和key参数决定每个进程所处的位置。</p><p><code>int MPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *newcomm)</code> ，用于将一个通信器分割成两个子通信器。</p><p>参数：</p><ul><li><code>comm</code>：指向要分割的通信器的指针。</li><li><code>color</code>：一个整数，表示当前进程所属的子通信器。如果当前进程属于第一个子通信器，则<code>color</code>为0；如果当前进程属于第二个子通信器，则<code>color</code>为1。</li><li><code>key</code>：一个整数，用于确定如何将进程分配到子通信器中。通常，这个值应该是一个全局常量，以确保所有进程都使用相同的键值进行分割。</li><li><code>newcomm</code>：指向新创建的子通信器的指针。</li></ul><p>返回值：</p><ul><li>函数执行成功时返回0。</li><li>如果发生错误，则返回非零错误代码。</li></ul><h4 id="实验说明-15"><a href="#实验说明-15" class="headerlink" title="实验说明"></a>实验说明</h4><p>创建一个二维数组，根据行与列进行求和，在每个进程中输出坐标和求出的和。</p><p>输出结果格式应如下：<br>I’m process n, my coordinates are (x, y), row sum is p, column sum is q.<br>…</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">;</span>MPI_Comm row_comm<span class="token punctuation">,</span> column_comm<span class="token punctuation">;</span><span class="token keyword">int</span> myrow<span class="token punctuation">,</span> mycolumn<span class="token punctuation">;</span><span class="token keyword">int</span> color <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>myrow <span class="token operator">=</span> myid <span class="token operator">/</span> color <span class="token punctuation">;</span>mycolumn <span class="token operator">=</span> myid <span class="token operator">%</span> color <span class="token punctuation">;</span><span class="token comment">// your code here</span><span class="token function">MPI_Comm_split</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> myrow<span class="token punctuation">,</span> mycolumn<span class="token punctuation">,</span> <span class="token operator">&amp;</span>row_comm<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">MPI_Comm_split</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> mycolumn<span class="token punctuation">,</span> myrow<span class="token punctuation">,</span> <span class="token operator">&amp;</span>column_comm<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// end of your code</span><span class="token keyword">int</span> rowsum<span class="token punctuation">,</span> columnsum<span class="token punctuation">;</span>rowsum <span class="token operator">=</span> myid<span class="token punctuation">;</span>columnsum <span class="token operator">=</span> myid<span class="token punctuation">;</span><span class="token function">MPI_Allreduce</span><span class="token punctuation">(</span>MPI_IN_PLACE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rowsum<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> MPI_SUM<span class="token punctuation">,</span> row_comm<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">MPI_Allreduce</span><span class="token punctuation">(</span>MPI_IN_PLACE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>columnsum<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> MPI_SUM<span class="token punctuation">,</span> column_comm<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'm process %d, my coordinates are (%d, %d), row sum is %d, column sum is %d\n"</span><span class="token punctuation">,</span> myid<span class="token punctuation">,</span> myrow<span class="token punctuation">,</span> mycolumn<span class="token punctuation">,</span>  rowsum<span class="token punctuation">,</span> columnsum<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取处理器名"><a href="#获取处理器名" class="headerlink" title="获取处理器名"></a>获取处理器名</h2><p>有时候在实际处理中我们可能需要将进程迁移至不同的处理器，而MPI提供了获取处理器名的函数以简单地允许这种行为。</p><p>注意在MPI中不需要定义这种迁移。</p><h3 id="函数说明-18"><a href="#函数说明-18" class="headerlink" title="函数说明"></a>函数说明</h3><pre class="line-numbers language-none"><code class="language-none">int MPI_Get_processor_name ( char *name, int *resultlen)char *name : 实际节点的唯一说明字;int *resultlen：在name中返回结果的长度;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>返回调用时调用所在的处理器名。</p><blockquote><p><code>MPI_Get_processor_name</code> 是一个用于获取当前进程名称的 MPI（Message Passing Interface，消息传递接口）函数。它接受两个参数：一个字符指针 <code>name</code>，用于存储进程名称；一个整数指针 <code>resultlen</code>，用于存储实际存储在 <code>name</code> 中的进程名称长度。</p><p>函数原型如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Get_processor_name</span> <span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>resultlen <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">char</span> processor_name<span class="token punctuation">[</span>MPI_MAX_PROCESSOR_NAME<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> name_length<span class="token punctuation">;</span> <span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">MPI_Get_processor_name</span><span class="token punctuation">(</span>processor_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>name_length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span>"Processor name<span class="token operator">:</span> <span class="token operator">%</span>s"<span class="token punctuation">,</span> processor_name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span>"Name length<span class="token operator">:</span> <span class="token operator">%</span>d"<span class="token punctuation">,</span> name_length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="实验说明-16"><a href="#实验说明-16" class="headerlink" title="实验说明"></a>实验说明</h3><p>在每个进程中，使用函数MPI_Get_processor_name来获取当前进程的处理器名并打印出来。</p><p>Hello, world. I am PROCESS_NAME.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span>MPI_MAX_PROCESSOR_NAME<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//your code here</span>    <span class="token function">MPI_Get_processor_name</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//end of your code</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, world. I am %s.\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="地址偏移量"><a href="#地址偏移量" class="headerlink" title="地址偏移量"></a>地址偏移量</h2><p>在通信操作中，我们常常需要对地址进行传递或操作，例如传送&#x2F;接收缓冲区。</p><p>而一个位置在内存中的地址可以通过MPI_ADDRESS函数获得。</p><h3 id="函数说明-19"><a href="#函数说明-19" class="headerlink" title="函数说明"></a>函数说明</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Address</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> location<span class="token punctuation">,</span> MPI_Aint <span class="token operator">*</span>address<span class="token punctuation">)</span><span class="token keyword">void</span><span class="token operator">*</span> location ： 调用者的内存位置<span class="token punctuation">;</span>MPI_Aint <span class="token operator">*</span>address：位置的对应地址<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>MPI_Address</code> 是一个用于获取内存地址的函数，它接受两个参数：一个指向内存位置的指针 <code>location</code> 和一个指向 <code>MPI_Aint</code> 类型的指针 <code>address</code>。<code>MPI_Aint</code> 是一个整数类型，用于表示任意大小的地址。</p><p>函数原型如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Address</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> location<span class="token punctuation">,</span> MPI_Aint <span class="token operator">*</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> rank<span class="token punctuation">;</span> <span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rank<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> local_variable <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> MPI_Aint local_address<span class="token punctuation">;</span> <span class="token function">MPI_Address</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>local_variable<span class="token punctuation">,</span> <span class="token operator">&amp;</span>local_address<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Rank %d: Local variable address is %p"</span><span class="token punctuation">,</span> rank<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>local_address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们首先初始化 MPI 环境，然后获取当前进程的等级（<code>rank</code>）。接着，我们定义了一个局部变量 <code>local_variable</code>，并使用 <code>MPI_Address</code> 函数获取其内存地址。最后，我们将结果打印出来。</p></blockquote><p>###实验说明</p><p>给出三个临时变量a, b, c, 分别求出a与b、a与c之间的地址偏移量。</p><p>输出结果:</p><p>由于这里采用的变量类型为int，所以如果变量地址是连续的话应该是：<br>The distance between a and b is 4<br>The distance between a and c is 8</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">;</span>MPI_Aint address1<span class="token punctuation">,</span> address2<span class="token punctuation">,</span> address3<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> dist1<span class="token punctuation">,</span> dist2<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// your code here</span><span class="token function">MPI_Address</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>address1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Address</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>address2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Address</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>address3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// end of your code</span>dist1 <span class="token operator">=</span> address2 <span class="token operator">-</span> address1 <span class="token punctuation">;</span>dist2 <span class="token operator">=</span> address3 <span class="token operator">-</span> address1 <span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>myid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The distance between a and b is %d\n"</span><span class="token punctuation">,</span> dist1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The distance between a and c is %d\n"</span><span class="token punctuation">,</span> dist2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据的打包-pack"><a href="#数据的打包-pack" class="headerlink" title="数据的打包(pack)"></a>数据的打包(pack)</h2><p>有时候我们希望将不连续的数据或是不相同的数据类型的数据一起发送到其他进程，而不是效率很低地逐个发送。</p><p>一个解决这个问题的方案是将数据封装成包，再将数据包放到一个连续的缓冲区，发送到接收缓冲区后再提取出来尽心解包。</p><p>值得注意的是，打包&#x2F;解包函数有时候还会用来代替系统缓存策略。此外，对于在MPI顶层进一步开发附加的通信库会起到辅助的作用。</p><h3 id="函数说明：-2"><a href="#函数说明：-2" class="headerlink" title="函数说明："></a>函数说明：</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Pack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> inbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> incount<span class="token punctuation">,</span> MPI_datatype datatype<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>outbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> outcount<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>position<span class="token punctuation">,</span> MPI_Comm comm<span class="token punctuation">)</span> <span class="token keyword">void</span><span class="token operator">*</span> inbuf ： 输入缓冲区地址<span class="token punctuation">;</span><span class="token keyword">int</span> incount ：输入数据项数目<span class="token punctuation">;</span>MPI_datatype datatype ：数据项的类型<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>outbuf ：输出缓冲区地址<span class="token punctuation">;</span><span class="token keyword">int</span> outcount ：输出缓冲区大小<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>position ：缓冲区当前位置<span class="token punctuation">;</span>MPI_Comm comm ：通信子<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个MPI（Message Passing Interface，消息传递接口）函数，用于将数据打包到输出缓冲区中。下面是对代码的解析：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Pack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> inbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> incount<span class="token punctuation">,</span> MPI_datatype datatype<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>outbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> outcount<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>position<span class="token punctuation">,</span> MPI_Comm comm<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>inbuf</code>: 输入缓冲区的指针，指向要打包的数据。</li><li><code>incount</code>: 输入缓冲区中要打包的元素数量。</li><li><code>datatype</code>: 数据类型的对象，指定了输入缓冲区中元素的类型。</li><li><code>outbuf</code>: 输出缓冲区的指针，指向打包后的数据存储位置。</li><li><code>outcount</code>: 输出缓冲区中可用的空间大小。</li><li><code>position</code>: 一个整数指针，用于返回当前在输出缓冲区中的位置。</li><li><code>comm</code>: 通信器对象，用于指定进程之间的通信。</li></ul><p>该函数的作用是将输入缓冲区中的数据按照指定的数据类型进行打包，并将打包后的数据存储到输出缓冲区中。打包后的数据可以在不同的进程之间传输或存储。</p><p>请注意，这只是一个函数声明，具体的实现细节和用法可能因使用的MPI库而有所不同。</p><h3 id="实验说明-17"><a href="#实验说明-17" class="headerlink" title="实验说明"></a>实验说明</h3><p>在源进程中打包发送一个数据包到进程1，进程1解包并打印出数据。</p><p>输出结果</p><p>The number is 1 and 2</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">,</span> source<span class="token punctuation">;</span>MPI_Status status<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> position<span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> buf<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>myid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                position <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>            <span class="token comment">// your code here</span>    <span class="token function">MPI_Pack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>position<span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// end of your code</span>        <span class="token function">MPI_Send</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> position<span class="token punctuation">,</span> MPI_PACKED<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>myid <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">MPI_Recv</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>position <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token function">MPI_Unpack</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>position<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Unpack</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>position<span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The number is %d and %d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据的解包-unpack"><a href="#数据的解包-unpack" class="headerlink" title="数据的解包(unpack)"></a>数据的解包(unpack)</h2><p>解包是对应于打包的MPI操作。</p><p>需要特别注意的是：MPI_RECV和MPI_UNPACK的区别: 在MPI_RECV中, count参数指明的是可以接收的最大项数. 实际接收的项数是由接收的消息的长度来决定的. 在MPI_UNPACK中, count参数指明实际打包的项数; 相应消息的”size”是position的增加值. 这种改动的原因是”输入消息的大小” 直到用户决定如何解包之前是不能预先确定的;从解包的项数来确定”消息大小”也是很困难的。</p><h3 id="函数说明-20"><a href="#函数说明-20" class="headerlink" title="函数说明"></a>函数说明</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MPI_Unpack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> inbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> insize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>position<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>outbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> outcount<span class="token punctuation">,</span> MPI_Datatype datatype<span class="token punctuation">,</span> MPI_Comm comm<span class="token punctuation">)</span> <span class="token keyword">void</span><span class="token operator">*</span> inbuf ： 输入缓冲区地址<span class="token punctuation">;</span><span class="token keyword">int</span> insize ：输入数据项数目<span class="token punctuation">;</span>MPI_datatype datatype ：数据项的类型<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>outbuf ：输出缓冲区地址<span class="token punctuation">;</span><span class="token keyword">int</span> outcount ：输出缓冲区大小<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>position ：缓冲区当前位置<span class="token punctuation">;</span>MPI_Comm comm ：通信子<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>MPI_Unpack</code>函数用于将打包的数据从输入缓冲区解包到输出缓冲区。</p><p>参数说明：</p><ul><li><code>inbuf</code>：指向输入缓冲区的指针，其中包含要解包的数据。</li><li><code>insize</code>：输入缓冲区的大小（以字节为单位）。</li><li><code>position</code>：一个整数指针，用于返回当前在输入缓冲区中的位置。</li><li><code>outbuf</code>：指向输出缓冲区的指针，用于存储解包后的数据。</li><li><code>outcount</code>：输出缓冲区的大小（以元素为单位）。</li><li><code>datatype</code>：数据类型的对象，指定了输入缓冲区和输出缓冲区中元素的类型。</li><li><code>comm</code>：通信器对象，用于指定进程之间的通信。</li></ul><p>该函数的作用是将打包的数据从输入缓冲区解包到输出缓冲区，以便在不同的进程之间传输或存储。解包后的数据可以按照指定的数据类型进行解析和使用。</p><h3 id="实验说明-18"><a href="#实验说明-18" class="headerlink" title="实验说明"></a>实验说明</h3><p>在源进程中打包发送一个数据包到编号为1的进程，编号为1的进程解包并打印出数据。</p><p>输出结果</p><p>The number is 1 and 2</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">,</span> source<span class="token punctuation">;</span>MPI_Status status<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> position<span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> buf<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>myid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                position <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>            <span class="token function">MPI_Pack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>position<span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">MPI_Pack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>position<span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">MPI_Send</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> position<span class="token punctuation">,</span> MPI_PACKED<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>myid <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">MPI_Recv</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>position <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// your code here</span><span class="token function">MPI_Unpack</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>position<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Unpack</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>position<span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MPI_INT<span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// end of your code</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The number is %d and %d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组的管理-集合类操作"><a href="#组的管理-集合类操作" class="headerlink" title="组的管理-集合类操作"></a>组的管理-集合类操作</h2><p>对于两个集合，我们经常对其进行各种各样的集合操作，例如交&#x2F;并。</p><p>MPI同样提供了对组的集合类操作。</p><h3 id="函数说明-21"><a href="#函数说明-21" class="headerlink" title="函数说明"></a>函数说明</h3><pre class="line-numbers language-none"><code class="language-none">int MPI_Group_union(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup)int MPI_Group_intersection(MPI_Group group1,MPI_Group group2,MPI_Group *newgroup) int MPI_Group_difference(MPI_Group group1,MPI_Group group2,MPI_Group *newgroup)MPI_Group group1 ： 要操作的组1；MPI_Group group2 ： 要操作的组2；MPI_Group *newgroup：新的组;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>MPI_Group_union</code>函数用于计算两个进程组的并集。它接受三个参数：</p><ul><li><code>group1</code>：第一个进程组。</li><li><code>group2</code>：第二个进程组。</li><li><code>newgroup</code>：指向新进程组的指针，该进程组将包含<code>group1</code>和<code>group2</code>的并集。</li></ul><p>该函数返回一个整数，表示操作的结果。如果成功，返回值为<code>MPI_SUCCESS</code>；否则，返回一个非零的错误代码。</p><p>以下是一个示例代码片段，演示如何使用<code>MPI_Group_union</code>函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建两个进程组</span>    MPI_Group group1<span class="token punctuation">,</span> group2<span class="token punctuation">;</span>    <span class="token function">MPI_Comm_group</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>group1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_group</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>group2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算进程组的并集</span>    MPI_Group newgroup<span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">MPI_Group_union</span><span class="token punctuation">(</span>group1<span class="token punctuation">,</span> group2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>newgroup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> MPI_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: MPI_Group_union failed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 打印结果</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Process groups union successful.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 释放资源</span>    <span class="token function">MPI_Group_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>group1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Group_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>group2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Group_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newgroup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，上述代码仅为示例，实际使用时需要根据具体情况进行适当的修改和错误处理。</p></blockquote><h3 id="实验说明-19"><a href="#实验说明-19" class="headerlink" title="实验说明"></a>实验说明</h3><p>将组按照编号的奇偶分为两个新的组，再用并操作将它们合起来，输出各个进程在新的组的编号。</p><p>输出结果</p><p>In process 0: union rank is 2<br>In process 1: union rank is 0<br>In process 2: union rank is 3<br>In process 3: union rank is 1</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;mpi.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> myid<span class="token punctuation">,</span> numprocs<span class="token punctuation">,</span> union_rank<span class="token punctuation">;</span>MPI_Group group_world<span class="token punctuation">,</span> odd_group<span class="token punctuation">,</span> even_group<span class="token punctuation">,</span> union_group<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> members<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numprocs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Comm_group</span><span class="token punctuation">(</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>group_world<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numprocs<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>members<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">MPI_Group_incl</span><span class="token punctuation">(</span>group_world<span class="token punctuation">,</span> numprocs<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> members<span class="token punctuation">,</span> <span class="token operator">&amp;</span>odd_group<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Group_excl</span><span class="token punctuation">(</span>group_world<span class="token punctuation">,</span> numprocs<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> members<span class="token punctuation">,</span> <span class="token operator">&amp;</span>even_group<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// your code here</span><span class="token function">MPI_Group_union</span><span class="token punctuation">(</span>odd_group<span class="token punctuation">,</span> even_group<span class="token punctuation">,</span> <span class="token operator">&amp;</span>union_group<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// end of your code</span><span class="token function">MPI_Group_rank</span><span class="token punctuation">(</span>union_group<span class="token punctuation">,</span> <span class="token operator">&amp;</span>union_rank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"In process %d: union rank is %d\n"</span><span class="token punctuation">,</span> myid<span class="token punctuation">,</span> union_rank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>live2D看板娘设置</title>
      <link href="/posts/f571.html"/>
      <url>/posts/f571.html</url>
      
        <content type="html"><![CDATA[<h1 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h1><h2 id="1-模型插件"><a href="#1-模型插件" class="headerlink" title="1.模型插件"></a>1.模型插件</h2><p>在hexo根目录进入git bash，输入以下命令安装模型插件</p><pre class="line-numbers language-Text" data-language="Text"><code class="language-Text"># npm install --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>卸载模型</p><pre class="line-numbers language-Text" data-language="Text"><code class="language-Text"># npm uninstall --save hexo-helper-live2d <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-挑选模型"><a href="#2-挑选模型" class="headerlink" title="2.挑选模型"></a>2.挑选模型</h2><p><a href="https://github.com/xiazeyu/live2d-widget-models">live2d模型仓库直达</a></p><h3 id="部分模型展示"><a href="#部分模型展示" class="headerlink" title="部分模型展示"></a>部分模型展示</h3><table>    <tr>        <td><center><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202401272109891.png"></center>        </td>        <td><center><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202401272122120.png"></center>        </td>    </tr></table>↓ 各个模型库使用 npm install {packagename}`安装模型<ul><li><code>live2d-widget-model-chitose</code></li><li><code>live2d-widget-model-epsilon2_1</code></li><li><code>live2d-widget-model-gf</code></li><li><code>live2d-widget-model-haru/01</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li><li><code>live2d-widget-model-haru/02</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li><li><code>live2d-widget-model-haruto</code></li><li><code>live2d-widget-model-hibiki</code></li><li><code>live2d-widget-model-hijiki</code></li><li><code>live2d-widget-model-izumi</code></li><li><code>live2d-widget-model-koharu</code></li><li><code>live2d-widget-model-miku</code></li><li><code>live2d-widget-model-ni-j</code></li><li><code>live2d-widget-model-nico</code></li><li><code>live2d-widget-model-nietzsche</code></li><li><code>live2d-widget-model-nipsilon</code></li><li><code>live2d-widget-model-nito</code></li><li><code>live2d-widget-model-shizuku</code></li><li><code>live2d-widget-model-tororo</code></li><li><code>live2d-widget-model-tsumiki</code></li><li><code>live2d-widget-model-unitychan</code></li><li><code>live2d-widget-model-wanko</code></li><li><code>live2d-widget-model-z16</code></li></ul><p>我用的是 <code>npm install live2d-widget-model-hibiki</code></p><h3 id="html实现多张图片同行"><a href="#html实现多张图片同行" class="headerlink" title="html实现多张图片同行"></a>html实现多张图片同行</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202401272109891.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202401272122120.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图2 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原文链接：<a href="https://blog.csdn.net/qq_33826564/article/details/81303230">https://blog.csdn.net/qq_33826564/article/details/81303230</a></p><h3 id="3-详细配置"><a href="#3-详细配置" class="headerlink" title="3.详细配置"></a>3.详细配置</h3><p>1.提前在根目录下创建 <code>live2d_models</code> 目录</p><p><img src="https://diy-sprint.top/img/cjml.png" alt="img"></p><p>2.下载好的模型库会在根目录node_modules文件夹中，在该文件夹中搜索模型库名称<code>live2d-widget-model-hibiki</code>将里面的内容复制到提前创建好的目录下<code>live2d_models</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202401272129897.png" alt="img"></p><p>3.开始配置根目录下的<code>_config.yml</code> 文件在底部添加如下操作</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 看板娘</span><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#enable: false</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local <span class="token comment"># 默认</span>  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/ <span class="token comment"># 插件在站点上的根目录(相对路径)</span>  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/ <span class="token comment"># 脚本文件相对与插件根目录路径</span>  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/ <span class="token comment"># 模型文件相对与插件根目录路径</span>  <span class="token comment"># scriptFrom: jsdelivr # jsdelivr CDN</span>  <span class="token comment"># scriptFrom: unpkg # unpkg CDN</span>  <span class="token comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span>  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span>  <span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 调试, 是否在控制台输出日志</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>hibiki    <span class="token comment"># use: live2d-widget-model-wanko # npm-module package name</span>    <span class="token comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span>    <span class="token comment"># use: ./wives/wanko # 相对于博客根目录的路径</span>    <span class="token comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span>  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> right    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">145</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">315</span>    <span class="token key atrule">hOffset</span><span class="token punctuation">:</span> <span class="token number">60</span> <span class="token comment"># 水平偏移 </span>    <span class="token key atrule">vOffset</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment"># 垂直偏移</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否在移动设备上显示</span>    <span class="token key atrule">scale</span><span class="token punctuation">:</span> <span class="token number">0.5</span> <span class="token comment"># 移动设备上的缩放       </span>  <span class="token key atrule">react</span><span class="token punctuation">:</span>    <span class="token key atrule">opacityDefault</span><span class="token punctuation">:</span> <span class="token number">0.7</span>    <span class="token key atrule">opacityOnHover</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>model:  use: live2d-widget-model-hibikiuse <code># 这里填你喜欢的模型</code></p></blockquote><h1 id="增强版设置"><a href="#增强版设置" class="headerlink" title="增强版设置"></a>增强版设置</h1><h3 id="1-先卸载helper-live2d"><a href="#1-先卸载helper-live2d" class="headerlink" title="1.先卸载helper-live2d"></a>1.先卸载helper-live2d</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">npm uninstall hexo<span class="token punctuation">-</span>helper<span class="token punctuation">-</span>live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-下载大神的配置"><a href="#2-下载大神的配置" class="headerlink" title="2.下载大神的配置"></a>2.<a href="https://github.com/stevenjoezhang/live2d-widget">下载大神的配置</a></h3><h3 id="3-解压配置"><a href="#3-解压配置" class="headerlink" title="3.解压配置"></a>3.解压配置</h3><p>解压到<code>\themes\主题\source</code>目录并改名为<code>live2d-widget</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202401272138049.png" alt="img"></p><h3 id="4-修改路径"><a href="#4-修改路径" class="headerlink" title="4.修改路径"></a>4.修改路径</h3><p>修改<code>autoload.js</code>文件，将大神路径改为相对路径</p><pre class="line-numbers language-Text" data-language="Text"><code class="language-Text">&#x2F;&#x2F; 注意：live2d_path 参数应使用绝对路径&#x2F;&#x2F;const live2d_path &#x3D; &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;stevenjoezhang&#x2F;live2d-widget@latest&#x2F;&quot;;const live2d_path &#x3D; &quot;&#x2F;live2d-widget&#x2F;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-修改代码"><a href="#5-修改代码" class="headerlink" title="5.修改代码"></a>5.修改代码</h3><p>修改<code>\themes\主题\layout\_partial</code>下的<code>head.ejs</code>，next主题在&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_layout.swing目录下</p><pre class="line-numbers language-Text" data-language="Text"><code class="language-Text">&lt;!--看板娘--&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;jquery&#x2F;dist&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;&#x2F;live2d-widget&#x2F;autoload.js&quot;&gt;&lt;&#x2F;script&gt;&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;font-awesome&#x2F;css&#x2F;font-awesome.min.css&quot;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-启用配置"><a href="#6-启用配置" class="headerlink" title="6.启用配置"></a>6.启用配置</h3><p>在<code>_config.yml</code>全局配置文末添加</p><pre class="line-numbers language-Text" data-language="Text"><code class="language-Text">#自定义看板娘动画live2d: enable: true  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>想修改看板娘大小、位置、格式、文本内容等，可查看并修改 waifu-tips.js、waifu-tips.json、waifu.css文件。</p><h3 id="7-查看并部署"><a href="#7-查看并部署" class="headerlink" title="7.查看并部署"></a>7.查看并部署</h3><pre class="line-numbers language-none"><code class="language-none">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s &amp;&amp; hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令会首先清除缓存 (<code>hexo clean</code>), 然后生成静态网页 (<code>hexo g</code>), 接着启动本地服务器预览 (<code>hexo s</code>)，最后部署到远程仓库 (<code>hexo d</code>)。请注意，在部署完成后，由于<code>hexo s</code>仍在运行，本地预览将会继续提供服务，直到你手动停止它(<code>Ctrl C</code>)</p><h3 id="8-演示效果"><a href="#8-演示效果" class="headerlink" title="8.演示效果"></a>8.演示效果</h3><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202401272151637.png" alt="image-20240127215123424"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>本文参考以下大神的博文：</p><p>Onlooker：</p><ul><li><a href="https://diy-sprint.top/2021/050559226.html">https://diy-sprint.top/2021/050559226.html</a></li><li><a href="https://diy-sprint.top/2021/050635991.html">添加live2d看板动画(可对话，换装互动) | Onlooker (diy-sprint.top)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> live2D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客(一) ——基础搭建</title>
      <link href="/posts/15bb.html"/>
      <url>/posts/15bb.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h3><p>安装git for windows（或者其它git客户端）<a href="https://git-scm.com/downloads">git下载</a></p><p>验证git安装命令(cmd窗口或鼠标右键菜单的git bash 窗口)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="下载node-js"><a href="#下载node-js" class="headerlink" title="下载node.js"></a>下载node.js</h3><p>在<a href="https://nodejs.org/zh-cn/">官网</a>下载node.js的安装程序，根据你电脑系统的配置信息，下载对应的安装程序。</p><p>验证node安装命令 (cmd窗口或鼠标右键菜单的git bash 窗口)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="vscode安装"><a href="#vscode安装" class="headerlink" title="vscode安装"></a>vscode安装</h3><p>Visual Studio Code <a href="https://visualstudio.microsoft.com/zh-hans/">官网下载</a></p><h3 id="github账号"><a href="#github账号" class="headerlink" title="github账号"></a>github账号</h3><p>如果没有就注册一个：<a href="https://github.com/">https://github.com/</a></p><h2 id="Github-Pages创建"><a href="#Github-Pages创建" class="headerlink" title="Github Pages创建"></a>Github Pages创建</h2>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cuda 入门</title>
      <link href="/posts/c7d8.html"/>
      <url>/posts/c7d8.html</url>
      
        <content type="html"><![CDATA[<h1 id="CUDA入门"><a href="#CUDA入门" class="headerlink" title="CUDA入门"></a>CUDA入门</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>06年，NVIDIA公司发布了CUDA，它是建立在NVIDIA的GPU上的一个通用并行计算平台和编程模型。CUDA编程使得可以更高效地利用GPU的并行计算引擎来解决复杂的计算问题。近年来，GPU在深度学习领域取得了巨大成功，基于GPU的并行计算已成为训练深度学习模型的标准。</p><p>需要强调的是，GPU并非独立运行的计算平台，而是需要与CPU协同工作的。它可以视作CPU的协处理器，在提及GPU并行计算时，实际上指的是基于CPU+GPU的异构计算架构。在这种异构计算架构中，GPU与CPU通过PCIe总线连接在一起，协同完成计算任务。CPU所在位置被称为主机端（host），而GPU所在位置被称为设备端（device），如下图所示：</p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202312191415196.png" alt="image-20231219141540082" style="zoom:80%;" /><p>当比较GPU和CPU时，GPU拥有更多的计算核心，使其非常适合处理数据并行的计算密集型任务，例如大型矩阵运算。相比之下，CPU的核心数量较少，但它们擅长执行复杂的逻辑运算，适用于控制密集型任务。此外，CPU上的线程通常是重型的，导致较大的上下文切换开销，而GPU拥有许多轻量级线程。</p><p>因此，基于CPU+GPU的异构计算平台能够充分发挥优势。CPU负责处理串行程序中的逻辑复杂部分，而GPU则专注于处理数据密集型、并行计算的部分，这样能够实现最佳性能。</p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202312191433412.png" alt="image-20231219143336313" style="zoom:80%;" /><p>CUDA是NVIDIA公司开发的GPU编程模型，它提供了简单易用的接口，可用于构建基于GPU计算的应用程序。CUDA支持多种编程语言，如C&#x2F;C++、Python和Fortran等。下面我们将使用CUDA C&#x2F;C++接口来讲解CUDA编程。Windows系统下的CUDA安装教程可以参考给出的链接进行安装：<a href="https://blog.csdn.net/chen565884393/article/details/127905428">CUDA安装及环境配置——最新详细版-CSDN博客</a></p><h2 id="入门基础"><a href="#入门基础" class="headerlink" title="入门基础"></a>入门基础</h2><p>在CUDA编程模型中，涉及两个核心概念：host和device。</p><p>host代表着CPU及其相关内存，而device代表着GPU及其相关内存。CUDA程序中同时存在host程序和device程序，分别在CPU和GPU上运行。此外，host和device之间可以进行通信，允许数据在它们之间进行传输。</p><p>一般而言，典型的CUDA程序执行流程如下：</p><ol><li>分配host内存并对数据进行初始化</li><li>分配device内存，并将数据从host拷贝到device上</li><li>调用CUDA的核函数（kernel）在device上完成指定的并行运算</li><li>将device上计算得到的结果拷贝回host</li><li>释放device和host上分配的内存空间</li></ol><p>核函数（kernel）是CUDA中的关键概念，它是在device上并行执行的函数。核函数以 <code>__global__</code> 修饰符声明，在调用时需要使用 <code>&lt;&lt;&lt;grid, block&gt;&gt;&gt;</code> 来指定kernel要执行的线程数量。在CUDA中，每个线程都会执行核函数，并且每个线程都会有一个唯一的线程ID，可以通过核函数的内置变量 threadIdx 来获取。</p><p>由于GPU是异构计算模型，因此需要区分host和device上的代码。在CUDA中，可以通过函数类型限定词来区分host和device上的函数。主要的三种函数类型限定词如下：</p><ul><li><code>__global__</code>：在device上执行，可以从host调用（一些特定的GPU也能从device上调用）。返回类型必须是 void，不支持可变参数，也不能成为类的成员函数。需要注意的是，用 <code>__global__</code> 定义的kernel是异步执行的，这意味着host不会等待kernel执行完毕再执行下一步。</li><li><code>__device__</code>：在device上执行，仅可以从device中调用，不能与 <code>__global__</code> 同时使用。</li><li><code>__host__</code>：在host上执行，仅可以从host中调用。一般情况下，此修饰符可以省略不写。它不能与 <code>__global__</code> 同时使用，但可以与 <code>__device__</code> 结合使用，此时函数可在device和host上都编译。</li></ul><p>要深入理解kernel，需要对kernel的线程层次结构有清晰的认识。</p><ul><li>线程结构的第一层次：GPU上存在大量并行化的轻量级线程。当kernel在device上执行时，实际上是启动了大量线程，一个kernel启动的所有线程构成一个网格（grid）</li><li>第二个层次：在同一个网格内，一些线程共享相同的全局内存空间，网格被分为多个部分，每一个都是一个线程块（block）一个线程块包含多个线程。</li><li>第三个层次：在线程块内，线程被划分为更小的单元，称为线程（thread）。这是GPU上的最细粒度的并行层次。线程是执行计算的基本单元，它们共享线程块内的资源，包括寄存器文件和共享内存。通过合理的组织和协同工作，线程能够高效地执行各自的任务，实现更细致的并行化。</li></ul><p>线程的层次结构如下图所示，以二维的grid和block为例。grid和block都被定义为 dim3 类型的变量，dim3 可以看作包含三个无符号整数（x，y，z）成员的结构体变量，在定义时，缺省值默认为1。因此，grid和block可以灵活定义为1维、2维或3维结构。在CUDA编程中，这些概念和规则是关键，对于理解和利用GPU并行计算极为重要。</p><p>要调用kernel，必须通过执行配置 <code>&lt;&lt;&lt;grid, block&gt;&gt;&gt;</code> 来指定kernel所使用的线程数及结构。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">dim3 <span class="token function">grid</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dim3 <span class="token function">block</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>kernel_fun<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span> grid<span class="token punctuation">,</span> block <span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>prams<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202312231222160.png" alt="Kernel的两层线程组织结构（2-dim）" style="zoom:67%;" /><p>所以，一个线程需要两个内置的坐标变量（blockIdx，threadIdx）来唯一标识，它们都是<code>dim3</code>类型变量，其中blockIdx指明线程所在grid中的位置，而threaIdx指明线程所在block中的位置，如图中的Thread (1,1)满足：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">threadIdx<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>threadIdx<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">1</span>blockIdx<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>blockIdx<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在CUDA编程中，线程块（block）中的线程被分配到同一个流式多处理器（SM）上，但是每个SM的资源是有限的，因此线程块中的线程数量受到限制。现代GPU支持的线程块中的线程数量通常可达1024个。有时候，需要知道一个线程在block中的全局ID，这就需要了解block的组织结构，可以通过线程的内置变量 blockDim 来获取。它获取线程块在各个维度上的大小。对于一个2维的block( D<del>x</del>, D<del>y</del>)，线程(x, y)的ID值为 (x + y * D<del>x</del> )，如果是3维的block( D<del>x</del>, D<del>y</del>, D<del>z</del>)，线程(x, y, z)的ID值为 (x + y * D<del>x</del> + z * D<del>x</del> * D<del>y</del>)。此外，线程还具有内置变量 gridDim，用于获取网格块在各个维度上的大小。</p><p>kernel的这种线程组织结构天然适合vector、matrix等运算，如我们将利用上图2-dim结构实现两个矩阵的加法，每个线程负责处理每个位置的两个元素相加，代码如下所示。线程块大小为(16, 16)，然后将N * N大小的矩阵均分为不同的线程块来执行加法运算。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__global__ <span class="token keyword">void</span> <span class="token function">matrixAddition</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>y <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>y <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token keyword">int</span> col <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">&lt;</span> N <span class="token operator">&amp;&amp;</span> col <span class="token operator">&lt;</span> N<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> row <span class="token operator">*</span> N <span class="token operator">+</span> col<span class="token punctuation">;</span>        c<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 其他代码...</span>    dim3 <span class="token function">blockSize</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dim3 <span class="token function">gridSize</span><span class="token punctuation">(</span><span class="token punctuation">(</span>N <span class="token operator">+</span> blockSize<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> blockSize<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span>N <span class="token operator">+</span> blockSize<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> blockSize<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    matrixAddition<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>gridSize<span class="token punctuation">,</span> blockSize<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>device_a<span class="token punctuation">,</span> device_b<span class="token punctuation">,</span> device_c<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 其他代码...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码中，kernel函数 matrixAddition 实现了矩阵加法操作。通过计算每个线程的行列索引，确保每个线程仅处理有效的矩阵元素。主函数中，根据矩阵大小 N 和设定的线程块大小，计算出适当的 grid 和 block 尺寸，并调用 kernel 函数执行矩阵加法。</p><h3 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h3><p>这里简单介绍一下CUDA的内存模型，如下图所示：</p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202312232011569.png" alt="CUDA内存模型" style="zoom: 67%;" /><p>可以看到，每个线程有自己的私有本地内存（Local Memory），而每个线程块有包含共享内存（Shared Memory）,可以被线程块中所有线程共享，其生命周期与线程块一致。此外，所有的线程都可以访问全局内存（Global Memory）。还可以访问一些只读内存块：常量内存（Constant Memory）和纹理内存（Texture Memory）</p><p>这些内存类型的特点如下：</p><ol><li><p><strong>私有本地内存（Local Memory）</strong>：每个线程都有自己的私有本地内存，用于存储线程私有的变量和数据。这些变量通常是在寄存器不足时或者动态分配内存时使用。访问本地内存的速度较慢，因此需要尽量减少对本地内存的访问，以提高性能。</p></li><li><p><strong>共享内存（Shared Memory）</strong>：每个线程块都拥有共享内存，它可以被该线程块中的所有线程共享。共享内存的生命周期与线程块一致，对于需要在线程块内多个线程之间共享的数据，可以存储在共享内存中。共享内存的访问速度比全局内存快得多，因此可以用于提高线程块内的数据访问效率和并行计算速度。</p></li><li><p><strong>全局内存（Global Memory）</strong>：所有的线程都可以访问全局内存，它是GPU中容量最大的内存类型。全局内存通常用于存储整个程序的数据，但其访问速度相对较慢。因此，在CUDA编程中，需要谨慎优化全局内存的访问，以最大化性能。</p></li><li><p><strong>常量内存（Constant Memory）</strong>：常量内存用于存储对所有线程只读的数据，其特点是具有缓存，提供对只读内存的快速访问，适用于线程内的数据共享。</p></li><li><p><strong>纹理内存（Texture Memory）</strong>：纹理内存是一种特殊的只读内存，适用于图形处理领域，提供对数据的高效访问和插值。它通常用于图像处理等应用场景。</p></li></ol><p>CUDA内存模型中不同类型的内存具有不同的访问特性和速度，合理地利用和管理这些内存类型可以对CUDA程序的性能产生显著影响。优化内存访问是CUDA编程中的一个重要方面，能够有效地提高程序的执行效率。</p><h3 id="硬件认识"><a href="#硬件认识" class="headerlink" title="硬件认识"></a>硬件认识</h3><p>还有重要一点，你需要对GPU的硬件实现有一个基本的认识。上面说到了kernel的线程组织层次，那么一个kernel实际上会启动很多线程，这些线程是逻辑上并行的，但是在物理层却并不一定。</p><p>在GPU硬件中，一个关键组件是SM（Streaming Multiprocessor，流式多处理器）。SM包含CUDA核心、共享内存、寄存器等。SM能够同时执行数百个线程，其并发能力取决于SM拥有的资源数量。当一个kernel被执行时，其线程块被分配到SM上。一个线程块只能在一个SM上被调度，而一个SM通常能够调度多个线程块，这取决于SM本身的能力。因此，一个kernel的线程块可能被分配到多个SM上，所以grid只是逻辑层，而SM才是执行的物理层。</p><p>SM采用的是<a href="https://link.zhihu.com/?target=http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html%23simt-architecture">SIMT</a> (Single-Instruction, Multiple-Thread，单指令多线程)架构，基本的执行单元是线程束（warps)，每个线程束包含32个线程。这些线程同时执行相同的指令，但每个线程都有自己的指令地址计数器和寄存器状态，拥有独立的执行路径。因此，尽管线程束中的线程同时执行相同的指令，但它们可能具有不同的行为，特别是在遇到分支结构时，可能导致一些线程进入分支，而其他线程不执行，这些非执行的线程只能等待，因为GPU规定线程束中所有线程在同一周期执行相同的指令，线程束分化会导致性能下降。</p><p>当一个线程块被划分到SM上时，它会进一步划分为多个线程束，因为这才是SM的基本执行单元。然而，一个SM同时并发的线程束数量是有限的，这受限于资源分配，因为SM要为每个线程块分配共享内存，并为每个线程束中的线程分配独立的寄存器。因此，SM的配置会影响其所支持的线程块和线程束的并发数量。总的来说，虽然kernel的grid和block只是逻辑上的划分，但在物理层面，一个kernel的所有线程并非一定同时并发。因此，需要注意调整grid和block的配置，以充分发挥GPU的性能。此外，由于线程束的基本大小是32，因此block大小最好设置为32的倍数。</p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202312232017228.png" alt="逻辑层和物理层" style="zoom:67%;" /><h3 id="个人配置"><a href="#个人配置" class="headerlink" title="个人配置"></a>个人配置</h3><p>在进行CUDA编程前，可以先检查一下自己的GPU硬件配置，这样才能有的放矢，通过以下代码获得GPU的配置属性：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cuda_runtime.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cudaDeviceProp deviceProp<span class="token punctuation">;</span>    <span class="token function">cudaGetDeviceProperties</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>deviceProp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Device 0 information:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"设备名称与型号: %s\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"显存大小: %d MB\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deviceProp<span class="token punctuation">.</span>totalGlobalMem <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"计算能力: %d.%d\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>major<span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>minor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"含有的SM数量: %d\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>multiProcessorCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"CUDA CORE数量: %d\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>multiProcessorCount <span class="token operator">*</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"每个线程块的共享内存大小: %.2f KB\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>sharedMemPerBlock <span class="token operator">/</span> <span class="token number">1024.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"每个线程块的最大线程数: %d\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>maxThreadsPerBlock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"每个EM的最大线程数: %d\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>maxThreadsPerMultiProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"每个SM的最大线程束数: %d\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>maxThreadsPerMultiProcessor <span class="token operator">/</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="向量加法实例"><a href="#向量加法实例" class="headerlink" title="向量加法实例"></a>向量加法实例</h2><p>知道了CUDA编程基础，我们就来个简单的实战，利用CUDA编程实现两个向量的加法，在实现之前，先简单介绍一下CUDA编程中内存管理API。</p><p>在CUDA编程中，内存管理是至关重要的。以下是常用的内存管理函数的简要介绍：</p><ol><li><p><strong>cudaMalloc() 函数</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cudaError_t <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span> devPtr<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>cudaMalloc</code> 用于在设备（GPU）上分配内存。它类似于C语言中的 <code>malloc()</code> 函数，但是在GPU的全局内存中分配内存。<code>devPtr</code> 是指向分配内存起始位置的指针，<code>size</code> 表示要分配的内存字节数。分配成功时返回 <code>cudaSuccess</code>，否则返回相应的错误码。需要注意，使用完内存后，必须使用 <code>cudaFree()</code> 函数释放相应的设备内存，以避免内存泄漏。</p><p>这个函数和C语言中的malloc类似，但是在device上申请一定字节大小的显存，其中devPtr是指向所分配内存的指针。</p><p>同时要释放分配的内存使用cudaFree函数，这和C语言中的free函数对应。</p></li><li><p><strong>cudaFree() 函数</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cudaError_t <span class="token function">cudaFree</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> devPtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>cudaFree</code> 用于释放之前由 <code>cudaMalloc</code> 分配的设备内存。传入的参数 <code>devPtr</code> 是之前分配的设备内存的指针。释放成功时返回 <code>cudaSuccess</code>，否则返回相应的错误码。</p></li><li><p><strong>cudaMemcpy() 函数</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cudaError_t <span class="token function">cudaMemcpy</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> dst<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> src<span class="token punctuation">,</span> size_t count<span class="token punctuation">,</span> cudaMemcpyKind kind<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>cudaMemcpy</code> 用于在主机（host）和设备（device）之间进行数据传输。它可以控制数据的复制方向，例如从主机到设备、从设备到主机、设备到设备等。<code>dst</code> 和 <code>src</code> 分别是目标和源的指针，<code>count</code>表示要复制的字节数，<code>kind</code>指定了数据传输的方向。常用的传输方向有：<code>cudaMemcpyHostToHost</code>、<code>cudaMemcpyHostToDevice</code>、<code>cudaMemcpyDeviceToHost</code>、<code>cudaMemcpyDeviceToDevice</code>，根据英文即可知道传输方向。</p></li></ol><p>在CUDA程序中，合理使用这些函数进行内存分配和数据传输是保证程序正确性和性能的重要一步。</p><p>现在我们来实现一个向量加法的实例，这里grid和block都设计为1-dim，首先定义kernel如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 两个向量加法kernel，grid和block均为一维</span>__global__ <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 获取全局索引</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x <span class="token operator">+</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token comment">// 步长</span>    <span class="token keyword">int</span> stride <span class="token operator">=</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">*</span> gridDim<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> stride<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        z<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中stride是整个grid的线程数，有时候向量的元素数很多，这时候可以将在每个线程实现多个元素（元素总数&#x2F;线程总数）的加法，相当于使用了多个grid来处理，这是一种<a href="https://link.zhihu.com/?target=https://devblogs.nvidia.com/cuda-pro-tip-write-flexible-kernels-grid-stride-loops/">grid-stride loop</a>方式，不过下面的例子一个线程只处理一个元素，所以kernel里面的循环是不执行的。</p><p>下面是一个简单的向量加法示例，使用CUDA编程中的基本概念和函数进行向量相加操作：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cuda_runtime.h></span></span><span class="token comment">// 两个向量加法kernel，grid和block均为一维</span>__global__ <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取全局索引</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x <span class="token operator">+</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token comment">// 步长</span>    <span class="token keyword">int</span> stride <span class="token operator">=</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">*</span> gridDim<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> stride<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        z<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// 向量大小</span>    <span class="token keyword">int</span> nBytes <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">float</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token operator">*</span>y<span class="token punctuation">,</span> <span class="token operator">*</span>z<span class="token punctuation">;</span> <span class="token comment">// 定义主机上的向量指针</span>    <span class="token keyword">float</span> <span class="token operator">*</span>dev_x<span class="token punctuation">,</span> <span class="token operator">*</span>dev_y<span class="token punctuation">,</span> <span class="token operator">*</span>dev_z<span class="token punctuation">;</span> <span class="token comment">// 定义设备上的向量指针</span>    <span class="token comment">// 在主机上分配内存</span>    x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>nBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>nBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>nBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在设备上分配内存</span>    <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>dev_x<span class="token punctuation">,</span> nBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>dev_y<span class="token punctuation">,</span> nBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>dev_z<span class="token punctuation">,</span> nBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化主机上的向量数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0f</span><span class="token punctuation">;</span>        y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2.0f</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 将主机上的向量数据复制到设备</span>    <span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>dev_x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> nBytes<span class="token punctuation">,</span> cudaMemcpyHostToDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>dev_y<span class="token punctuation">,</span> y<span class="token punctuation">,</span> nBytes<span class="token punctuation">,</span> cudaMemcpyHostToDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义 grid 和 block 的大小</span>    <span class="token keyword">int</span> blockSize <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numBlocks <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> blockSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> blockSize<span class="token punctuation">;</span>    <span class="token comment">// 调用 kernel 函数</span>    add<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>numBlocks<span class="token punctuation">,</span> blockSize<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>dev_x<span class="token punctuation">,</span> dev_y<span class="token punctuation">,</span> dev_z<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将设备上的结果复制回主机</span>    <span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> dev_z<span class="token punctuation">,</span> nBytes<span class="token punctuation">,</span> cudaMemcpyDeviceToHost<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 验证结果</span>    <span class="token keyword">float</span> maxError <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        maxError <span class="token operator">=</span> <span class="token function">fmaxf</span><span class="token punctuation">(</span>maxError<span class="token punctuation">,</span> <span class="token function">fabsf</span><span class="token punctuation">(</span>z<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">3.0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大误差: %f\n"</span><span class="token punctuation">,</span> maxError<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 释放设备和主机上的内存</span>    <span class="token function">cudaFree</span><span class="token punctuation">(</span>dev_x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cudaFree</span><span class="token punctuation">(</span>dev_y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cudaFree</span><span class="token punctuation">(</span>dev_z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码实现了向量加法操作，它使用了CUDA的核函数 <code>add</code>，将两个向量 <code>x</code> 和 <code>y</code> 相加得到结果向量 <code>z</code>。在主机和设备之间进行内存分配、数据传输和核函数调用，最后将结果从设备复制回主机进行验证。这里的向量大小为1&lt;&lt;20，而block大小为256，grid大小是4096，kernel的线程层级结构如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202312232141601.png" alt="kernel的线程层次结构"></p><h2 id="nvprof"><a href="#nvprof" class="headerlink" title="nvprof"></a>nvprof</h2><p>NVIDIA nvprof &#x2F; nvvp工具是英伟达N卡GPU编程中用于观察的利器。全称是NVIDIA Visual Profiler，是由2008年起开始支持的性能分析器。交互性好，利于使用。其中记录运行日志时使用命令nvprof，可视化显示日志时使用命令nvvp。</p><p>不过在最近几年，英伟达官方推出了新的性能分析工具NSight，官方更加建议使用新的工具，给出的原因是NSight运行时消耗的资源更少，统计的数据更加贴近实际运行情况的数据。相比之下使用nvprof&#x2F;nvvp方式运行时消耗资源较多，数据统计容易不准确。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>nvprof</code> 是 NVIDIA 提供的一个用于分析 CUDA 应用程序性能的命令行工具。它可以用来收集和分析 CUDA 应用程序的性能数据，包括核函数执行时间、内存使用情况等。</p><p>使用 <code>nvprof</code> 工具来分析 CUDA 核函数运行情况的基本步骤：</p><ol><li><p><strong>编译代码</strong>：首先，确保代码已经被编译成可执行文件。</p></li><li><p>**运行 <code>nvprof</code>**：在命令行中运行 <code>nvprof</code> 并指定要分析的可执行文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvprof ./your_executable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将启动您的 CUDA 可执行文件并开始收集性能数据。</p></li><li><p><strong>查看分析结果</strong>：<code>nvprof</code> 会输出核函数的执行时间、内存使用情况等相关信息。通常，您可以在输出中找到有关核函数执行时间、内存传输时间、资源使用情况等方面的详细信息。该输出可以帮助您确定哪些部分的代码可能需要优化或哪些操作占用了较多的时间和资源。</p></li><li><p><strong>选择特定的分析选项</strong>：<code>nvprof</code> 还提供了许多选项，可用于指定收集的数据类型、输出格式、分析范围等。您可以根据需要使用不同的选项进行详细的分析。</p></li></ol><p>例如，您可以通过以下方式使用 <code>nvprof</code> 对示例程序进行分析：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvprof ./your_executable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会收集并显示有关您的 CUDA 可执行文件的基本性能数据。您还可以使用其他选项来进行更详细的分析，例如收集内存信息、指定要分析的核函数等等。可以通过 <code>nvprof --help</code> 查看更多可用选项的详细信息。</p><p>请注意，<code>nvprof</code> 是一个强大的工具，可以帮助您深入了解 CUDA 应用程序的性能瓶颈和优化机会。</p><p>使用nvprof工具可以分析kernel运行情况，结果如下所示，可以看到kernel函数费时约1.5ms。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">nvprof cuda9.exe==7244== NVPROF is profiling process 7244, command: cuda9.exe最大误差: 4.31602e+008==7244== Profiling application: cuda9.exe==7244== Profiling result:            Type  Time(%)      Time     Calls       Avg       Min       Max  Name GPU activities:   67.57%  3.2256ms         2  1.6128ms  1.6017ms  1.6239ms  [CUDA memcpy HtoD]                   32.43%  1.5478ms         1  1.5478ms  1.5478ms  1.5478ms  add(float*, float*, float*, int)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你调整block的大小，对比不同配置下的kernel运行情况，我这里测试的是当block为128时，kernel费时约1.6ms，而block为512时kernel费时约1.7ms，当block为64时，kernel费时约2.3ms。看来不是block越大越好，而要适当选择。</p><h2 id="统一内存管理"><a href="#统一内存管理" class="headerlink" title="统一内存管理"></a>统一内存管理</h2><p>在前面的实现中，我们需要单独在host和device上进行内存分配，并且要进行数据拷贝，这是很容易出错的。好在CUDA 6.0引入统一内存（<a href="https://link.zhihu.com/?target=http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html%23um-unified-memory-programming-hd">Unified Memory</a>）来避免这种麻烦，简单来说就是统一内存使用一个托管内存来共同管理host和device中的内存，并且自动在host和device中进行数据传输。</p><p><code>cudaMallocManaged</code>是CUDA编程中用于动态分配内存的一个函数，它为设备和主机提供统一的、可共享的内存空间。这个函数属于CUDA运行时API的一部分。</p><p>函数：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cudaError_t cudaMallocManaged(void **devPtr, size_t size, unsigned int flags&#x3D;0);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数解析：</p><ol><li><p><code>void **devPtr</code>：输出参数，指向设备内存的指针。调用成功后，<code>devPtr</code>将被设置为新分配内存区域的首地址，该内存区域可供GPU和CPU访问。</p></li><li><p><code>size_t size</code>：输入参数，要分配的内存大小（以字节为单位）。</p></li><li><p><code>unsigned int flags</code>：可选输入参数，默认值为0。可以使用此参数指定内存管理行为，例如：</p><ul><li><code>cudaMemAttachHost</code>: 表示内存应该同时对主机和设备可见，并且在需要时自动同步。</li><li><code>cudaMemAttachGlobal</code>: 与<code>cudaMemAttachHost</code>类似，但不保证内存始终驻留在主机上。</li></ul></li></ol><p>返回值：</p><ul><li><code>cudaSuccess</code>：如果成功分配了内存，则返回此状态。</li><li>其他错误代码（如<code>cudaErrorMemoryAllocation</code>等）：如果发生错误，如内存不足或其他CUDA运行时错误，则返回相应的错误代码。</li></ul><p>通过<code>cudaMallocManaged</code>分配的内存会遵循统一内存（Unified Memory）模型，使得开发者无需手动管理数据在主机和设备之间的迁移，大大简化了并行计算中的内存管理复杂度。然而，需要注意的是，尽管统一内存提供了便捷性，但在某些情况下可能会影响性能，因为它依赖于CUDA驱动程序和硬件进行透明的数据迁移。</p><p>利用统一内存，可以将前面的程序简化如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cuda_runtime.h></span></span>__global__ <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x <span class="token operator">+</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">int</span> stride <span class="token operator">=</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">*</span> gridDim<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> stride<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        z<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// 向量大小</span>    <span class="token keyword">int</span> nBytes <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> <span class="token operator">*</span>z<span class="token punctuation">;</span> <span class="token comment">// 定义统一内存中的向量指针</span>    <span class="token comment">// 在统一内存中分配内存</span>    <span class="token function">cudaMallocManaged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>z<span class="token punctuation">,</span> nBytes <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配统一内存大小为三倍，包括 x, y, z</span>    <span class="token keyword">float</span> <span class="token operator">*</span>x <span class="token operator">=</span> z<span class="token punctuation">;</span> <span class="token comment">// x指针指向统一内存</span>    <span class="token keyword">float</span> <span class="token operator">*</span>y <span class="token operator">=</span> x <span class="token operator">+</span> n<span class="token punctuation">;</span> <span class="token comment">// y指针指向统一内存中x的末尾</span>    <span class="token keyword">float</span> <span class="token operator">*</span>dev_z <span class="token operator">=</span> y <span class="token operator">+</span> n<span class="token punctuation">;</span> <span class="token comment">// dev_z指针指向统一内存中y的末尾</span>    <span class="token comment">// 初始化主机上的向量数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0f</span><span class="token punctuation">;</span>        y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2.0f</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 定义 grid 和 block 的大小</span>    <span class="token keyword">int</span> blockSize <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numBlocks <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> blockSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> blockSize<span class="token punctuation">;</span>    <span class="token comment">// 调用 kernel 函数</span>    add<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>numBlocks<span class="token punctuation">,</span> blockSize<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> dev_z<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 同步device 保证结果能正确访问</span>    <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 验证结果</span>    <span class="token keyword">float</span> maxError <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        maxError <span class="token operator">=</span> <span class="token function">fmaxf</span><span class="token punctuation">(</span>maxError<span class="token punctuation">,</span> <span class="token function">fabsf</span><span class="token punctuation">(</span>dev_z<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">3.0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大误差: %f\n"</span><span class="token punctuation">,</span> maxError<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 释放统一内存</span>    <span class="token function">cudaFree</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相比之前的代码，使用统一内存更简洁了，值得注意的是kernel执行是与host异步的，由于托管内存自动进行数据传输，这里要用cudaDeviceSynchronize()函数保证device和host同步，这样后面才可以正确访问kernel计算的结果。</p><h2 id="矩阵乘法实例"><a href="#矩阵乘法实例" class="headerlink" title="矩阵乘法实例"></a>矩阵乘法实例</h2><p>最后再实现一个稍微复杂一些的例子，就是两个矩阵的乘法，设输入矩阵为 A 和 B ，要得到 C&#x3D;A×B 。实现思路是每个线程计算 C的一个元素值 C<del>i,j</del> ，对于矩阵运算，应该选用grid和block为2-D的。首先定义矩阵的结构体：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 矩阵类型，行优先，M(row, col) = *(M.elements + row * M.width + col)</span><span class="token keyword">struct</span> <span class="token class-name">Matrix</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> width<span class="token punctuation">;</span>    <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token keyword">float</span> <span class="token operator">*</span>elements<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202312232322858.png" alt="矩阵乘法" style="zoom: 67%;" /><p>然后实现矩阵乘法的核函数，这里定义了两个辅助的<code>__device__</code>函数分别用于获取矩阵的元素值和为矩阵元素赋值，具体代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 获取矩阵A的(row, col)元素</span>__device__ <span class="token keyword">float</span> <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token keyword">const</span> Matrix<span class="token operator">*</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> A<span class="token operator">-></span>elements<span class="token punctuation">[</span>row <span class="token operator">*</span> A<span class="token operator">-></span>width <span class="token operator">+</span> col<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 为矩阵A的(row, col)元素赋值</span>__device__ <span class="token keyword">void</span> <span class="token function">setElement</span><span class="token punctuation">(</span>Matrix<span class="token operator">*</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">,</span> <span class="token keyword">float</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    A<span class="token operator">-></span>elements<span class="token punctuation">[</span>row <span class="token operator">*</span> A<span class="token operator">-></span>width <span class="token operator">+</span> col<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 矩阵相乘kernel，2-D，每个线程计算一个元素</span>__global__ <span class="token keyword">void</span> <span class="token function">matMulKernel</span><span class="token punctuation">(</span><span class="token keyword">const</span> Matrix<span class="token operator">*</span> A<span class="token punctuation">,</span> <span class="token keyword">const</span> Matrix<span class="token operator">*</span> B<span class="token punctuation">,</span> Matrix<span class="token operator">*</span> C<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> Cvalue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>y <span class="token operator">+</span> blockIdx<span class="token punctuation">.</span>y <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token keyword">int</span> col <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x <span class="token operator">+</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token operator">-></span>width<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Cvalue <span class="token operator">+=</span> <span class="token function">getElement</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> row<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">getElement</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> i<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">setElement</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> Cvalue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后采用统一内存编写矩阵相乘的测试实例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>    Matrix <span class="token operator">*</span>A<span class="token punctuation">,</span> <span class="token operator">*</span>B<span class="token punctuation">,</span> <span class="token operator">*</span>C<span class="token punctuation">;</span>    <span class="token comment">// 申请托管内存</span>    <span class="token function">cudaMallocManaged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>A<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cudaMallocManaged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>B<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cudaMallocManaged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>C<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nBytes <span class="token operator">=</span> width <span class="token operator">*</span> height <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cudaMallocManaged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>A<span class="token operator">-></span>elements<span class="token punctuation">,</span> nBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cudaMallocManaged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>B<span class="token operator">-></span>elements<span class="token punctuation">,</span> nBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cudaMallocManaged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>C<span class="token operator">-></span>elements<span class="token punctuation">,</span> nBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化数据</span>    A<span class="token operator">-></span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    A<span class="token operator">-></span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>    B<span class="token operator">-></span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    B<span class="token operator">-></span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>    C<span class="token operator">-></span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    C<span class="token operator">-></span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        A<span class="token operator">-></span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        B<span class="token operator">-></span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 定义kernel的执行配置</span>    dim3 <span class="token function">blockSize</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dim3 <span class="token function">gridSize</span><span class="token punctuation">(</span><span class="token punctuation">(</span>width <span class="token operator">+</span> blockSize<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> blockSize<span class="token punctuation">.</span>x<span class="token punctuation">,</span>         <span class="token punctuation">(</span>height <span class="token operator">+</span> blockSize<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> blockSize<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行kernel</span>    matMulKernel <span class="token operator">&lt;&lt;</span> <span class="token operator">&lt;</span> gridSize<span class="token punctuation">,</span> blockSize <span class="token operator">>></span> <span class="token operator">></span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 同步device 保证结果能正确访问</span>    <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 检查执行结果</span>    <span class="token keyword">float</span> maxError <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        maxError <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>maxError<span class="token punctuation">,</span> <span class="token function">fabs</span><span class="token punctuation">(</span>C<span class="token operator">-></span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最大误差: "</span> <span class="token operator">&lt;&lt;</span> maxError <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里矩阵大小为1024，设计的线程的block大小为(32, 32)，那么grid大小为(32, 32)，最终测试结果如下：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">nvprof cuda9.exe==16304== NVPROF is profiling process 16304, command: cuda9.exe最大误差: 0==16304== Profiling application: cuda9.exe==16304== Profiling result:            Type  Time(%)      Time     Calls       Avg       Min       Max  Name GPU activities:  100.00%  1.32752s         1  1.32752s  1.32752s  1.32752s  matMulKernel(Matrix*, Matrix*, Matrix*)      API calls:   83.11%  1.32762s         1  1.32762s  1.32762s  1.32762s  cudaDeviceSynchronize                   13.99%  223.40ms         6  37.233ms  37.341us  217.66ms  cudaMallocManaged                    2.81%  44.810ms         1  44.810ms  44.810ms  44.810ms  cudaLaunch                    0.08%  1.3300ms        94  14.149us       0ns  884.64us  cuDeviceGetAttribute                    0.01%  199.03us         1  199.03us  199.03us  199.03us  cuDeviceGetName                    0.00%  10.009us         1  10.009us  10.009us  10.009us  cuDeviceTotalMem                    0.00%  6.5440us         1  6.5440us  6.5440us  6.5440us  cudaConfigureCall                    0.00%  3.0800us         3  1.0260us     385ns  1.5400us  cudaSetupArgument                    0.00%  2.6940us         3     898ns     385ns  1.5390us  cuDeviceGetCount                    0.00%  1.9250us         2     962ns     385ns  1.5400us  cuDeviceGet==16304== Unified Memory profiling result:Device "GeForce GT 730 (0)"   Count  Avg Size  Min Size  Max Size  Total Size  Total Time  Name    2051  4.0000KB  4.0000KB  4.0000KB  8.011719MB  21.20721ms  Host To Device     270  45.570KB  4.0000KB  1.0000MB  12.01563MB  7.032508ms  Device To Host<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>CUDA编程入门相对简单，通过掌握基本的线程管理和内存操作，可以快速实现并行计算的基本应用。然而，随着问题复杂度的提升，深入CUDA领域则需面对更多挑战：例如动态并行性管理、流式多处理器的细粒度同步控制、全局内存与共享内存的有效利用（包括bank冲突处理）、纹理和常量内存优化、以及先进的并行算法设计如归约、扫瞄等。此外，针对现代GPU架构的特性进行性能调优，理解并解决内存层次结构带来的瓶颈，亦是深入CUDA技术栈的重要环节。只有不断钻研这些高级技术和最佳实践，才能在大规模并行计算中发挥出CUDA的真正威力，实现从“入门”到“精通”的跨越。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://zhuanlan.zhihu.com/p/34587739">CUDA编程入门极简教程 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/TracelessLe/article/details/110880135">https://blog.csdn.net/TracelessLe/article/details/110880135</a></p>]]></content>
      
      
      <categories>
          
          <category> cuda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cuda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今日诗句-祝福前程</title>
      <link href="/posts/f97.html"/>
      <url>/posts/f97.html</url>
      
        <content type="html"><![CDATA[<h2 id="祝福前程"><a href="#祝福前程" class="headerlink" title="祝福前程"></a>祝福前程</h2><div class="ipage">   <div class="ititle">祝福前程</div>    <div class="izhengwen">      <p>        明年此日青云去，却笑人间举子忙 ——辛弃疾《鹧鸪天·送廓之秋试》<br>        莫愁前路无知己，天下谁人不识君 ——高适《别董大》<br>        天下谁非健者，我辈终为奇土 ——张翥《水调歌头·三十九年我》<br>        前程路险莫蹉跎 ——元姬翼《临江·岁月无情如电转》<br>        乘风破浪会有时，直挂云帆济沧海 ——李白《行路难》<br>        才子词人，自是白衣卿相 ——柳永《鹤冲天》<br>        大鹏一日同风起，扶摇直上九万里 ——李白《上李邕》<br>        春风得意马蹄疾，一日看尽长安花 ——孟郊《登科后》<br>        希君生羽翼，一化北溟鱼 ——李白《江夏使君叔席上赠史郎中》<br>         鹰击天风壮，鹏飞海浪春 ——司马光《之美举进士寓京师范此诗寄之》<br>         愿祝君如此山水，滔滔岌岌风云起 ——冯时行《遗夔门故书》<br>           </p>    </div> </div><p>​      </p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gmail分身</title>
      <link href="/posts/ae7f.html"/>
      <url>/posts/ae7f.html</url>
      
        <content type="html"><![CDATA[<p>今天要分享的一个方法，前面的邮箱跟原邮箱唯一的区别就是后面多了个<code>+c1</code>。我们只需要在原邮箱后面使用一个 <code>+</code> 号连接一个字符串 <code>c1</code>，后缀不变，你就有了一个新邮箱，使用该方法，你就可以开启分身大法了：</p><blockquote><p>原邮箱：t……<a href="mailto:&#x64;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#109;">&#x64;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#109;</a><br>新邮箱一：t……<a href="mailto:&#x64;&#x2b;&#99;&#x31;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;">&#x64;&#x2b;&#99;&#x31;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;</a><br>新邮箱二：t……<a href="mailto:&#x64;&#43;&#99;&#x32;&#64;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#x6d;">&#x64;&#43;&#99;&#x32;&#64;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#x6d;</a></p></blockquote><p>原理是因为在 Gmail 的邮件地址里，<code>+</code> 号是一个特殊符号，地址中的 <code>+</code> 以及加号后面的部分，会被过滤掉。其实还有一个特殊符号 <code>.</code> 也是一样的，但是不太好用实用价值不大，这里就不详细介绍了。利用这个原理，我们需要注册某个平台的多个几账号时就可以非常方便的完成(例如某 GPT)。这比市面上很多所谓的临时邮箱或者邮箱分身用起来可安全可靠太多了，并且非常方便，在一个邮箱里面就能收到所有的邮件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Gmail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>123云盘资源</title>
      <link href="/posts/5d4b.html"/>
      <url>/posts/5d4b.html</url>
      
        <content type="html"><![CDATA[<p>Adobe全家桶：<a href="https://www.123pan.com/s/yS8UVv-NkFed.html">https://www.123pan.com/s/yS8UVv-NkFed.html</a> 提取码:6666</p><p>AutoCAD：<a href="https://www.123pan.com/s/yS8UVv-2kFed.html">https://www.123pan.com/s/yS8UVv-2kFed.html</a> 提取码:6666</p><p>专业软件：<a href="https://www.123pan.com/s/yS8UVv-rkFed.html">https://www.123pan.com/s/yS8UVv-rkFed.html</a> 提取码:6666</p><p>Unity：<a href="https://www.123pan.com/s/yS8UVv-skFed.html">https://www.123pan.com/s/yS8UVv-skFed.html</a> 提取码:6666</p><p>达芬奇：<a href="https://www.123pan.com/s/yS8UVv-WkFed.html">https://www.123pan.com/s/yS8UVv-WkFed.html</a> 提取码:6666</p><p>建模类：<a href="https://www.123pan.com/s/yS8UVv-CkFed.html">https://www.123pan.com/s/yS8UVv-CkFed.html</a> 提取码:6666</p><p>VMWare虚拟机：<a href="https://www.123pan.com/s/yS8UVv-OkFed.html">https://www.123pan.com/s/yS8UVv-OkFed.html</a> 提取码:6666</p><p>编程工具：<a href="https://www.123pan.com/s/yS8UVv-RkFed.html">https://www.123pan.com/s/yS8UVv-RkFed.html</a> 提取码:6666</p><p>电脑工具：<a href="https://www.123pan.com/s/yS8UVv-DkFed.html">https://www.123pan.com/s/yS8UVv-DkFed.html</a> 提取码:6666</p><p>下载工具：<a href="https://www.123pan.com/s/yS8UVv-nkFed.html">https://www.123pan.com/s/yS8UVv-nkFed.html</a> 提取码:6666</p><p>PS2024(Beta)_25.1总索引：<a href="https://www.123pan.com/s/yS8UVv-VcFed.html">https://www.123pan.com/s/yS8UVv-VcFed.html</a> 提取码:6666【含win+mac】</p><p>Adobe全家桶总索引：<a href="https://www.123pan.com/s/yS8UVv-HiFed.html">https://www.123pan.com/s/yS8UVv-HiFed.html</a> 提取码:6666【含大师版和SP版，win+mac】</p><p>PS：Adobe全家桶如果有解压密码，密码就是@vposy</p><p>【备用：Adobe全家桶：<a href="https://www.123pan.com/s/yS8UVv-hiFed.html">https://www.123pan.com/s/yS8UVv-hiFed.html</a> 提取码:6666】</p><p>音乐软件总索引：<a href="https://www.123pan.com/s/yS8UVv-u7Fed.html">https://www.123pan.com/s/yS8UVv-u7Fed.html</a> 提取码:6666【含win+mac】</p><p>Win_Al系列软件总索引：<a href="https://www.123pan.com/s/yS8UVv-h7Fed.html">https://www.123pan.com/s/yS8UVv-h7Fed.html</a> 提取码:6666【包含HitPaw全家桶，Topaz全家桶】</p><p>Mac_Al系列软件总索引：<a href="https://www.123pan.com/s/yS8UVv-niFed.html">https://www.123pan.com/s/yS8UVv-niFed.html</a> 提取码:6666【包含HitPaw全家桶，Topaz全家桶】</p><p>远程桌面RayLink官网<a href="https://www.raylink.live/">https://www.raylink.live/</a></p><p>Mac2024：<a href="https://www.123pan.com/s/yS8UVv-uIYed.html%E3%80%90">https://www.123pan.com/s/yS8UVv-uIYed.html【</a> 提取码:6666】</p><p>Win2024：<a href="https://www.123pan.com/s/yS8UVv-rIYed.html%E3%80%90">https://www.123pan.com/s/yS8UVv-rIYed.html【</a> 提取码:6666】</p><p>更多monkrus资源：<a href="https://www.123pan.com/s/yS8UVv-8IYed.html%E3%80%90">https://www.123pan.com/s/yS8UVv-8IYed.html【</a> 提取码:6666】</p><p>👉Adobe全家桶所有🐬：<a href="https://www.123pan.com/s/yS8UVv-hiFed.html%E3%80%90">https://www.123pan.com/s/yS8UVv-hiFed.html【</a> 提取码:6666】</p><p>Adobe全家桶：</p><p>【建议去总文件夹】：<a href="https://www.123pan.com/s/yS8UVv-NkFed.html">https://www.123pan.com/s/yS8UVv-NkFed.html</a> 提取码:6666</p><p>PS：<a href="https://www.123pan.com/s/yS8UVv-bkFed.html">https://www.123pan.com/s/yS8UVv-bkFed.html</a> 提取码:6666</p><p>PR：<a href="https://www.123pan.com/s/yS8UVv-ZkFed.html">https://www.123pan.com/s/yS8UVv-ZkFed.html</a> 提取码:6666</p><p>AE：<a href="https://www.123pan.com/s/yS8UVv-ckFed.html">https://www.123pan.com/s/yS8UVv-ckFed.html</a> 提取码:6666</p><p>Ai：<a href="https://www.123pan.com/s/yS8UVv-ekFed.html">https://www.123pan.com/s/yS8UVv-ekFed.html</a> 提取码:6666</p><p>ME：<a href="https://www.123pan.com/s/yS8UVv-tkFed.html">https://www.123pan.com/s/yS8UVv-tkFed.html</a> 提取码:6666</p><p>AU：<a href="https://www.123pan.com/s/yS8UVv-ikFed.html">https://www.123pan.com/s/yS8UVv-ikFed.html</a> 提取码:6666</p><p>An：<a href="https://www.123pan.com/s/yS8UVv-zkFed.html">https://www.123pan.com/s/yS8UVv-zkFed.html</a> 提取码:6666</p><p>AdobeAcrobat：<a href="https://www.123pan.com/s/yS8UVv-LkFed.html">https://www.123pan.com/s/yS8UVv-LkFed.html</a> 提取码:6666</p><p>AdobeBridge：<a href="https://www.123pan.com/s/yS8UVv-5kFed.html">https://www.123pan.com/s/yS8UVv-5kFed.html</a> 提取码:6666</p><p>AdobeDimension：<a href="https://www.123pan.com/s/yS8UVv-qkFed.html">https://www.123pan.com/s/yS8UVv-qkFed.html</a> 提取码:6666</p><p>AdobeDreamweaver：<a href="https://www.123pan.com/s/yS8UVv-6kFed.html">https://www.123pan.com/s/yS8UVv-6kFed.html</a> 提取码:6666</p><p>AdobeFlash：<a href="https://www.123pan.com/s/yS8UVv-ykFed.html">https://www.123pan.com/s/yS8UVv-ykFed.html</a> 提取码:6666</p><p>AdobeFrameMaker：<a href="https://www.123pan.com/s/yS8UVv-VkFed.html">https://www.123pan.com/s/yS8UVv-VkFed.html</a> 提取码:6666</p><p>AdobeInCopy：<a href="https://www.123pan.com/s/yS8UVv-jkFed.html">https://www.123pan.com/s/yS8UVv-jkFed.html</a> 提取码:6666</p><p>AdobeInDesign：<a href="https://www.123pan.com/s/yS8UVv-ToFed.html">https://www.123pan.com/s/yS8UVv-ToFed.html</a> 提取码:6666</p><p>AdobePrelude：<a href="https://www.123pan.com/s/yS8UVv-voFed.html">https://www.123pan.com/s/yS8UVv-voFed.html</a> 提取码:6666</p><p>CharacterAnimator：<a href="https://www.123pan.com/s/yS8UVv-doFed.html">https://www.123pan.com/s/yS8UVv-doFed.html</a> 提取码:6666</p><p>ExperienceDesign：<a href="https://www.123pan.com/s/yS8UVv-3oFed.html">https://www.123pan.com/s/yS8UVv-3oFed.html</a> 提取码:6666</p><p>LightroomClassic：<a href="https://www.123pan.com/s/yS8UVv-hoFed.html">https://www.123pan.com/s/yS8UVv-hoFed.html</a> 提取码:6666</p><p>PhotoshopElements：<a href="https://www.123pan.com/s/yS8UVv-HoFed.html">https://www.123pan.com/s/yS8UVv-HoFed.html</a> 提取码:6666</p><p>PremiereElements：<a href="https://www.123pan.com/s/yS8UVv-AoFed.html">https://www.123pan.com/s/yS8UVv-AoFed.html</a> 提取码:6666</p><p>PremiereRush：<a href="https://www.123pan.com/s/yS8UVv-9oFed.html">https://www.123pan.com/s/yS8UVv-9oFed.html</a> 提取码:6666</p><p>Substance3DDesignater：<a href="https://www.123pan.com/s/yS8UVv-QoFed.html">https://www.123pan.com/s/yS8UVv-QoFed.html</a> 提取码:6666</p><p>VMWare虚拟机：<a href="https://www.123pan.com/s/yS8UVv-OkFed.html">https://www.123pan.com/s/yS8UVv-OkFed.html</a> 提取码:6666</p><p>包含：16，17部分版本</p><p>VisualStudioCode(官网链接)：<a href="https://www.123pan.com/s/yS8UVv-EoFed.html">https://www.123pan.com/s/yS8UVv-EoFed.html</a> 提取码:6666</p><p>VisualStudio：<a href="https://www.123pan.com/s/yS8UVv-koFed.html">https://www.123pan.com/s/yS8UVv-koFed.html</a> 提取码:6666</p><p>包含：一些社区版，专业版，企业版</p><p>JetBrains家族：<a href="https://www.123pan.com/s/yS8UVv-ooFed.html">https://www.123pan.com/s/yS8UVv-ooFed.html</a> 提取码:6666</p><p>包含：IntelliJIDEA，JetBrainsWebStorm，PyCharm</p><p>IntelliJIDEA：<a href="https://www.123pan.com/s/yS8UVv-moFed.html">https://www.123pan.com/s/yS8UVv-moFed.html</a> 提取码:6666</p><p>JetBrainsWebStorm：<a href="https://www.123pan.com/s/yS8UVv-1oFed.html">https://www.123pan.com/s/yS8UVv-1oFed.html</a> 提取码:6666</p><p>PyCharm：<a href="https://www.123pan.com/s/yS8UVv-4oFed.html">https://www.123pan.com/s/yS8UVv-4oFed.html</a> 提取码:6666</p><p>Android：<a href="https://www.123pan.com/s/yS8UVv-xoFed.html">https://www.123pan.com/s/yS8UVv-xoFed.html</a> 提取码:6666</p><p>JAVA8，11部分JDK：<a href="https://www.123pan.com/s/yS8UVv-poFed.html">https://www.123pan.com/s/yS8UVv-poFed.html</a> 提取码:6666</p><p>JetBrains全家桶2022-2023年版：<a href="https://www.123pan.com/s/yS8UVv-F6Fed.html">https://www.123pan.com/s/yS8UVv-F6Fed.html</a> 提取码：6666</p><p>JetBrains全家桶2022.2版：<a href="https://www.123pan.com/s/yS8UVv-g6Fed.html">https://www.123pan.com/s/yS8UVv-g6Fed.html</a> 提取码：6666</p><p>电脑常用工具：<a href="https://www.123pan.com/s/yS8UVv-DkFed.html">https://www.123pan.com/s/yS8UVv-DkFed.html</a> 提取码:6666</p><p>包含：Bandizip，录屏工具，分区工具，硬盘清理工具，数据恢复，7-zip</p><p>bandizip：<a href="https://www.123pan.com/s/yS8UVv-foFed.html">https://www.123pan.com/s/yS8UVv-foFed.html</a> 提取码:6666</p><p>录屏工具：<a href="https://www.123pan.com/s/yS8UVv-aoFed.html">https://www.123pan.com/s/yS8UVv-aoFed.html</a> 提取码:6666</p><p>分区工具：<a href="https://www.123pan.com/s/yS8UVv-BoFed.html">https://www.123pan.com/s/yS8UVv-BoFed.html</a> 提取码:6666</p><p>硬盘清理工具：<a href="https://www.123pan.com/s/yS8UVv-JoFed.html">https://www.123pan.com/s/yS8UVv-JoFed.html</a> 提取码:6666</p><p>数据恢复：<a href="https://www.123pan.com/s/yS8UVv-IoFed.html">https://www.123pan.com/s/yS8UVv-IoFed.html</a> 提取码:6666</p><p>7-Zip：<a href="https://www.123pan.com/s/yS8UVv-MoFed.html">https://www.123pan.com/s/yS8UVv-MoFed.html</a> 提取码:6666</p><p>达芬奇：<a href="https://www.123pan.com/s/yS8UVv-WkFed.html">https://www.123pan.com/s/yS8UVv-WkFed.html</a> 提取码:6666</p><p>包含：14，15，16，1，18部分版本</p><p>建模类：<a href="https://www.123pan.com/s/yS8UVv-CkFed.html">https://www.123pan.com/s/yS8UVv-CkFed.html</a> 提取码:6666</p><p>包含：3dsMax，Maya，C4D，Blender，ZBrush…….</p><p>3DsMax：<a href="https://www.123pan.com/s/yS8UVv-woFed.html">https://www.123pan.com/s/yS8UVv-woFed.html</a> 提取码:6666</p><p>Maya：<a href="https://www.123pan.com/s/yS8UVv-goFed.html">https://www.123pan.com/s/yS8UVv-goFed.html</a> 提取码:6666</p><p>C4D：<a href="https://www.123pan.com/s/yS8UVv-FoFed.html">https://www.123pan.com/s/yS8UVv-FoFed.html</a> 提取码:6666</p><p>Blender自用：<a href="https://www.123pan.com/s/yS8UVv-YoFed.html">https://www.123pan.com/s/yS8UVv-YoFed.html</a> 提取码:6666</p><p>ZBrush：<a href="https://www.123pan.com/s/yS8UVv-GoFed.html">https://www.123pan.com/s/yS8UVv-GoFed.html</a> 提取码:6666</p><p>SketchUp草图大师：<a href="https://www.123pan.com/s/yS8UVv-PoFed.html">https://www.123pan.com/s/yS8UVv-PoFed.html</a> 提取码:6666</p><p>VrayforSketchUp：<a href="https://www.123pan.com/s/yS8UVv-XoFed.html">https://www.123pan.com/s/yS8UVv-XoFed.html</a> 提取码:6666</p><p>VrayforRhino：<a href="https://www.123pan.com/s/yS8UVv-noFed.html">https://www.123pan.com/s/yS8UVv-noFed.html</a> 提取码:6666</p><p>MarvelousDesigne：<a href="https://www.123pan.com/s/yS8UVv-2oFed.html">https://www.123pan.com/s/yS8UVv-2oFed.html</a> 提取码:6666</p><p>Lumion：<a href="https://www.123pan.com/s/yS8UVv-soFed.html">https://www.123pan.com/s/yS8UVv-soFed.html</a> 提取码:6666</p><p>Keyshot：<a href="https://www.123pan.com/s/yS8UVv-WoFed.html">https://www.123pan.com/s/yS8UVv-WoFed.html</a> 提取码:6666</p><p>Enscape：<a href="https://www.123pan.com/s/yS8UVv-CoFed.html">https://www.123pan.com/s/yS8UVv-CoFed.html</a> 提取码:6666</p><p>CorelCAD：<a href="https://www.123pan.com/s/yS8UVv-NoFed.html">https://www.123pan.com/s/yS8UVv-NoFed.html</a> 提取码:6666</p><p>Artlantis：<a href="https://www.123pan.com/s/yS8UVv-OoFed.html">https://www.123pan.com/s/yS8UVv-OoFed.html</a> 提取码:6666</p><p>CAD：<a href="https://www.123pan.com/s/yS8UVv-2kFed.html">https://www.123pan.com/s/yS8UVv-2kFed.html</a> 提取码:6666</p><p>包含：CAD，中望CAD，浩辰CAD等等多个版本</p><p>CAD：<a href="https://www.123pan.com/s/yS8UVv-RoFed.html">https://www.123pan.com/s/yS8UVv-RoFed.html</a> 提取码:6666</p><p>CAD精简版：<a href="https://www.123pan.com/s/yS8UVv-DoFed.html">https://www.123pan.com/s/yS8UVv-DoFed.html</a> 提取码:6666</p><p>CAD建筑版：<a href="https://www.123pan.com/s/yS8UVv-roFed.html">https://www.123pan.com/s/yS8UVv-roFed.html</a> 提取码:6666</p><p>CAD电气版：<a href="https://www.123pan.com/s/yS8UVv-8oFed.html">https://www.123pan.com/s/yS8UVv-8oFed.html</a> 提取码:6666</p><p>CAD机械版：<a href="https://www.123pan.com/s/yS8UVv-0oFed.html">https://www.123pan.com/s/yS8UVv-0oFed.html</a> 提取码:6666</p><p>中望CAD：<a href="https://www.123pan.com/s/yS8UVv-KoFed.html">https://www.123pan.com/s/yS8UVv-KoFed.html</a> 提取码:6666</p><p>中望CAD建筑版：<a href="https://www.123pan.com/s/yS8UVv-uoFed.html">https://www.123pan.com/s/yS8UVv-uoFed.html</a> 提取码:6666</p><p>中望CAD机械版：<a href="https://www.123pan.com/s/yS8UVv-UoFed.html">https://www.123pan.com/s/yS8UVv-UoFed.html</a> 提取码:6666</p><p>浩辰CAD：<a href="https://www.123pan.com/s/yS8UVv-ZoFed.html">https://www.123pan.com/s/yS8UVv-ZoFed.html</a> 提取码:6666</p><p>浩辰CAD电气版：<a href="https://www.123pan.com/s/yS8UVv-coFed.html">https://www.123pan.com/s/yS8UVv-coFed.html</a> 提取码:6666</p><p>浩辰CAD电力版：<a href="https://www.123pan.com/s/yS8UVv-eoFed.html">https://www.123pan.com/s/yS8UVv-eoFed.html</a> 提取码:6666</p><p>浩辰CAD建筑版：<a href="https://www.123pan.com/s/yS8UVv-toFed.html">https://www.123pan.com/s/yS8UVv-toFed.html</a> 提取码:6666</p><p>CAD迷你画图：<a href="https://www.123pan.com/s/yS8UVv-SoFed.html">https://www.123pan.com/s/yS8UVv-SoFed.html</a> 提取码:6666</p><p>CAXA3D实体设计：<a href="https://www.123pan.com/s/yS8UVv-loFed.html">https://www.123pan.com/s/yS8UVv-loFed.html</a> 提取码:6666</p><p>CAXA电子图板：<a href="https://www.123pan.com/s/yS8UVv-7oFed.html">https://www.123pan.com/s/yS8UVv-7oFed.html</a> 提取码:6666</p><p>CAXA工艺图表：<a href="https://www.123pan.com/s/yS8UVv-boFed.html">https://www.123pan.com/s/yS8UVv-boFed.html</a> 提取码:6666</p><p>T20天正电气：<a href="https://www.123pan.com/s/yS8UVv-ioFed.html">https://www.123pan.com/s/yS8UVv-ioFed.html</a> 提取码:6666</p><p>T20天正结构：<a href="https://www.123pan.com/s/yS8UVv-zoFed.html">https://www.123pan.com/s/yS8UVv-zoFed.html</a> 提取码:6666</p><p>T20天正暖通：<a href="https://www.123pan.com/s/yS8UVv-LoFed.html">https://www.123pan.com/s/yS8UVv-LoFed.html</a> 提取码:6666</p><p>T20天正建筑：<a href="https://www.123pan.com/s/yS8UVv-5oFed.html">https://www.123pan.com/s/yS8UVv-5oFed.html</a> 提取码:6666</p><p>T20天正给排水：<a href="https://www.123pan.com/s/yS8UVv-qoFed.html">https://www.123pan.com/s/yS8UVv-qoFed.html</a> 提取码:6666</p><p>下载工具：<a href="https://www.123pan.com/s/yS8UVv-nkFed.html">https://www.123pan.com/s/yS8UVv-nkFed.html</a> 提取码:6666</p><p>包含：IDM，比特彗星和一些视频下载工具</p><p>办公软件：<a href="https://www.123pan.com/s/yS8UVv-8kFed.html">https://www.123pan.com/s/yS8UVv-8kFed.html</a> 提取码:6666</p><p>包含：Office，Wps，PDF阅读、编辑器，Visio，Project，EndNote，LaTex</p><p>Office：<a href="https://www.123pan.com/s/yS8UVv-6oFed.html">https://www.123pan.com/s/yS8UVv-6oFed.html</a> 提取码:6666</p><p>Wps：<a href="https://www.123pan.com/s/yS8UVv-yoFed.html">https://www.123pan.com/s/yS8UVv-yoFed.html</a> 提取码:6666</p><p>Visio：<a href="https://www.123pan.com/s/yS8UVv-VoFed.html">https://www.123pan.com/s/yS8UVv-VoFed.html</a> 提取码:6666</p><p>Project：<a href="https://www.123pan.com/s/yS8UVv-joFed.html">https://www.123pan.com/s/yS8UVv-joFed.html</a> 提取码:6666</p><p>EndNote：<a href="https://www.123pan.com/s/yS8UVv-TmFed.html">https://www.123pan.com/s/yS8UVv-TmFed.html</a> 提取码:6666</p><p>LaTex：<a href="https://www.123pan.com/s/yS8UVv-vmFed.html">https://www.123pan.com/s/yS8UVv-vmFed.html</a> 提取码:6666</p><p>Foxit福昕PDF编辑器：<a href="https://www.123pan.com/s/yS8UVv-dmFed.html">https://www.123pan.com/s/yS8UVv-dmFed.html</a> 提取码:6666</p><p>Foxit福昕PDF阅读器：<a href="https://www.123pan.com/s/yS8UVv-3mFed.html">https://www.123pan.com/s/yS8UVv-3mFed.html</a> 提取码:6666</p><p>PDFelement万兴PDF专家：<a href="https://www.123pan.com/s/yS8UVv-HmFed.html">https://www.123pan.com/s/yS8UVv-HmFed.html</a> 提取码:6666</p><p>PDFXChangeEditor：<a href="https://www.123pan.com/s/yS8UVv-hmFed.html">https://www.123pan.com/s/yS8UVv-hmFed.html</a> 提取码:6666</p><p>媒体工具：<a href="https://www.123pan.com/s/yS8UVv-0kFed.html">https://www.123pan.com/s/yS8UVv-0kFed.html</a> 提取码:6666</p><p>包含：nuendo，Cubase</p><p>nuendo：<a href="https://www.123pan.com/s/yS8UVv-9mFed.html">https://www.123pan.com/s/yS8UVv-9mFed.html</a> 提取码:6666</p><p>Cubase：<a href="https://www.123pan.com/s/yS8UVv-AmFed.html">https://www.123pan.com/s/yS8UVv-AmFed.html</a> 提取码:6666</p><p>图像处理：<a href="https://www.123pan.com/s/yS8UVv-KkFed.html">https://www.123pan.com/s/yS8UVv-KkFed.html</a> 提取码:6666</p><p>包含：ACDSee，AffinityPhoto，CaptureOne，CorelPainter，亿图图示，SketchBook，EasyPaintToolSAI</p><p>ACDSee：<a href="https://www.123pan.com/s/yS8UVv-QmFed.html">https://www.123pan.com/s/yS8UVv-QmFed.html</a> 提取码:6666</p><p>AffinityPhoto：<a href="https://www.123pan.com/s/yS8UVv-EmFed.html">https://www.123pan.com/s/yS8UVv-EmFed.html</a> 提取码:6666</p><p>CaptureOne：<a href="https://www.123pan.com/s/yS8UVv-kmFed.html">https://www.123pan.com/s/yS8UVv-kmFed.html</a> 提取码:6666</p><p>CorelPainter：<a href="https://www.123pan.com/s/yS8UVv-omFed.html">https://www.123pan.com/s/yS8UVv-omFed.html</a> 提取码:6666</p><p>亿图图示：<a href="https://www.123pan.com/s/yS8UVv-1mFed.html">https://www.123pan.com/s/yS8UVv-1mFed.html</a> 提取码:6666</p><p>SketchBook：<a href="https://www.123pan.com/s/yS8UVv-4mFed.html">https://www.123pan.com/s/yS8UVv-4mFed.html</a> 提取码:6666</p><p>EasyPaintToolSAI：<a href="https://www.123pan.com/s/yS8UVv-mmFed.html">https://www.123pan.com/s/yS8UVv-mmFed.html</a> 提取码:6666</p><p>仿真模拟：<a href="https://www.123pan.com/s/yS8UVv-ukFed.html">https://www.123pan.com/s/yS8UVv-ukFed.html</a> 提取码:6666</p><p>包含：COMSOLMultiphysics，ANSYSElectronicsSuite，ANSYSProducts，AltairHyperWorks，AnsysMaxwell，MSCAdams，Abaqus，VeroVisi，Tecplot360EX，AutodeskMoldflow，MidasCivil，Dynaform</p><p>COMSOLMultiphysics：<a href="https://www.123pan.com/s/yS8UVv-ImFed.html">https://www.123pan.com/s/yS8UVv-ImFed.html</a> 提取码:6666</p><p>ANSYSElectronicsSuite：<a href="https://www.123pan.com/s/yS8UVv-JmFed.html">https://www.123pan.com/s/yS8UVv-JmFed.html</a> 提取码:6666</p><p>ANSYSProducts：<a href="https://www.123pan.com/s/yS8UVv-BmFed.html">https://www.123pan.com/s/yS8UVv-BmFed.html</a> 提取码:6666</p><p>AltairHyperWorks：<a href="https://www.123pan.com/s/yS8UVv-amFed.html">https://www.123pan.com/s/yS8UVv-amFed.html</a> 提取码:6666</p><p>AnsysMaxwell：<a href="https://www.123pan.com/s/yS8UVv-fmFed.html">https://www.123pan.com/s/yS8UVv-fmFed.html</a> 提取码:6666</p><p>MSCAdams：<a href="https://www.123pan.com/s/yS8UVv-pmFed.html">https://www.123pan.com/s/yS8UVv-pmFed.html</a> 提取码:6666</p><p>Abaqus：<a href="https://www.123pan.com/s/yS8UVv-xmFed.html">https://www.123pan.com/s/yS8UVv-xmFed.html</a> 提取码:6666</p><p>VeroVisi：<a href="https://www.123pan.com/s/yS8UVv-GmFed.html">https://www.123pan.com/s/yS8UVv-GmFed.html</a> 提取码:6666</p><p>Tecplot360EX：<a href="https://www.123pan.com/s/yS8UVv-FmFed.html">https://www.123pan.com/s/yS8UVv-FmFed.html</a> 提取码:6666</p><p>AutodeskMoldflow：<a href="https://www.123pan.com/s/yS8UVv-gmFed.html">https://www.123pan.com/s/yS8UVv-gmFed.html</a> 提取码:6666</p><p>MidasCivil：<a href="https://www.123pan.com/s/yS8UVv-wmFed.html">https://www.123pan.com/s/yS8UVv-wmFed.html</a> 提取码:6666</p><p>Dynaform：<a href="https://www.123pan.com/s/yS8UVv-MmFed.html">https://www.123pan.com/s/yS8UVv-MmFed.html</a> 提取码:6666</p><p>数据分析：<a href="https://www.123pan.com/s/yS8UVv-UkFed.html">https://www.123pan.com/s/yS8UVv-UkFed.html</a> 提取码:6666</p><p>包含：Matlab，MySQL，SQLServer，TableauDesktop，Stata，IBMSPSSStatistics，Origin，Minitab，Mathematica，Maple，Amos</p><p>Matlab：<a href="https://www.123pan.com/s/yS8UVv-nmFed.html">https://www.123pan.com/s/yS8UVv-nmFed.html</a> 提取码:6666</p><p>MySQL：<a href="https://www.123pan.com/s/yS8UVv-2mFed.html">https://www.123pan.com/s/yS8UVv-2mFed.html</a> 提取码:6666</p><p>SQLServer：<a href="https://www.123pan.com/s/yS8UVv-smFed.html">https://www.123pan.com/s/yS8UVv-smFed.html</a> 提取码:6666</p><p>TableauDesktop：<a href="https://www.123pan.com/s/yS8UVv-WmFed.html">https://www.123pan.com/s/yS8UVv-WmFed.html</a> 提取码:6666</p><p>Stata：<a href="https://www.123pan.com/s/yS8UVv-CmFed.html">https://www.123pan.com/s/yS8UVv-CmFed.html</a> 提取码:6666</p><p>IBMSPSSStatistics：<a href="https://www.123pan.com/s/yS8UVv-NmFed.html">https://www.123pan.com/s/yS8UVv-NmFed.html</a> 提取码:6666</p><p>Origin：<a href="https://www.123pan.com/s/yS8UVv-OmFed.html">https://www.123pan.com/s/yS8UVv-OmFed.html</a> 提取码:6666</p><p>Minitab：<a href="https://www.123pan.com/s/yS8UVv-RmFed.html">https://www.123pan.com/s/yS8UVv-RmFed.html</a> 提取码:6666</p><p>Mathematica：<a href="https://www.123pan.com/s/yS8UVv-DmFed.html">https://www.123pan.com/s/yS8UVv-DmFed.html</a> 提取码:6666</p><p>Maple：<a href="https://www.123pan.com/s/yS8UVv-rmFed.html">https://www.123pan.com/s/yS8UVv-rmFed.html</a> 提取码:6666</p><p>Amos：<a href="https://www.123pan.com/s/yS8UVv-8mFed.html">https://www.123pan.com/s/yS8UVv-8mFed.html</a> 提取码:6666</p><p>机械设计：<a href="https://www.123pan.com/s/yS8UVv-SkFed.html">https://www.123pan.com/s/yS8UVv-SkFed.html</a> 提取码:6666</p><p>包含：Rhinoceros犀牛，UnigraphicsNX(UGNX)，SolidWorks，PowerMill，Proe，Mastercam，Inventor，Creo，CATIAComposer，CATIA</p><p>Rhinoceros犀牛：<a href="https://www.123pan.com/s/yS8UVv-0mFed.html">https://www.123pan.com/s/yS8UVv-0mFed.html</a> 提取码:6666</p><p>UnigraphicsNX(UGNX)：<a href="https://www.123pan.com/s/yS8UVv-KmFed.html">https://www.123pan.com/s/yS8UVv-KmFed.html</a> 提取码:6666</p><p>SolidWorks：<a href="https://www.123pan.com/s/yS8UVv-umFed.html">https://www.123pan.com/s/yS8UVv-umFed.html</a> 提取码:6666</p><p>PowerMill：<a href="https://www.123pan.com/s/yS8UVv-UmFed.html">https://www.123pan.com/s/yS8UVv-UmFed.html</a> 提取码:6666</p><p>Proe：<a href="https://www.123pan.com/s/yS8UVv-SmFed.html">https://www.123pan.com/s/yS8UVv-SmFed.html</a> 提取码:6666</p><p>Mastercam：<a href="https://www.123pan.com/s/yS8UVv-lmFed.html">https://www.123pan.com/s/yS8UVv-lmFed.html</a> 提取码:6666</p><p>Inventor：<a href="https://www.123pan.com/s/yS8UVv-7mFed.html">https://www.123pan.com/s/yS8UVv-7mFed.html</a> 提取码:6666</p><p>Creo：<a href="https://www.123pan.com/s/yS8UVv-bmFed.html">https://www.123pan.com/s/yS8UVv-bmFed.html</a> 提取码:6666</p><p>CATIAComposer：<a href="https://www.123pan.com/s/yS8UVv-ZmFed.html">https://www.123pan.com/s/yS8UVv-ZmFed.html</a> 提取码:6666</p><p>CATIA：<a href="https://www.123pan.com/s/yS8UVv-cmFed.html">https://www.123pan.com/s/yS8UVv-cmFed.html</a> 提取码:6666</p><p>建筑设计：<a href="https://www.123pan.com/s/yS8UVv-lkFed.html">https://www.123pan.com/s/yS8UVv-lkFed.html</a> 提取码:6666</p><p>包含：AutodeskRevit，AutoCADCivil3D，NavisworksManage，TeklaStructures，Vectorworks</p><p>AutodeskRevit：<a href="https://www.123pan.com/s/yS8UVv-imFed.html">https://www.123pan.com/s/yS8UVv-imFed.html</a> 提取码:6666</p><p>AutoCADCivil3D：<a href="https://www.123pan.com/s/yS8UVv-emFed.html">https://www.123pan.com/s/yS8UVv-emFed.html</a> 提取码:6666</p><p>NavisworksManage：<a href="https://www.123pan.com/s/yS8UVv-tmFed.html">https://www.123pan.com/s/yS8UVv-tmFed.html</a> 提取码:6666</p><p>TeklaStructures：<a href="https://www.123pan.com/s/yS8UVv-zmFed.html">https://www.123pan.com/s/yS8UVv-zmFed.html</a> 提取码:6666</p><p>Vectorworks：<a href="https://www.123pan.com/s/yS8UVv-LmFed.html">https://www.123pan.com/s/yS8UVv-LmFed.html</a> 提取码:6666</p><p>电子电路：<a href="https://www.123pan.com/s/yS8UVv-7kFed.html">https://www.123pan.com/s/yS8UVv-7kFed.html</a> 提取码:6666</p><p>包含：Proteus，Multisim，AltiumDesigner</p><p>Proteus：<a href="https://www.123pan.com/s/yS8UVv-6mFed.html">https://www.123pan.com/s/yS8UVv-6mFed.html</a> 提取码:6666</p><p>Multisim：<a href="https://www.123pan.com/s/yS8UVv-qmFed.html">https://www.123pan.com/s/yS8UVv-qmFed.html</a> 提取码:6666</p><p>AltiumDesigner：<a href="https://www.123pan.com/s/yS8UVv-5mFed.html">https://www.123pan.com/s/yS8UVv-5mFed.html</a> 提取码:6666</p><p>MSDN：<a href="https://www.123pan.com/s/yS8UVv-ymFed.html">https://www.123pan.com/s/yS8UVv-ymFed.html</a> 提取码:6666</p><hr><p>Mac总索引：<a href="https://www.123pan.com/s/yS8UVv-bqged.html%E3%80%90">https://www.123pan.com/s/yS8UVv-bqged.html【</a> 提取码:6666】</p><p>ISO文件：<a href="https://www.123pan.com/s/yS8UVv-66Fed.html%E3%80%90">https://www.123pan.com/s/yS8UVv-66Fed.html【</a> 提取码:6666】</p><p>VMvare：<a href="https://www.123pan.com/s/yS8UVv-OkFed.html%E3%80%90">https://www.123pan.com/s/yS8UVv-OkFed.html【</a> 提取码:6666】</p><p>unlocker：<a href="https://www.123pan.com/s/yS8UVv-y6Fed.html%E3%80%90">https://www.123pan.com/s/yS8UVv-y6Fed.html【</a> 提取码:6666】</p><hr><p>MSDN新网站：next.itellyou.cn</p><p>提示：</p><p>Windows变正版工具KMS：<a href="https://wwi.lanzout.com/igcDdyru6if">https://wwi.lanzout.com/igcDdyru6if</a></p><p>我的蓝筹云KMS：<a href="https://wwcv.lanzouw.com/iyJBM0y2vtwj%E5%AF%86%E7%A0%81:crce">https://wwcv.lanzouw.com/iyJBM0y2vtwj密码:crce</a></p><p>其他正版工具参考：rjctx.com</p><p>必须注意：下载的系统文件必须校验，校验工具和Hash校验值，每个文件夹下都有</p><p>不校验，寄了又得重装系统。。。</p><p>【Windows系统】：</p><p>Win11：<a href="https://www.123pan.com/s/yS8UVv-sqged.html">https://www.123pan.com/s/yS8UVv-sqged.html</a> 提取码:6666</p><p>Win10：<a href="https://www.123pan.com/s/yS8UVv-Wqged.html">https://www.123pan.com/s/yS8UVv-Wqged.html</a> 提取码:6666</p><p>Win8.1：<a href="https://www.123pan.com/s/yS8UVv-Nqged.html">https://www.123pan.com/s/yS8UVv-Nqged.html</a> 提取码:6666</p><p>Win8：<a href="https://www.123pan.com/s/yS8UVv-Oqged.html">https://www.123pan.com/s/yS8UVv-Oqged.html</a> 提取码:6666</p><p>WinVista：<a href="https://www.123pan.com/s/yS8UVv-Dqged.html">https://www.123pan.com/s/yS8UVv-Dqged.html</a> 提取码:6666</p><p>Win7：<a href="https://www.123pan.com/s/yS8UVv-Cqged.html">https://www.123pan.com/s/yS8UVv-Cqged.html</a> 提取码:6666</p><p>WinXP：<a href="https://www.123pan.com/s/yS8UVv-Rqged.html">https://www.123pan.com/s/yS8UVv-Rqged.html</a> 提取码:6666</p><p>【Windows服务器】</p><p>WindowsServer2022：<a href="https://www.123pan.com/s/yS8UVv-rqged.html">https://www.123pan.com/s/yS8UVv-rqged.html</a> 提取码:6666</p><p>WindowsServer2019：<a href="https://www.123pan.com/s/yS8UVv-8qged.html">https://www.123pan.com/s/yS8UVv-8qged.html</a> 提取码:6666</p><p>WindowsServer2016：<a href="https://www.123pan.com/s/yS8UVv-0qged.html">https://www.123pan.com/s/yS8UVv-0qged.html</a> 提取码:6666</p><hr><p>Windows汇总：<a href="https://www.123pan.com/s/yS8UVv-cqged.html">https://www.123pan.com/s/yS8UVv-cqged.html</a> 提取码:6666</p><p>【Linux系统】：</p><p>CentOS：<a href="https://www.123pan.com/s/yS8UVv-lqged.html">https://www.123pan.com/s/yS8UVv-lqged.html</a> 提取码:6666</p><p>Ubuntu：<a href="https://www.123pan.com/s/yS8UVv-Sqged.html">https://www.123pan.com/s/yS8UVv-Sqged.html</a> 提取码:6666</p><p>Fedora：<a href="https://www.123pan.com/s/yS8UVv-7qged.html">https://www.123pan.com/s/yS8UVv-7qged.html</a> 提取码:6666</p><p>UOS：<a href="https://www.123pan.com/s/yS8UVv-Uqged.html">https://www.123pan.com/s/yS8UVv-Uqged.html</a> 提取码:6666</p><p>Deepin：<a href="https://www.123pan.com/s/yS8UVv-uqged.html">https://www.123pan.com/s/yS8UVv-uqged.html</a> 提取码:6666</p><hr><p>Linux汇总：<a href="https://www.123pan.com/s/yS8UVv-Zqged.html">https://www.123pan.com/s/yS8UVv-Zqged.html</a> 提取码:6666</p><p>【MacOS系统】：</p><p>MacOS汇总：<a href="https://www.123pan.com/s/yS8UVv-bqged.html">https://www.123pan.com/s/yS8UVv-bqged.html</a> 提取码:6666</p><p>【ChromiumOS系统】：</p><p>ChromiumOS汇总：<a href="https://www.123pan.com/s/yS8UVv-eqged.html">https://www.123pan.com/s/yS8UVv-eqged.html</a> 提取码:6666</p><p>【BSD系统】：</p><p>FreeBSD：<a href="https://www.123pan.com/s/yS8UVv-iqged.html">https://www.123pan.com/s/yS8UVv-iqged.html</a> 提取码:6666</p><p>NetBSD：<a href="https://www.123pan.com/s/yS8UVv-zqged.html">https://www.123pan.com/s/yS8UVv-zqged.html</a> 提取码:6666</p><p>OpenBSD：<a href="https://www.123pan.com/s/yS8UVv-Lqged.html">https://www.123pan.com/s/yS8UVv-Lqged.html</a> 提取码:6666</p><p>DragonFlyBSD：<a href="https://www.123pan.com/s/yS8UVv-5qged.html">https://www.123pan.com/s/yS8UVv-5qged.html</a> 提取码:6666</p><hr><p>BSD汇总：<a href="https://www.123pan.com/s/yS8UVv-tqged.html">https://www.123pan.com/s/yS8UVv-tqged.html</a> 提取码:6666</p><p>【【【PS：123网盘分享，全是文件夹，点进去自己选择下载版本】】】</p><p>软件主要来源：</p><p>考拉：rjctx.com，脚本之家：<a href="https://www.jb51.net，系统搬运自MSDN：https://msdn.itellyou.cn/，next.itellyou.cn">https://www.jb51.net，系统搬运自MSDN：https://msdn.itellyou.cn/，next.itellyou.cn</a></p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言</title>
      <link href="/posts/ec85.html"/>
      <url>/posts/ec85.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我曾七次鄙视自己的灵魂</title>
      <link href="/posts/essay-demo.html"/>
      <url>/posts/essay-demo.html</url>
      
        <content type="html"><![CDATA[<h3 id="随笔板块，后续会更新文章，目前弄好了模板格式"><a href="#随笔板块，后续会更新文章，目前弄好了模板格式" class="headerlink" title="随笔板块，后续会更新文章，目前弄好了模板格式~"></a>随笔板块，后续会更新文章，目前弄好了模板格式~</h3><div class="ipage">   <div class="ititle">节选自《Seven times have I despised my soul》- Kahlil Gibran</div>   <div class="izhengwen">     <p>    我曾七次鄙视自己的灵魂 - 纪伯伦<br>    The first time when I saw her being meek that she might attain height.<br>    第一次, 当它本可进取时, 却故作谦卑<br>    The second time when I saw her limping before the crippled.<br>    第二次, 当它空虚时, 用爱欲来填充<br>    The third time when she was given to choose between the hard and the easy, and she chose the easy.<br>    第三次, 在堕落和努力之间, 它选择了堕落<br>    The fourth time when she committed a wrong, and comforted herself that others also commit wrong.<br>    第四次, 它犯了错, 却藉由别人的错来宽慰自己<br>     The fifth time when she forbore for weakness, and attributed her patience to strength.<br>    第五次, 它自由软弱，却把它认为是生命的坚韧<br>    The sixth time when she despised the ugliness of a face and knew not that it was one of her own masks.<br>    第六次, 当它嘲笑他人愚蠢时, 却不知自己更是蠢材<br>    The seventh time when she sang a song of praise and deemed it a virtue.<br>    第七次, 它在泥潭时既彻底摆不了烂也不彻底甘心<br>    </p>   </div> </div>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo基础命令</title>
      <link href="/posts/ec85.html"/>
      <url>/posts/ec85.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-基础命令"><a href="#Hexo-基础命令" class="headerlink" title="Hexo 基础命令"></a>Hexo 基础命令</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><pre class="line-numbers language-none"><code class="language-none">hexo new&quot;postName&quot;      新建文章 hexo new page&quot;pageName&quot; 新建页面 hexo generate           生成静态页面至public目录 hexo clean              清除生成内容 hexo server             开启预览访问（默认端口4000，&#39;ctrl + c&#39;关闭server） hexo deploy             将.deploy目录部署到指定空间 hexo help               查看帮助 hexo version            查看hexo的版本hexo server -p 5000 更改端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">hexo g： hexo generatehexo cl：hexo cleanhexo s： hexo serverhexo d： hexo deployhexo n "我的博客"      hexo new "我的博客"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">hexo s -g    生成并本地预览hexo d -g    生成并上传hexo clean &amp;&amp; hexo g -s 清除、生成、启动hexo clean &amp;&amp; hexo g -d 清除、生成、部署<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>md语法</title>
      <link href="/posts/ec85.html"/>
      <url>/posts/ec85.html</url>
      
        <content type="html"><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>在单词或短语前面添加井号 (<code>#</code>) ：<code>#</code> 的数量代表了标题的级别。如，三个 <code>#</code> 表示三级标题 (<code>&lt;h3&gt;</code>)</p><pre class="line-numbers language-none"><code class="language-none"># 一级标题## 二级标题###### 六级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>在行末添加两个或多个空格，然后按回车键，即可换行(<code>&lt;br&gt;</code>)<br>有争议的，因为很难在编辑器中直接看到空格，并且很多人在每个句子后面都会有意或无意地添加两个空格。由于这个原因，你可能要使用除结尾空格以外的其它方式来换行。幸运的是，几乎每个 Markdown 应用程序都支持另一种换行方式：HTML 的 <code>&lt;br&gt;</code> 标签。<br>为了兼容性，请在行尾添加“结尾空格”或 HTML 的 <code>&lt;br&gt;</code> 标签来实现换行。</p><pre class="line-numbers language-none"><code class="language-none">弃我去者昨日之日不可留&lt;br&gt;乱我心者今日之日多烦忧<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>弃我去者昨日之日不可留<br>乱我心者今日之日多烦忧</p><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><p>在需要加粗的部分<code>前后</code>各添加<code>两个</code>星号（asterisks）或下划线（underscores）</p><p>为兼容考虑，请使用星号（asterisks）</p><pre class="line-numbers language-none"><code class="language-none">**粗体**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>粗体</strong></p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>在需要斜体的部分<code>前后</code>各添加<code>一个</code>星号（asterisks）或下划线（underscores）</p><p>为兼容考虑，请使用星号（asterisks）</p><pre class="line-numbers language-none"><code class="language-none">*斜体*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>斜体</em></p><h3 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h3><p>在需要加粗的部分<code>前后</code>各添加<code>三个</code>星号（asterisks）或下划线（underscores）</p><p>为兼容考虑，请使用星号（asterisks）</p><pre class="line-numbers language-none"><code class="language-none">***斜体加粗***<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><em>斜体加粗</em></strong></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>要创建块引用，请在段落前添加一个 <code>&gt;</code> 符号</p><pre class="line-numbers language-none"><code class="language-none">&gt; 块引用<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>块引用</p></blockquote><h3 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h3><pre class="line-numbers language-none"><code class="language-none">&gt; 块引用&gt; 块引用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>块引用</p><blockquote><p>块引用</p></blockquote></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>在行头添加一个数字和一个英文句点，然后空格。数字不必按数学顺序排列，但是列表应当以数字 1 起始</p><ol><li>第一</li><li>第二</li><li>第三</li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>添加破折号 (-)、星号 (*) 或加号 (+) ，然后空格</p><ul><li>一花</li><li>二乃</li><li>三玖</li><li>四叶</li><li>五月</li></ul><h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h3><p>在列表项之下，输入<code>数字 英文句点</code> 或 <code>-</code> 、 <code>+</code> 、 <code>-</code>，然后输入 Tab 键缩进</p><pre class="line-numbers language-none"><code class="language-none">1. 五等分的花嫁- 一花- 二乃- 五等分的花嫁1. 三玖2. 四叶3. 五月<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>五等分的花嫁<ul><li>一花</li><li>二乃</li></ul></li></ol><ul><li>五等分的花嫁 <ol start="3"><li>三玖 </li><li>四叶</li><li>五月</li></ol></li></ul><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h3><p>将单行代码放入两个反引号&#96;&#96;中</p><pre class="line-numbers language-none"><code class="language-none">&#96;print(&quot;Hello World!&quot;)&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>print(&quot;Hello World!&quot;)</code></p><h3 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h3><p>代码块之前和之后的行上使用三个反引号**&#96;&#96;&#96;**或三个波浪号~ ~ ~,然后在后面跟上代码语言</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="math公式"><a href="#math公式" class="headerlink" title="math公式"></a>math公式</h2><h3 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h3><p>在<code>$ $</code>之中填写公式</p><pre class="line-numbers language-wolfram" data-language="wolfram"><code class="language-wolfram">$<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>$<span class="token global-variable variable">$e</span><span class="token operator">^</span><span class="token punctuation">&#123;</span>x<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">&#125;</span>\neq<span class="token punctuation">&#123;</span>e<span class="token operator">^</span>x<span class="token punctuation">&#125;</span><span class="token operator">^</span><span class="token number">2</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$e^{x^2}\neq{e^x}^2$</p><h3 id="块公式"><a href="#块公式" class="headerlink" title="块公式"></a>块公式</h3><p>在<code>$$ $$</code>中填写公式</p><pre class="line-numbers language-wolfram" data-language="wolfram"><code class="language-wolfram">$$<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>$$$<span class="token global-variable variable">$e</span><span class="token operator">^</span><span class="token punctuation">&#123;</span>x<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">&#125;</span>\neq<span class="token punctuation">&#123;</span>e<span class="token operator">^</span>x<span class="token punctuation">&#125;</span><span class="token operator">^</span><span class="token number">2</span>$$$<span class="token global-variable variable">$H</span><span class="token punctuation">(</span>D_2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>\frac<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span>\ log_2 \frac<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span> <span class="token operator">+</span> \frac<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span>\ log_2 \frac<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>$$e^{x^2}\neq{e^x}^2$$<br>$$H(D_2) &#x3D; -(\frac{2}{4}\ log_2 \frac{2}{4} + \frac{2}{4}\ log_2 \frac{2}{4}) &#x3D; 1$$</p><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><pre class="line-numbers language-wolfram" data-language="wolfram"><code class="language-wolfram">$$\begin<span class="token punctuation">&#123;</span>pmatrix<span class="token punctuation">&#125;</span>        <span class="token number">1</span> <span class="token operator">&amp;</span> a_1 <span class="token operator">&amp;</span> a_1<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">&amp;</span> \cdots <span class="token operator">&amp;</span> a_1<span class="token operator">^</span>n \\        <span class="token number">1</span> <span class="token operator">&amp;</span> a_2 <span class="token operator">&amp;</span> a_2<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">&amp;</span> \cdots <span class="token operator">&amp;</span> a_2<span class="token operator">^</span>n \\        \vdots <span class="token operator">&amp;</span> \vdots <span class="token operator">&amp;</span> \vdots <span class="token operator">&amp;</span> \ddots <span class="token operator">&amp;</span> \vdots \\        <span class="token number">1</span> <span class="token operator">&amp;</span> a_m <span class="token operator">&amp;</span> a_m<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">&amp;</span> \cdots <span class="token operator">&amp;</span> a_m<span class="token operator">^</span>n \\        \end<span class="token punctuation">&#123;</span>pmatrix<span class="token punctuation">&#125;</span>$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>\begin{pmatrix}<br>    1 &amp; a_1 &amp; a_1^2 &amp; \cdots &amp; a_1^n \<br>    1 &amp; a_2 &amp; a_2^2 &amp; \cdots &amp; a_2^n \<br>    \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>    1 &amp; a_m &amp; a_m^2 &amp; \cdots &amp; a_m^n \<br>    \end{pmatrix}<br>$$</p><h3 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h3><pre class="line-numbers language-wolfram" data-language="wolfram"><code class="language-wolfram">$$\mathbf<span class="token punctuation">&#123;</span>V<span class="token punctuation">&#125;</span>_1 \times \mathbf<span class="token punctuation">&#123;</span>V<span class="token punctuation">&#125;</span>_2 <span class="token operator">=</span>  \begin<span class="token punctuation">&#123;</span>vmatrix<span class="token punctuation">&#125;</span>\mathbf<span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span> <span class="token operator">&amp;</span> \mathbf<span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span> <span class="token operator">&amp;</span> \mathbf<span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span> \\\frac<span class="token punctuation">&#123;</span>\partial X<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>\partial u<span class="token punctuation">&#125;</span> <span class="token operator">&amp;</span>  \frac<span class="token punctuation">&#123;</span>\partial Y<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>\partial u<span class="token punctuation">&#125;</span> <span class="token operator">&amp;</span> <span class="token number">0</span> \\\frac<span class="token punctuation">&#123;</span>\partial X<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>\partial v<span class="token punctuation">&#125;</span> <span class="token operator">&amp;</span>  \frac<span class="token punctuation">&#123;</span>\partial Y<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>\partial v<span class="token punctuation">&#125;</span> <span class="token operator">&amp;</span> <span class="token number">0</span> \\\end<span class="token punctuation">&#123;</span>vmatrix<span class="token punctuation">&#125;</span>$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 &#x3D; \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>$$</p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>在单独一行上使用三个或多个星号 (<code>***</code>)、破折号 (<code>---</code>) 或下划线 (<code>___</code>) ，然后回车</p><p>为了兼容性，请在分隔线的前后均添加空白行</p><pre class="line-numbers language-none"><code class="language-none">***---___<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><hr><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">~~明天开始努力~~ 现在开始！<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><del>明天开始努力</del> 现在开始！</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>链接名放在中括号内，链接地址放在后面的括号中，链接 title 可选</p><p>超链接语法：<code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code></p><pre class="line-numbers language-none"><code class="language-none">[loyehのblog](https:&#x2F;&#x2F;lo-y-eh.github.io)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是 <a href="https://lo-y-eh.github.io/">loyeh の blog</a></p><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>链接 title 是当鼠标悬停在链接上时会出现的文字，是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">[Markdown语法](https://markdown.com.cn)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[markdown 官方文档](<a href="https://markdown.com.cn/">Markdown 官方教程</a> “最好的 markdown 教程”)</p><h3 id="网址和-Email-地址"><a href="#网址和-Email-地址" class="headerlink" title="网址和 Email 地址"></a>网址和 Email 地址</h3><p>使用尖括号可以很方便地把 URL 或者 email 地址变成可点击的链接</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;https://markdown.com.cn>&lt;fake@example.com><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://markdown.com.cn/">https://markdown.com.cn</a></p><p><a href="mailto:&#102;&#97;&#107;&#x65;&#64;&#101;&#x78;&#x61;&#109;&#112;&#x6c;&#x65;&#46;&#99;&#111;&#109;">&#102;&#97;&#107;&#x65;&#64;&#101;&#x78;&#x61;&#109;&#112;&#x6c;&#x65;&#46;&#99;&#111;&#109;</a></p><h3 id="带格式化的链接"><a href="#带格式化的链接" class="headerlink" title="带格式化的链接"></a>带格式化的链接</h3><blockquote><p>不同的 Markdown 应用程序处理 URL 中间的空格方式不一样。为了兼容，请尽量使用%20 代替空格</p></blockquote><ul><li><p>强调链接, 在链接语法前后增加星号</p><pre class="line-numbers language-none"><code class="language-none">This is the *[Markdown Guide](https:&#x2F;&#x2F;www.markdownguide.org)*.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This is the <em><a href="https://www.markdownguide.org/">Markdown Guide</a></em></p></li><li><p>要将链接表示为代码，请在方括号中添加反引号</p><pre class="line-numbers language-none"><code class="language-none">See the section on [&#96;code&#96;](#code)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>See the section on <a href="https://markdown.com.cn/basic-syntax/links.html#code"><code>code</code></a>.</p></li></ul><h3 id="引用类型链接"><a href="#引用类型链接" class="headerlink" title="引用类型链接"></a>引用类型链接</h3><p>引用样式链接是一种特殊的链接，它使 URL 在 Markdown 中更易于显示和阅读</p><p>参考样式链接分为两部分：与文本保持内联的部分以及存储在文件中其他位置的部分，以使文本易于阅读</p><h4 id="链接的第一部分格式"><a href="#链接的第一部分格式" class="headerlink" title="链接的第一部分格式"></a>链接的第一部分格式</h4><p>引用类型的链接的第一部分使用两组括号进行格式设置。第一组方括号包围应显示为链接的文本。第二组括号显示了一个标签，该标签用于指向您存储在文档其他位置的链接。</p><p>尽管不是必需的，可以在第一组和第二组括号之间包含一个空格。第二组括号中的标签不区分大小写，可以包含字母，数字，空格或标点符号。</p><p>以下示例格式对于链接的第一部分效果相同：</p><ul><li><code>[hobbit-hole][1]</code></li><li><code>[hobbit-hole] [1]</code></li></ul><h4 id="链接的第二部分格式"><a href="#链接的第二部分格式" class="headerlink" title="链接的第二部分格式"></a>链接的第二部分格式</h4><p>引用类型链接的第二部分使用以下属性设置格式：</p><ol><li>放在括号中的标签，其后紧跟一个冒号和至少一个空格（例如<code>[label]:</code>）。</li><li>链接的 URL，可以选择将其括在尖括号中。</li><li>链接的可选标题，可以将其括在双引号，单引号或括号中。</li></ol><p>以下示例格式对于链接的第二部分效果相同：</p><ul><li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle</code></li><li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle &quot;Hobbit lifestyles&quot;</code></li><li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle &#39;Hobbit lifestyles&#39;</code></li><li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle (Hobbit lifestyles)</code></li><li><code>[1]: &lt;https://en.wikipedia.org/wiki/Hobbit#Lifestyle&gt; &quot;Hobbit lifestyles&quot;</code></li><li><code>[1]: &lt;https://en.wikipedia.org/wiki/Hobbit#Lifestyle&gt; &#39;Hobbit lifestyles&#39;</code></li><li><code>[1]: &lt;https://en.wikipedia.org/wiki/Hobbit#Lifestyle&gt; (Hobbit lifestyles)</code></li></ul><p>可以将链接的第二部分放在 Markdown 文档中的任何位置。有些人将它们放在出现的段落之后，有些人则将它们放在文档的末尾（例如尾注或脚注）</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>要添加图像，请使用感叹号 (<code>!</code>)，然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。</p><p>插入图片 Markdown 语法代码：<code>![图片alt](图片链接 &quot;图片title&quot;)</code>。</p><p>对应的 HTML 代码：<code>&lt;img src=&quot;图片链接&quot; alt=&quot;图片alt&quot; title=&quot;图片title&quot;&gt;</code></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">![这是图片](https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402042011206.webp "Magic Gardens")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402042011206.jpg" alt="这是图片"></p><h3 id="链接图片"><a href="#链接图片" class="headerlink" title="链接图片"></a>链接图片</h3><p>给图片增加链接，请将图像的 Markdown 括在方括号中，然后将链接添加在圆括号中。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">[![竹子图片](/assets/img/bamboo.jpg "bamboo")](https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202310012338379.webp)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Lo-Y-eH/image@main/image/202402042008019.webp" alt="这是图片" title="Bamboo"></p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>以下字符都可以通过反斜杠字符达到转义目的</p><table><thead><tr><th align="center">character</th></tr></thead><tbody><tr><td align="center">\</td></tr><tr><td align="center">&#96;</td></tr><tr><td align="center">**</td></tr><tr><td align="center">_</td></tr><tr><td align="center">{}</td></tr><tr><td align="center">[]</td></tr><tr><td align="center">()</td></tr><tr><td align="center">#</td></tr><tr><td align="center">+</td></tr><tr><td align="center">-</td></tr><tr><td align="center">.</td></tr><tr><td align="center">!</td></tr><tr><td align="center">|</td></tr></tbody></table><h2 id="内嵌-HTML-标签"><a href="#内嵌-HTML-标签" class="headerlink" title="内嵌 HTML 标签"></a>内嵌 HTML 标签</h2><p>对于 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 本身。如需使用 HTML，不需要额外标注这是 HTML 或是 Markdown，只需 HTML 标签添加到 Markdown 文本中即可。</p><h3 id="行级內联标签"><a href="#行级內联标签" class="headerlink" title="行级內联标签"></a>行级內联标签</h3><p>HTML 的行级內联标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 不受限制，可以在 Markdown 的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用 Markdown 格式，而采用 HTML 标签来格式化。例如：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图片语法。当你需要更改元素的属性时（例如为文本指定颜色或更改图像的宽度），使用 HTML 标签更方便些。</p><p>HTML 行级內联标签和区块标签不同，在內联标签的范围内， Markdown 的语法是可以解析的。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">This **word** is bold. This &lt;em>word&lt;/em> is italic.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>渲染效果如下:</p><p>This <strong>word</strong> is bold. This <em>word</em> is italic.</p><h3 id="区块标签"><a href="#区块标签" class="headerlink" title="区块标签"></a>区块标签</h3><p>区块元素 ── 比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始与结尾标签，不可以用 tab 或是空白来缩进。Markdown 会自动识别这区块元素，避免在区块标签前后加上没有必要的 <code>&lt;p&gt;</code> 标签。</p><p>例如，在 Markdown 文件里加上一段 HTML 表格：</p><pre class="line-numbers language-none"><code class="language-none">This is a regular paragraph.&lt;table&gt;    &lt;tr&gt;        &lt;td&gt;Foo&lt;&#x2F;td&gt;    &lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;This is another regular paragraph.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This is a regular paragraph.</p><table>    <tr>        <td>Foo</td>    </tr></table><p>This is another regular paragraph.</p><p>请注意，Markdown 语法在 HTML 区块标签中将不会被进行处理。例如，你无法在 HTML 区块内使用 Markdown 形式的<code>*强调*</code>。</p><h3 id="HTML-用法最佳实践"><a href="#HTML-用法最佳实践" class="headerlink" title="HTML 用法最佳实践"></a>HTML 用法最佳实践</h3><p>出于安全原因，并非所有 Markdown 应用程序都支持在 Markdown 文档中添加 HTML。如有疑问，请查看相应 Markdown 应用程序的手册。某些应用程序只支持 HTML 标签的子集。</p><p>对于 HTML 的块级元素 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code> 和 <code>&lt;p&gt;</code>，请在其前后使用空行（blank lines）与其它内容进行分隔。尽量不要使用制表符（tabs）或空格（spaces）对 HTML 标签做缩进，否则将影响格式。</p><p>在 HTML 块级标签内不能使用 Markdown 语法。例如 <code>&lt;p&gt;italic and **bold**&lt;/p&gt;</code> 将不起作用。</p><h1 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h1><p><a href="https://markdown.com.cn/basic_syntax">基本语法</a>主要是为了应付大多数情况下的日常所需元素，但对于某些人来说还不够，这就是扩展语法的用武之地</p><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><h3 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h3><p>并非所有Markdown应用程序都支持扩展语法元素。您需要检查您的应用程序所使用的轻量级标记语言是否支持您要使用的扩展语法元素。如果没有，那么仍然有可能在Markdown处理器中启用扩展。</p><h3 id="轻量标记语言"><a href="#轻量标记语言" class="headerlink" title="轻量标记语言"></a>轻量标记语言</h3><p>有几种轻量级标记语言是Markdown的超集。它们包含Gruber的基本语法，并通过添加其他元素（例如表，代码块，语法突出显示，URL自动链接和脚注）在此基础上构建。许多最受欢迎的Markdown应用程序使用以下轻量级标记语言之一：</p><ul><li><a href="https://commonmark.org/">CommonMark</a></li><li><a href="https://github.github.com/gfm/">GitHub Flavored Markdown (GFM)</a></li><li><a href="https://michelf.ca/projects/php-markdown/extra/">Markdown Extra</a></li><li><a href="https://fletcherpenney.net/multimarkdown/">MultiMarkdown</a></li><li><a href="https://rmarkdown.rstudio.com/">R Markdown</a></li></ul><h3 id="Markdown-处理器"><a href="#Markdown-处理器" class="headerlink" title="Markdown 处理器"></a>Markdown 处理器</h3><p>有许多<a href="https://github.com/markdown/markdown.github.com/wiki/Implementations">Markdown处理器</a>可用，它们中的许多允许您添加启用扩展语法元素的扩展。查看您所使用处理器的文档以获取更多信息。</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>添加表格，使用三个或多个连字符（<code>---</code>）创建每列的标题，并使用管道（<code>|</code>）分隔每列。</p><pre class="line-numbers language-none"><code class="language-none">| Syntax      | Description || ----------- | ----------- || Header      | Title       || Paragraph   | Text        |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">Syntax</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">Header</td><td align="left">Title</td></tr><tr><td align="left">Paragraph</td><td align="left">Text</td></tr></tbody></table><p>单元格宽度可以变化，如下所示。呈现的输出将看起来相同。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">| Syntax | Description || --- | ----------- || Header | Title || Paragraph | Text |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（<code>:</code>），将列中的文本对齐到左侧，右侧或中心。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">| Syntax      | Description | Test Text     || :---        |    :----:   |          ---: || Header      | Title       | Here's this   || Paragraph   | Text        | And more      |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">Syntax</th><th align="center">Description</th><th align="right">Test Text</th></tr></thead><tbody><tr><td align="left">Header</td><td align="center">Title</td><td align="right">Here’s this</td></tr><tr><td align="left">Paragraph</td><td align="center">Text</td><td align="right">And more</td></tr></tbody></table><h3 id="表格中的文字"><a href="#表格中的文字" class="headerlink" title="表格中的文字"></a>表格中的文字</h3><p>可以在表格中设置文本格式。例如，可以添加链接，单行代码（仅反引号 &#96;&#96; ）和强调。</p><p>不能添加标题，块引用，列表，水平规则，图像或HTML标签。</p><h3 id="表中转义-“-”"><a href="#表中转义-“-”" class="headerlink" title="表中转义 “|”"></a>表中转义 “|”</h3><p>可以使用表格的HTML字符代码（<code>|</code>）在表中显示竖线（<code>|</code>）字符。</p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注使您可以添加注释和参考，而不会使文档正文混乱。当您创建脚注时，带有脚注的上标数字会出现在您添加脚注参考的位置。读者可以单击链接以跳至页面底部的脚注内容。</p><p>要创建脚注参考，请在方括号（<code>[^1]</code>）内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。标识符仅将脚注参考与脚注本身相关联-在输出中，脚注按顺序编号。</p><p>在括号内使用另一个插入符号和数字添加脚注，并用冒号和文本（<code>[^1]: My footnote.</code>）。您不必在文档末尾添加脚注。您可以将它们放在除列表，块引号和表之类的其他元素之外的任何位置。</p><pre class="line-numbers language-none"><code class="language-none">这是一个简单的脚注，[^1] [^1]: 这是第一个脚注这是一个更长的脚注，[^bignote][^bignote]: Here&#39;s one with multiple paragraphs and code.    Indent paragraphs to include them in the footnote.    &#96;&#123; my code &#125;&#96;    Add as many paragraphs as you like.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个简单的脚注，<a href="%E8%BF%99%E6%98%AF%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%84%9A%E6%B3%A8">^1</a> </p><p>这是一个更长的脚注，[^bignote]</p><p>[^bignote]: Here’s one with multiple paragraphs and code.</p><pre><code>Indent paragraphs to include them in the footnote.`&#123; my code &#125;`Add as many paragraphs as you like.</code></pre><p>脚注问题修复：[hexo<a href="https://seayj.cn/articles/33818/#shi-tian-jia-md-ding-yi-lie-biao">Matery] 玩转 Markdown | SeaYJ’s Blog</a></p><h2 id="标题ID"><a href="#标题ID" class="headerlink" title="标题ID"></a>标题ID</h2><p>许多Markdown处理器支持<code>标题</code>自定义ID，一些Markdown处理器会自动添加它们。添加自定义ID允许你直接链接到标题并使用CSS对其进行修改。要添加自定义标题ID，请在与标题相同的行上用大括号括起该自定义ID。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">### My Great Heading &#123;#custom-id&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>HTML看起来像这样：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>custom-id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>My Great Heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="链接到标题ID"><a href="#链接到标题ID" class="headerlink" title="链接到标题ID"></a>链接到标题ID</h3><p>通过创建带有数字符号（<code>#</code>）和自定义标题ID的<a href="(/basic-syntax/links.html">标准链接</a>，可以链接到文件中具有自定义ID的标题。</p><table><thead><tr><th>Markdown</th><th>HTML</th><th>预览效果</th></tr></thead><tbody><tr><td><code>[Heading IDs](#heading-ids)</code></td><td><code>&lt;a href=&quot;#heading-ids&quot;&gt;Heading IDs&lt;/a&gt;</code></td><td><a href="https://markdown.com.cn/extended-syntax/heading-ids.html#heading-ids">Heading IDs</a></td></tr></tbody></table><p>其他网站可以通过将自定义标题ID添加到网页的完整URL</p><h2 id="任务表"><a href="#任务表" class="headerlink" title="任务表"></a>任务表</h2><p>创建任务列表，在任务列表项之前添加破折号<code>-</code>和方括号<code>[ ]</code>，并在<code>[ ]</code>前面加上空格。要选择一个复选框，请在方括号<code>[x]</code>之间添加 x </p><pre class="line-numbers language-text" data-language="text"><code class="language-text">- [x] Write the press release- [ ] Update the website- [ ] Contact the media<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><input checked="" disabled="" type="checkbox"> Write the press release</li><li><input disabled="" type="checkbox"> Update the website</li><li><input disabled="" type="checkbox"> Contact the media</li></ul><h2 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h2><p>有两种方法可以将表情符号添加到Markdown文件中：将表情符号复制并粘贴到Markdown格式的文本中，或者键入<em>emoji shortcodes</em>。</p><p>###复制和粘贴表情符号</p><p>在大多数情况下，您可以简单地从<a href="https://emojipedia.org/">Emojipedia</a> 等来源复制表情符号并将其粘贴到文档中。许多Markdown应用程序会自动以Markdown格式的文本显示表情符号。从Markdown应用程序导出的HTML和PDF文件应显示表情符号。</p><p><strong>Tip:</strong> 如果您使用的是静态网站生成器，请确保将HTML页面编码为UTF-8。.</p><p>###使用表情符号简码</p><p>一些Markdown应用程序允许您通过键入表情符号短代码来插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">去露营了！ :tent: 很快回来。真好笑！ :joy:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p>去露营了！⛺很快回来。</p><p>真好笑！😂</p><p><strong>Note:</strong> 注意：您可以使用此<a href="https://gist.github.com/rxaviers/7360908">表情符号简码列表</a>，但请记住，表情符号简码因应用程序而异。</p><h1 id="自动网址链接"><a href="#自动网址链接" class="headerlink" title="自动网址链接"></a>自动网址链接</h1><p>许多Markdown处理器会自动将URL转换为链接。这意味着如果输入<a href="http://www.example.com，即使未[使用方括号](https://markdown.com.cn/basic-syntax/links.html)，也会自动将其转换为链接。">http://www.example.com，即使未[使用方括号](https://markdown.com.cn/basic-syntax/links.html)，也会自动将其转换为链接。</a></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">http://www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>呈现的输出如下所示：</p><p><a href="http://www.example.com/">http://www.example.com</a></p><h3 id="禁用自动URL链接"><a href="#禁用自动URL链接" class="headerlink" title="禁用自动URL链接"></a>禁用自动URL链接</h3><p>如果不希望自动链接URL，则可以使用反引号来禁止</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">`http://www.example.com`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>呈现的输出如下所示：</p><p><code>http://www.example.com</code></p><h2 id="Diagrams"><a href="#Diagrams" class="headerlink" title="Diagrams"></a>Diagrams</h2>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
